// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cs {

namespace {

const ::google::protobuf::Descriptor* CSPkgHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPkgHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPKG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPKG_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPKGBody_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPKGBody_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPKGBody_S2C_Common_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPKGBody_S2C_Common_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_5fmessage_2eproto() {
  protobuf_AddDesc_cs_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs_message.proto");
  GOOGLE_CHECK(file != NULL);
  CSPkgHead_descriptor_ = file->message_type(0);
  static const int CSPkgHead_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPkgHead, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPkgHead, msgseqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPkgHead, encrypttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPkgHead, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPkgHead, errmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPkgHead, compresstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPkgHead, notifymsgseqid_),
  };
  CSPkgHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPkgHead_descriptor_,
      CSPkgHead::default_instance_,
      CSPkgHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPkgHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPkgHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPkgHead));
  CSPKG_descriptor_ = file->message_type(1);
  static const int CSPKG_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPKG, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPKG, body_),
  };
  CSPKG_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPKG_descriptor_,
      CSPKG::default_instance_,
      CSPKG_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPKG, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPKG, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPKG));
  CSPKGBody_S2C_descriptor_ = file->message_type(2);
  static const int CSPKGBody_S2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPKGBody_S2C, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPKGBody_S2C, commondata_),
  };
  CSPKGBody_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPKGBody_S2C_descriptor_,
      CSPKGBody_S2C::default_instance_,
      CSPKGBody_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPKGBody_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPKGBody_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPKGBody_S2C));
  CSPKGBody_S2C_Common_descriptor_ = file->message_type(3);
  static const int CSPKGBody_S2C_Common_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPKGBody_S2C_Common, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPKGBody_S2C_Common, unitlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPKGBody_S2C_Common, cardlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPKGBody_S2C_Common, statuslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPKGBody_S2C_Common, serverstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPKGBody_S2C_Common, countdown_),
  };
  CSPKGBody_S2C_Common_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPKGBody_S2C_Common_descriptor_,
      CSPKGBody_S2C_Common::default_instance_,
      CSPKGBody_S2C_Common_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPKGBody_S2C_Common, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPKGBody_S2C_Common, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPKGBody_S2C_Common));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPkgHead_descriptor_, &CSPkgHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPKG_descriptor_, &CSPKG::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPKGBody_S2C_descriptor_, &CSPKGBody_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPKGBody_S2C_Common_descriptor_, &CSPKGBody_S2C_Common::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cs_5fmessage_2eproto() {
  delete CSPkgHead::default_instance_;
  delete CSPkgHead_reflection_;
  delete CSPKG::default_instance_;
  delete CSPKG_reflection_;
  delete CSPKGBody_S2C::default_instance_;
  delete CSPKGBody_S2C_reflection_;
  delete CSPKGBody_S2C_Common::default_instance_;
  delete CSPKGBody_S2C_Common_reflection_;
}

void protobuf_AddDesc_cs_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cs::protobuf_AddDesc_cs_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020cs_message.proto\022\002cs\032\017cs_common.proto\""
    "\224\001\n\tCSPkgHead\022\r\n\005CmdID\030\001 \002(\r\022\020\n\010MsgSeqID"
    "\030\002 \002(\r\022\023\n\013EncryptType\030\003 \002(\r\022\017\n\007RetCode\030\004"
    " \001(\r\022\022\n\nErrMessage\030\005 \001(\t\022\024\n\014CompressType"
    "\030\006 \002(\r\022\026\n\016NotifyMsgSeqID\030\007 \001(\r\"2\n\005CSPKG\022"
    "\033\n\004Head\030\001 \002(\0132\r.cs.CSPkgHead\022\014\n\004Body\030\002 \002"
    "(\014\"K\n\rCSPKGBody_S2C\022\014\n\004Body\030\001 \002(\014\022,\n\nCom"
    "monData\030\002 \001(\0132\030.cs.CSPKGBody_S2C_Common\""
    "\273\001\n\024CSPKGBody_S2C_Common\022\"\n\010baseInfo\030\001 \001"
    "(\0132\020.cs.BaseInfoType\022 \n\010unitList\030\002 \003(\0132\016"
    ".cs.PlayerUnit\022 \n\010cardList\030\003 \003(\0132\016.cs.Pl"
    "ayerCard\022\022\n\nstatusList\030\004 \003(\005\022\024\n\014serverSt"
    "atus\030\005 \001(\005\022\021\n\tcountDown\030\006 \001(\005", 509);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs_message.proto", &protobuf_RegisterTypes);
  CSPkgHead::default_instance_ = new CSPkgHead();
  CSPKG::default_instance_ = new CSPKG();
  CSPKGBody_S2C::default_instance_ = new CSPKGBody_S2C();
  CSPKGBody_S2C_Common::default_instance_ = new CSPKGBody_S2C_Common();
  CSPkgHead::default_instance_->InitAsDefaultInstance();
  CSPKG::default_instance_->InitAsDefaultInstance();
  CSPKGBody_S2C::default_instance_->InitAsDefaultInstance();
  CSPKGBody_S2C_Common::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_5fmessage_2eproto {
  StaticDescriptorInitializer_cs_5fmessage_2eproto() {
    protobuf_AddDesc_cs_5fmessage_2eproto();
  }
} static_descriptor_initializer_cs_5fmessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CSPkgHead::kCmdIDFieldNumber;
const int CSPkgHead::kMsgSeqIDFieldNumber;
const int CSPkgHead::kEncryptTypeFieldNumber;
const int CSPkgHead::kRetCodeFieldNumber;
const int CSPkgHead::kErrMessageFieldNumber;
const int CSPkgHead::kCompressTypeFieldNumber;
const int CSPkgHead::kNotifyMsgSeqIDFieldNumber;
#endif  // !_MSC_VER

CSPkgHead::CSPkgHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPkgHead::InitAsDefaultInstance() {
}

CSPkgHead::CSPkgHead(const CSPkgHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPkgHead::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 0u;
  msgseqid_ = 0u;
  encrypttype_ = 0u;
  retcode_ = 0u;
  errmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  compresstype_ = 0u;
  notifymsgseqid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPkgHead::~CSPkgHead() {
  SharedDtor();
}

void CSPkgHead::SharedDtor() {
  if (errmessage_ != &::google::protobuf::internal::kEmptyString) {
    delete errmessage_;
  }
  if (this != default_instance_) {
  }
}

void CSPkgHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPkgHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPkgHead_descriptor_;
}

const CSPkgHead& CSPkgHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmessage_2eproto();
  return *default_instance_;
}

CSPkgHead* CSPkgHead::default_instance_ = NULL;

CSPkgHead* CSPkgHead::New() const {
  return new CSPkgHead;
}

void CSPkgHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmdid_ = 0u;
    msgseqid_ = 0u;
    encrypttype_ = 0u;
    retcode_ = 0u;
    if (has_errmessage()) {
      if (errmessage_ != &::google::protobuf::internal::kEmptyString) {
        errmessage_->clear();
      }
    }
    compresstype_ = 0u;
    notifymsgseqid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPkgHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 CmdID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmdid_)));
          set_has_cmdid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MsgSeqID;
        break;
      }

      // required uint32 MsgSeqID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MsgSeqID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgseqid_)));
          set_has_msgseqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_EncryptType;
        break;
      }

      // required uint32 EncryptType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EncryptType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &encrypttype_)));
          set_has_encrypttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_RetCode;
        break;
      }

      // optional uint32 RetCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RetCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ErrMessage;
        break;
      }

      // optional string ErrMessage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ErrMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errmessage().data(), this->errmessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CompressType;
        break;
      }

      // required uint32 CompressType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CompressType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compresstype_)));
          set_has_compresstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_NotifyMsgSeqID;
        break;
      }

      // optional uint32 NotifyMsgSeqID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NotifyMsgSeqID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &notifymsgseqid_)));
          set_has_notifymsgseqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPkgHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 CmdID = 1;
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmdid(), output);
  }

  // required uint32 MsgSeqID = 2;
  if (has_msgseqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgseqid(), output);
  }

  // required uint32 EncryptType = 3;
  if (has_encrypttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->encrypttype(), output);
  }

  // optional uint32 RetCode = 4;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->retcode(), output);
  }

  // optional string ErrMessage = 5;
  if (has_errmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errmessage().data(), this->errmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->errmessage(), output);
  }

  // required uint32 CompressType = 6;
  if (has_compresstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->compresstype(), output);
  }

  // optional uint32 NotifyMsgSeqID = 7;
  if (has_notifymsgseqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->notifymsgseqid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPkgHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 CmdID = 1;
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmdid(), target);
  }

  // required uint32 MsgSeqID = 2;
  if (has_msgseqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgseqid(), target);
  }

  // required uint32 EncryptType = 3;
  if (has_encrypttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->encrypttype(), target);
  }

  // optional uint32 RetCode = 4;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->retcode(), target);
  }

  // optional string ErrMessage = 5;
  if (has_errmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errmessage().data(), this->errmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->errmessage(), target);
  }

  // required uint32 CompressType = 6;
  if (has_compresstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->compresstype(), target);
  }

  // optional uint32 NotifyMsgSeqID = 7;
  if (has_notifymsgseqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->notifymsgseqid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPkgHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 CmdID = 1;
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmdid());
    }

    // required uint32 MsgSeqID = 2;
    if (has_msgseqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgseqid());
    }

    // required uint32 EncryptType = 3;
    if (has_encrypttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->encrypttype());
    }

    // optional uint32 RetCode = 4;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string ErrMessage = 5;
    if (has_errmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmessage());
    }

    // required uint32 CompressType = 6;
    if (has_compresstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compresstype());
    }

    // optional uint32 NotifyMsgSeqID = 7;
    if (has_notifymsgseqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->notifymsgseqid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPkgHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPkgHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPkgHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPkgHead::MergeFrom(const CSPkgHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_msgseqid()) {
      set_msgseqid(from.msgseqid());
    }
    if (from.has_encrypttype()) {
      set_encrypttype(from.encrypttype());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_errmessage()) {
      set_errmessage(from.errmessage());
    }
    if (from.has_compresstype()) {
      set_compresstype(from.compresstype());
    }
    if (from.has_notifymsgseqid()) {
      set_notifymsgseqid(from.notifymsgseqid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPkgHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPkgHead::CopyFrom(const CSPkgHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPkgHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;

  return true;
}

void CSPkgHead::Swap(CSPkgHead* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(msgseqid_, other->msgseqid_);
    std::swap(encrypttype_, other->encrypttype_);
    std::swap(retcode_, other->retcode_);
    std::swap(errmessage_, other->errmessage_);
    std::swap(compresstype_, other->compresstype_);
    std::swap(notifymsgseqid_, other->notifymsgseqid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPkgHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPkgHead_descriptor_;
  metadata.reflection = CSPkgHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPKG::kHeadFieldNumber;
const int CSPKG::kBodyFieldNumber;
#endif  // !_MSC_VER

CSPKG::CSPKG()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPKG::InitAsDefaultInstance() {
  head_ = const_cast< ::cs::CSPkgHead*>(&::cs::CSPkgHead::default_instance());
}

CSPKG::CSPKG(const CSPKG& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPKG::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPKG::~CSPKG() {
  SharedDtor();
}

void CSPKG::SharedDtor() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (this != default_instance_) {
    delete head_;
  }
}

void CSPKG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPKG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPKG_descriptor_;
}

const CSPKG& CSPKG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmessage_2eproto();
  return *default_instance_;
}

CSPKG* CSPKG::default_instance_ = NULL;

CSPKG* CSPKG::New() const {
  return new CSPKG;
}

void CSPKG::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::cs::CSPkgHead::Clear();
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPKG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cs.CSPkgHead Head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Body;
        break;
      }

      // required bytes Body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPKG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .cs.CSPkgHead Head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }

  // required bytes Body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPKG::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .cs.CSPkgHead Head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }

  // required bytes Body = 2;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPKG::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cs.CSPkgHead Head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // required bytes Body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPKG::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPKG* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPKG*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPKG::MergeFrom(const CSPKG& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::cs::CSPkgHead::MergeFrom(from.head());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPKG::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPKG::CopyFrom(const CSPKG& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPKG::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_head()) {
    if (!this->head().IsInitialized()) return false;
  }
  return true;
}

void CSPKG::Swap(CSPKG* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPKG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPKG_descriptor_;
  metadata.reflection = CSPKG_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPKGBody_S2C::kBodyFieldNumber;
const int CSPKGBody_S2C::kCommonDataFieldNumber;
#endif  // !_MSC_VER

CSPKGBody_S2C::CSPKGBody_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPKGBody_S2C::InitAsDefaultInstance() {
  commondata_ = const_cast< ::cs::CSPKGBody_S2C_Common*>(&::cs::CSPKGBody_S2C_Common::default_instance());
}

CSPKGBody_S2C::CSPKGBody_S2C(const CSPKGBody_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPKGBody_S2C::SharedCtor() {
  _cached_size_ = 0;
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  commondata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPKGBody_S2C::~CSPKGBody_S2C() {
  SharedDtor();
}

void CSPKGBody_S2C::SharedDtor() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (this != default_instance_) {
    delete commondata_;
  }
}

void CSPKGBody_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPKGBody_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPKGBody_S2C_descriptor_;
}

const CSPKGBody_S2C& CSPKGBody_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmessage_2eproto();
  return *default_instance_;
}

CSPKGBody_S2C* CSPKGBody_S2C::default_instance_ = NULL;

CSPKGBody_S2C* CSPKGBody_S2C::New() const {
  return new CSPKGBody_S2C;
}

void CSPKGBody_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
    if (has_commondata()) {
      if (commondata_ != NULL) commondata_->::cs::CSPKGBody_S2C_Common::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPKGBody_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes Body = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CommonData;
        break;
      }

      // optional .cs.CSPKGBody_S2C_Common CommonData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CommonData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commondata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPKGBody_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes Body = 1;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->body(), output);
  }

  // optional .cs.CSPKGBody_S2C_Common CommonData = 2;
  if (has_commondata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commondata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPKGBody_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes Body = 1;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->body(), target);
  }

  // optional .cs.CSPKGBody_S2C_Common CommonData = 2;
  if (has_commondata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commondata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPKGBody_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes Body = 1;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

    // optional .cs.CSPKGBody_S2C_Common CommonData = 2;
    if (has_commondata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commondata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPKGBody_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPKGBody_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPKGBody_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPKGBody_S2C::MergeFrom(const CSPKGBody_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_commondata()) {
      mutable_commondata()->::cs::CSPKGBody_S2C_Common::MergeFrom(from.commondata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPKGBody_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPKGBody_S2C::CopyFrom(const CSPKGBody_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPKGBody_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSPKGBody_S2C::Swap(CSPKGBody_S2C* other) {
  if (other != this) {
    std::swap(body_, other->body_);
    std::swap(commondata_, other->commondata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPKGBody_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPKGBody_S2C_descriptor_;
  metadata.reflection = CSPKGBody_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPKGBody_S2C_Common::kBaseInfoFieldNumber;
const int CSPKGBody_S2C_Common::kUnitListFieldNumber;
const int CSPKGBody_S2C_Common::kCardListFieldNumber;
const int CSPKGBody_S2C_Common::kStatusListFieldNumber;
const int CSPKGBody_S2C_Common::kServerStatusFieldNumber;
const int CSPKGBody_S2C_Common::kCountDownFieldNumber;
#endif  // !_MSC_VER

CSPKGBody_S2C_Common::CSPKGBody_S2C_Common()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPKGBody_S2C_Common::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::cs::BaseInfoType*>(&::cs::BaseInfoType::default_instance());
}

CSPKGBody_S2C_Common::CSPKGBody_S2C_Common(const CSPKGBody_S2C_Common& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPKGBody_S2C_Common::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  serverstatus_ = 0;
  countdown_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPKGBody_S2C_Common::~CSPKGBody_S2C_Common() {
  SharedDtor();
}

void CSPKGBody_S2C_Common::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

void CSPKGBody_S2C_Common::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPKGBody_S2C_Common::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPKGBody_S2C_Common_descriptor_;
}

const CSPKGBody_S2C_Common& CSPKGBody_S2C_Common::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmessage_2eproto();
  return *default_instance_;
}

CSPKGBody_S2C_Common* CSPKGBody_S2C_Common::default_instance_ = NULL;

CSPKGBody_S2C_Common* CSPKGBody_S2C_Common::New() const {
  return new CSPKGBody_S2C_Common;
}

void CSPKGBody_S2C_Common::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::cs::BaseInfoType::Clear();
    }
    serverstatus_ = 0;
    countdown_ = 0;
  }
  unitlist_.Clear();
  cardlist_.Clear();
  statuslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPKGBody_S2C_Common::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cs.BaseInfoType baseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unitList;
        break;
      }

      // repeated .cs.PlayerUnit unitList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unitList;
        if (input->ExpectTag(26)) goto parse_cardList;
        break;
      }

      // repeated .cs.PlayerCard cardList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cardlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cardList;
        if (input->ExpectTag(32)) goto parse_statusList;
        break;
      }

      // repeated int32 statusList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_statusList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_statuslist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_statuslist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_statusList;
        if (input->ExpectTag(40)) goto parse_serverStatus;
        break;
      }

      // optional int32 serverStatus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverstatus_)));
          set_has_serverstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_countDown;
        break;
      }

      // optional int32 countDown = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countdown_)));
          set_has_countdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPKGBody_S2C_Common::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cs.BaseInfoType baseInfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // repeated .cs.PlayerUnit unitList = 2;
  for (int i = 0; i < this->unitlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unitlist(i), output);
  }

  // repeated .cs.PlayerCard cardList = 3;
  for (int i = 0; i < this->cardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cardlist(i), output);
  }

  // repeated int32 statusList = 4;
  for (int i = 0; i < this->statuslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->statuslist(i), output);
  }

  // optional int32 serverStatus = 5;
  if (has_serverstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->serverstatus(), output);
  }

  // optional int32 countDown = 6;
  if (has_countdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->countdown(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPKGBody_S2C_Common::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .cs.BaseInfoType baseInfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // repeated .cs.PlayerUnit unitList = 2;
  for (int i = 0; i < this->unitlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unitlist(i), target);
  }

  // repeated .cs.PlayerCard cardList = 3;
  for (int i = 0; i < this->cardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cardlist(i), target);
  }

  // repeated int32 statusList = 4;
  for (int i = 0; i < this->statuslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->statuslist(i), target);
  }

  // optional int32 serverStatus = 5;
  if (has_serverstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->serverstatus(), target);
  }

  // optional int32 countDown = 6;
  if (has_countdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->countdown(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPKGBody_S2C_Common::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cs.BaseInfoType baseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional int32 serverStatus = 5;
    if (has_serverstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverstatus());
    }

    // optional int32 countDown = 6;
    if (has_countdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countdown());
    }

  }
  // repeated .cs.PlayerUnit unitList = 2;
  total_size += 1 * this->unitlist_size();
  for (int i = 0; i < this->unitlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitlist(i));
  }

  // repeated .cs.PlayerCard cardList = 3;
  total_size += 1 * this->cardlist_size();
  for (int i = 0; i < this->cardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cardlist(i));
  }

  // repeated int32 statusList = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->statuslist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->statuslist(i));
    }
    total_size += 1 * this->statuslist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPKGBody_S2C_Common::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPKGBody_S2C_Common* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPKGBody_S2C_Common*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPKGBody_S2C_Common::MergeFrom(const CSPKGBody_S2C_Common& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitlist_.MergeFrom(from.unitlist_);
  cardlist_.MergeFrom(from.cardlist_);
  statuslist_.MergeFrom(from.statuslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::cs::BaseInfoType::MergeFrom(from.baseinfo());
    }
    if (from.has_serverstatus()) {
      set_serverstatus(from.serverstatus());
    }
    if (from.has_countdown()) {
      set_countdown(from.countdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPKGBody_S2C_Common::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPKGBody_S2C_Common::CopyFrom(const CSPKGBody_S2C_Common& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPKGBody_S2C_Common::IsInitialized() const {

  return true;
}

void CSPKGBody_S2C_Common::Swap(CSPKGBody_S2C_Common* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    unitlist_.Swap(&other->unitlist_);
    cardlist_.Swap(&other->cardlist_);
    statuslist_.Swap(&other->statuslist_);
    std::swap(serverstatus_, other->serverstatus_);
    std::swap(countdown_, other->countdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPKGBody_S2C_Common::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPKGBody_S2C_Common_descriptor_;
  metadata.reflection = CSPKGBody_S2C_Common_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cs

// @@protoc_insertion_point(global_scope)
