// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cs {

namespace {

const ::google::protobuf::Descriptor* CSVector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSVector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseInfoType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseInfoType_reflection_ = NULL;
const ::google::protobuf::Descriptor* VersionResourceType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VersionResourceType_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemList_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AchievementData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AchievementData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TechInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TechInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoldersInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoldersInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVPTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVPTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomEndInfoType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomEndInfoType_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSNotifyClientReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSNotifyClientReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerVipList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerVipList_reflection_ = NULL;
const ::google::protobuf::Descriptor* VipChgInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VipChgInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVPBattleReportPlayers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVPBattleReportPlayers_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_5fcommon_2eproto() {
  protobuf_AddDesc_cs_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs_common.proto");
  GOOGLE_CHECK(file != NULL);
  CSVector3_descriptor_ = file->message_type(0);
  static const int CSVector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVector3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVector3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVector3, z_),
  };
  CSVector3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSVector3_descriptor_,
      CSVector3::default_instance_,
      CSVector3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVector3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVector3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSVector3));
  BaseInfoType_descriptor_ = file->message_type(1);
  static const int BaseInfoType_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoType, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoType, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoType, playerelo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoType, playercolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoType, playermoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoType, playerstone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoType, playersteel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoType, playerhardcurrency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoType, playerxp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoType, playerlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoType, unlockedterritorymaxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoType, ranksection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoType, ranksubsection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoType, allianceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoType, alliancesignet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoType, alliancememtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoType, playerpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoType, vipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoType, viptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoType, playerho_),
  };
  BaseInfoType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseInfoType_descriptor_,
      BaseInfoType::default_instance_,
      BaseInfoType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseInfoType));
  VersionResourceType_descriptor_ = file->message_type(2);
  static const int VersionResourceType_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionResourceType, gameversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionResourceType, ostype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionResourceType, chanmerchant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionResourceType, resourceversion_),
  };
  VersionResourceType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VersionResourceType_descriptor_,
      VersionResourceType::default_instance_,
      VersionResourceType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionResourceType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionResourceType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VersionResourceType));
  KeyValue_descriptor_ = file->message_type(3);
  static const int KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, value_),
  };
  KeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValue_descriptor_,
      KeyValue::default_instance_,
      KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValue));
  Item_descriptor_ = file->message_type(4);
  static const int Item_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, num_),
  };
  Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_descriptor_,
      Item::default_instance_,
      Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item));
  ItemList_descriptor_ = file->message_type(5);
  static const int ItemList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemList, item_),
  };
  ItemList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemList_descriptor_,
      ItemList::default_instance_,
      ItemList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemList));
  QuestInfo_descriptor_ = file->message_type(6);
  static const int QuestInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, offsetcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, tasklv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, isvip_),
  };
  QuestInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestInfo_descriptor_,
      QuestInfo::default_instance_,
      QuestInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestInfo));
  AchievementData_descriptor_ = file->message_type(7);
  static const int AchievementData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementData, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementData, store_),
  };
  AchievementData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AchievementData_descriptor_,
      AchievementData::default_instance_,
      AchievementData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AchievementData));
  TechInfo_descriptor_ = file->message_type(8);
  static const int TechInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechInfo, techkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechInfo, techlevel_),
  };
  TechInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TechInfo_descriptor_,
      TechInfo::default_instance_,
      TechInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TechInfo));
  SoldersInfo_descriptor_ = file->message_type(9);
  static const int SoldersInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldersInfo, solderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldersInfo, solderlevel_),
  };
  SoldersInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoldersInfo_descriptor_,
      SoldersInfo::default_instance_,
      SoldersInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldersInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldersInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoldersInfo));
  SkillsInfo_descriptor_ = file->message_type(10);
  static const int SkillsInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillsInfo, skillid_),
  };
  SkillsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillsInfo_descriptor_,
      SkillsInfo::default_instance_,
      SkillsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillsInfo));
  PVPTeamInfo_descriptor_ = file->message_type(11);
  static const int PVPTeamInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPTeamInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPTeamInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPTeamInfo, robottype_),
  };
  PVPTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVPTeamInfo_descriptor_,
      PVPTeamInfo::default_instance_,
      PVPTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVPTeamInfo));
  RoomEndInfoType_descriptor_ = file->message_type(12);
  static const int RoomEndInfoType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomEndInfoType, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomEndInfoType, playerstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomEndInfoType, power_),
  };
  RoomEndInfoType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomEndInfoType_descriptor_,
      RoomEndInfoType::default_instance_,
      RoomEndInfoType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomEndInfoType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomEndInfoType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomEndInfoType));
  CSNotifyClientReply_descriptor_ = file->message_type(13);
  static const int CSNotifyClientReply_offsets_[1] = {
  };
  CSNotifyClientReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSNotifyClientReply_descriptor_,
      CSNotifyClientReply::default_instance_,
      CSNotifyClientReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNotifyClientReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNotifyClientReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSNotifyClientReply));
  PlayerVipList_descriptor_ = file->message_type(14);
  static const int PlayerVipList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVipList, superviptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVipList, viptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVipList, vipchg_),
  };
  PlayerVipList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerVipList_descriptor_,
      PlayerVipList::default_instance_,
      PlayerVipList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVipList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVipList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerVipList));
  VipChgInfo_descriptor_ = file->message_type(15);
  static const int VipChgInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipChgInfo, viptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipChgInfo, chgtime_),
  };
  VipChgInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VipChgInfo_descriptor_,
      VipChgInfo::default_instance_,
      VipChgInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipChgInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipChgInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VipChgInfo));
  PlayerUnit_descriptor_ = file->message_type(16);
  static const int PlayerUnit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUnit, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUnit, level_),
  };
  PlayerUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerUnit_descriptor_,
      PlayerUnit::default_instance_,
      PlayerUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerUnit));
  PlayerCard_descriptor_ = file->message_type(17);
  static const int PlayerCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCard, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCard, number_),
  };
  PlayerCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerCard_descriptor_,
      PlayerCard::default_instance_,
      PlayerCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerCard));
  PVPBattleReportPlayers_descriptor_ = file->message_type(18);
  static const int PVPBattleReportPlayers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPBattleReportPlayers, roomid_),
  };
  PVPBattleReportPlayers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVPBattleReportPlayers_descriptor_,
      PVPBattleReportPlayers::default_instance_,
      PVPBattleReportPlayers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPBattleReportPlayers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPBattleReportPlayers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVPBattleReportPlayers));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSVector3_descriptor_, &CSVector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseInfoType_descriptor_, &BaseInfoType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VersionResourceType_descriptor_, &VersionResourceType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValue_descriptor_, &KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_descriptor_, &Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemList_descriptor_, &ItemList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestInfo_descriptor_, &QuestInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AchievementData_descriptor_, &AchievementData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TechInfo_descriptor_, &TechInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoldersInfo_descriptor_, &SoldersInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillsInfo_descriptor_, &SkillsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVPTeamInfo_descriptor_, &PVPTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomEndInfoType_descriptor_, &RoomEndInfoType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSNotifyClientReply_descriptor_, &CSNotifyClientReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerVipList_descriptor_, &PlayerVipList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VipChgInfo_descriptor_, &VipChgInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerUnit_descriptor_, &PlayerUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerCard_descriptor_, &PlayerCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVPBattleReportPlayers_descriptor_, &PVPBattleReportPlayers::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cs_5fcommon_2eproto() {
  delete CSVector3::default_instance_;
  delete CSVector3_reflection_;
  delete BaseInfoType::default_instance_;
  delete BaseInfoType_reflection_;
  delete VersionResourceType::default_instance_;
  delete VersionResourceType_reflection_;
  delete KeyValue::default_instance_;
  delete KeyValue_reflection_;
  delete Item::default_instance_;
  delete Item_reflection_;
  delete ItemList::default_instance_;
  delete ItemList_reflection_;
  delete QuestInfo::default_instance_;
  delete QuestInfo_reflection_;
  delete AchievementData::default_instance_;
  delete AchievementData_reflection_;
  delete TechInfo::default_instance_;
  delete TechInfo_reflection_;
  delete SoldersInfo::default_instance_;
  delete SoldersInfo_reflection_;
  delete SkillsInfo::default_instance_;
  delete SkillsInfo_reflection_;
  delete PVPTeamInfo::default_instance_;
  delete PVPTeamInfo_reflection_;
  delete RoomEndInfoType::default_instance_;
  delete RoomEndInfoType_reflection_;
  delete CSNotifyClientReply::default_instance_;
  delete CSNotifyClientReply_reflection_;
  delete PlayerVipList::default_instance_;
  delete PlayerVipList_reflection_;
  delete VipChgInfo::default_instance_;
  delete VipChgInfo_reflection_;
  delete PlayerUnit::default_instance_;
  delete PlayerUnit_reflection_;
  delete PlayerCard::default_instance_;
  delete PlayerCard_reflection_;
  delete PVPBattleReportPlayers::default_instance_;
  delete PVPBattleReportPlayers_reflection_;
}

void protobuf_AddDesc_cs_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017cs_common.proto\022\002cs\",\n\tCSVector3\022\t\n\001x\030"
    "\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\"\261\003\n\014BaseInfo"
    "Type\022\020\n\010PlayerID\030\001 \001(\005\022\014\n\004Name\030\002 \001(\t\022\021\n\t"
    "PlayerElo\030\003 \001(\005\022\023\n\013PlayerColor\030\004 \001(\005\022\023\n\013"
    "PlayerMoney\030\005 \001(\005\022\023\n\013PlayerStone\030\006 \001(\005\022\023"
    "\n\013PlayerSteel\030\007 \001(\005\022\032\n\022PlayerHardCurrenc"
    "y\030\010 \001(\005\022\020\n\010PlayerXp\030\t \001(\005\022\023\n\013PlayerLevel"
    "\030\n \001(\005\022\036\n\026UnlockedTerritoryMaxID\030\013 \001(\005\022\023"
    "\n\013RankSection\030\014 \001(\005\022\026\n\016RankSubsection\030\r "
    "\001(\005\022\022\n\nAllianceId\030\016 \001(\005\022\026\n\016AllianceSigne"
    "t\030\017 \001(\005\022\027\n\017AllianceMemType\030\020 \001(\005\022\023\n\013Play"
    "erPower\030\021 \001(\002\022\r\n\005VipID\030\022 \001(\005\022\017\n\007VipTime\030"
    "\023 \001(\005\022\020\n\010PlayerHo\030\024 \001(\005\"i\n\023VersionResour"
    "ceType\022\023\n\013GameVersion\030\001 \002(\t\022\016\n\006OsType\030\002 "
    "\002(\t\022\024\n\014ChanMerchant\030\003 \002(\t\022\027\n\017ResourceVer"
    "sion\030\004 \001(\t\"&\n\010KeyValue\022\013\n\003key\030\001 \002(\t\022\r\n\005v"
    "alue\030\002 \002(\t\"2\n\004Item\022\014\n\004Type\030\001 \002(\005\022\017\n\007SubT"
    "ype\030\002 \002(\005\022\013\n\003num\030\003 \002(\005\"\"\n\010ItemList\022\026\n\004it"
    "em\030\001 \003(\0132\010.cs.Item\"n\n\tQuestInfo\022\017\n\007Quest"
    "Id\030\001 \002(\t\022\r\n\005State\030\002 \002(\005\022\r\n\005Value\030\003 \002(\005\022\023"
    "\n\013OffsetColor\030\004 \002(\005\022\016\n\006TaskLv\030\005 \002(\005\022\r\n\005I"
    "sVip\030\006 \002(\005\"K\n\017AchievementData\022\n\n\002Id\030\001 \002("
    "\t\022\r\n\005Index\030\002 \002(\005\022\016\n\006Status\030\003 \002(\005\022\r\n\005Stor"
    "e\030\004 \002(\005\".\n\010TechInfo\022\017\n\007TechKey\030\001 \002(\005\022\021\n\t"
    "TechLevel\030\002 \002(\005\"4\n\013SoldersInfo\022\020\n\010Solder"
    "Id\030\001 \002(\005\022\023\n\013SolderLevel\030\002 \002(\005\"\035\n\nSkillsI"
    "nfo\022\017\n\007SkillId\030\001 \002(\005\"B\n\013PVPTeamInfo\022\020\n\010P"
    "layerID\030\001 \002(\005\022\016\n\006TeamID\030\002 \002(\005\022\021\n\tRobotTy"
    "pe\030\003 \002(\005\"F\n\017RoomEndInfoType\022\020\n\010PlayerID\030"
    "\001 \003(\005\022\022\n\nPlayerStat\030\002 \003(\005\022\r\n\005Power\030\003 \003(\005"
    "\"\025\n\023CSNotifyClientReply\"V\n\rPlayerVipList"
    "\022\024\n\014SuperVipTime\030\001 \001(\005\022\017\n\007VipTime\030\002 \001(\005\022"
    "\036\n\006VipChg\030\003 \003(\0132\016.cs.VipChgInfo\".\n\nVipCh"
    "gInfo\022\017\n\007VipType\030\001 \001(\005\022\017\n\007ChgTime\030\002 \001(\005\""
    ")\n\nPlayerUnit\022\014\n\004Type\030\001 \001(\005\022\r\n\005Level\030\002 \001"
    "(\005\"(\n\nPlayerCard\022\n\n\002Id\030\001 \001(\005\022\016\n\006Number\030\002"
    " \001(\005\"(\n\026PVPBattleReportPlayers\022\016\n\006RoomID"
    "\030\001 \001(\004", 1486);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs_common.proto", &protobuf_RegisterTypes);
  CSVector3::default_instance_ = new CSVector3();
  BaseInfoType::default_instance_ = new BaseInfoType();
  VersionResourceType::default_instance_ = new VersionResourceType();
  KeyValue::default_instance_ = new KeyValue();
  Item::default_instance_ = new Item();
  ItemList::default_instance_ = new ItemList();
  QuestInfo::default_instance_ = new QuestInfo();
  AchievementData::default_instance_ = new AchievementData();
  TechInfo::default_instance_ = new TechInfo();
  SoldersInfo::default_instance_ = new SoldersInfo();
  SkillsInfo::default_instance_ = new SkillsInfo();
  PVPTeamInfo::default_instance_ = new PVPTeamInfo();
  RoomEndInfoType::default_instance_ = new RoomEndInfoType();
  CSNotifyClientReply::default_instance_ = new CSNotifyClientReply();
  PlayerVipList::default_instance_ = new PlayerVipList();
  VipChgInfo::default_instance_ = new VipChgInfo();
  PlayerUnit::default_instance_ = new PlayerUnit();
  PlayerCard::default_instance_ = new PlayerCard();
  PVPBattleReportPlayers::default_instance_ = new PVPBattleReportPlayers();
  CSVector3::default_instance_->InitAsDefaultInstance();
  BaseInfoType::default_instance_->InitAsDefaultInstance();
  VersionResourceType::default_instance_->InitAsDefaultInstance();
  KeyValue::default_instance_->InitAsDefaultInstance();
  Item::default_instance_->InitAsDefaultInstance();
  ItemList::default_instance_->InitAsDefaultInstance();
  QuestInfo::default_instance_->InitAsDefaultInstance();
  AchievementData::default_instance_->InitAsDefaultInstance();
  TechInfo::default_instance_->InitAsDefaultInstance();
  SoldersInfo::default_instance_->InitAsDefaultInstance();
  SkillsInfo::default_instance_->InitAsDefaultInstance();
  PVPTeamInfo::default_instance_->InitAsDefaultInstance();
  RoomEndInfoType::default_instance_->InitAsDefaultInstance();
  CSNotifyClientReply::default_instance_->InitAsDefaultInstance();
  PlayerVipList::default_instance_->InitAsDefaultInstance();
  VipChgInfo::default_instance_->InitAsDefaultInstance();
  PlayerUnit::default_instance_->InitAsDefaultInstance();
  PlayerCard::default_instance_->InitAsDefaultInstance();
  PVPBattleReportPlayers::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_5fcommon_2eproto {
  StaticDescriptorInitializer_cs_5fcommon_2eproto() {
    protobuf_AddDesc_cs_5fcommon_2eproto();
  }
} static_descriptor_initializer_cs_5fcommon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CSVector3::kXFieldNumber;
const int CSVector3::kYFieldNumber;
const int CSVector3::kZFieldNumber;
#endif  // !_MSC_VER

CSVector3::CSVector3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSVector3::InitAsDefaultInstance() {
}

CSVector3::CSVector3(const CSVector3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSVector3::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSVector3::~CSVector3() {
  SharedDtor();
}

void CSVector3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSVector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSVector3_descriptor_;
}

const CSVector3& CSVector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcommon_2eproto();
  return *default_instance_;
}

CSVector3* CSVector3::default_instance_ = NULL;

CSVector3* CSVector3::New() const {
  return new CSVector3;
}

void CSVector3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSVector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSVector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSVector3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSVector3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVector3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSVector3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSVector3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSVector3::MergeFrom(const CSVector3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSVector3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVector3::CopyFrom(const CSVector3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVector3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSVector3::Swap(CSVector3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSVector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSVector3_descriptor_;
  metadata.reflection = CSVector3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaseInfoType::kPlayerIDFieldNumber;
const int BaseInfoType::kNameFieldNumber;
const int BaseInfoType::kPlayerEloFieldNumber;
const int BaseInfoType::kPlayerColorFieldNumber;
const int BaseInfoType::kPlayerMoneyFieldNumber;
const int BaseInfoType::kPlayerStoneFieldNumber;
const int BaseInfoType::kPlayerSteelFieldNumber;
const int BaseInfoType::kPlayerHardCurrencyFieldNumber;
const int BaseInfoType::kPlayerXpFieldNumber;
const int BaseInfoType::kPlayerLevelFieldNumber;
const int BaseInfoType::kUnlockedTerritoryMaxIDFieldNumber;
const int BaseInfoType::kRankSectionFieldNumber;
const int BaseInfoType::kRankSubsectionFieldNumber;
const int BaseInfoType::kAllianceIdFieldNumber;
const int BaseInfoType::kAllianceSignetFieldNumber;
const int BaseInfoType::kAllianceMemTypeFieldNumber;
const int BaseInfoType::kPlayerPowerFieldNumber;
const int BaseInfoType::kVipIDFieldNumber;
const int BaseInfoType::kVipTimeFieldNumber;
const int BaseInfoType::kPlayerHoFieldNumber;
#endif  // !_MSC_VER

BaseInfoType::BaseInfoType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaseInfoType::InitAsDefaultInstance() {
}

BaseInfoType::BaseInfoType(const BaseInfoType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaseInfoType::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerelo_ = 0;
  playercolor_ = 0;
  playermoney_ = 0;
  playerstone_ = 0;
  playersteel_ = 0;
  playerhardcurrency_ = 0;
  playerxp_ = 0;
  playerlevel_ = 0;
  unlockedterritorymaxid_ = 0;
  ranksection_ = 0;
  ranksubsection_ = 0;
  allianceid_ = 0;
  alliancesignet_ = 0;
  alliancememtype_ = 0;
  playerpower_ = 0;
  vipid_ = 0;
  viptime_ = 0;
  playerho_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseInfoType::~BaseInfoType() {
  SharedDtor();
}

void BaseInfoType::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BaseInfoType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseInfoType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseInfoType_descriptor_;
}

const BaseInfoType& BaseInfoType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcommon_2eproto();
  return *default_instance_;
}

BaseInfoType* BaseInfoType::default_instance_ = NULL;

BaseInfoType* BaseInfoType::New() const {
  return new BaseInfoType;
}

void BaseInfoType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    playerelo_ = 0;
    playercolor_ = 0;
    playermoney_ = 0;
    playerstone_ = 0;
    playersteel_ = 0;
    playerhardcurrency_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    playerxp_ = 0;
    playerlevel_ = 0;
    unlockedterritorymaxid_ = 0;
    ranksection_ = 0;
    ranksubsection_ = 0;
    allianceid_ = 0;
    alliancesignet_ = 0;
    alliancememtype_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    playerpower_ = 0;
    vipid_ = 0;
    viptime_ = 0;
    playerho_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseInfoType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PlayerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PlayerElo;
        break;
      }

      // optional int32 PlayerElo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerElo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerelo_)));
          set_has_playerelo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_PlayerColor;
        break;
      }

      // optional int32 PlayerColor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playercolor_)));
          set_has_playercolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_PlayerMoney;
        break;
      }

      // optional int32 PlayerMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playermoney_)));
          set_has_playermoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_PlayerStone;
        break;
      }

      // optional int32 PlayerStone = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerStone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerstone_)));
          set_has_playerstone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_PlayerSteel;
        break;
      }

      // optional int32 PlayerSteel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerSteel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playersteel_)));
          set_has_playersteel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_PlayerHardCurrency;
        break;
      }

      // optional int32 PlayerHardCurrency = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerHardCurrency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerhardcurrency_)));
          set_has_playerhardcurrency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_PlayerXp;
        break;
      }

      // optional int32 PlayerXp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerXp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerxp_)));
          set_has_playerxp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_PlayerLevel;
        break;
      }

      // optional int32 PlayerLevel = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerlevel_)));
          set_has_playerlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_UnlockedTerritoryMaxID;
        break;
      }

      // optional int32 UnlockedTerritoryMaxID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UnlockedTerritoryMaxID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlockedterritorymaxid_)));
          set_has_unlockedterritorymaxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_RankSection;
        break;
      }

      // optional int32 RankSection = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RankSection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranksection_)));
          set_has_ranksection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_RankSubsection;
        break;
      }

      // optional int32 RankSubsection = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RankSubsection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranksubsection_)));
          set_has_ranksubsection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_AllianceId;
        break;
      }

      // optional int32 AllianceId = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AllianceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_AllianceSignet;
        break;
      }

      // optional int32 AllianceSignet = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AllianceSignet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alliancesignet_)));
          set_has_alliancesignet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_AllianceMemType;
        break;
      }

      // optional int32 AllianceMemType = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AllianceMemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alliancememtype_)));
          set_has_alliancememtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_PlayerPower;
        break;
      }

      // optional float PlayerPower = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_PlayerPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &playerpower_)));
          set_has_playerpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_VipID;
        break;
      }

      // optional int32 VipID = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VipID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipid_)));
          set_has_vipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_VipTime;
        break;
      }

      // optional int32 VipTime = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VipTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viptime_)));
          set_has_viptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_PlayerHo;
        break;
      }

      // optional int32 PlayerHo = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerHo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerho_)));
          set_has_playerho();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaseInfoType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 PlayerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 PlayerElo = 3;
  if (has_playerelo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playerelo(), output);
  }

  // optional int32 PlayerColor = 4;
  if (has_playercolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->playercolor(), output);
  }

  // optional int32 PlayerMoney = 5;
  if (has_playermoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->playermoney(), output);
  }

  // optional int32 PlayerStone = 6;
  if (has_playerstone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->playerstone(), output);
  }

  // optional int32 PlayerSteel = 7;
  if (has_playersteel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->playersteel(), output);
  }

  // optional int32 PlayerHardCurrency = 8;
  if (has_playerhardcurrency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->playerhardcurrency(), output);
  }

  // optional int32 PlayerXp = 9;
  if (has_playerxp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->playerxp(), output);
  }

  // optional int32 PlayerLevel = 10;
  if (has_playerlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->playerlevel(), output);
  }

  // optional int32 UnlockedTerritoryMaxID = 11;
  if (has_unlockedterritorymaxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->unlockedterritorymaxid(), output);
  }

  // optional int32 RankSection = 12;
  if (has_ranksection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->ranksection(), output);
  }

  // optional int32 RankSubsection = 13;
  if (has_ranksubsection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->ranksubsection(), output);
  }

  // optional int32 AllianceId = 14;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->allianceid(), output);
  }

  // optional int32 AllianceSignet = 15;
  if (has_alliancesignet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->alliancesignet(), output);
  }

  // optional int32 AllianceMemType = 16;
  if (has_alliancememtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->alliancememtype(), output);
  }

  // optional float PlayerPower = 17;
  if (has_playerpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->playerpower(), output);
  }

  // optional int32 VipID = 18;
  if (has_vipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->vipid(), output);
  }

  // optional int32 VipTime = 19;
  if (has_viptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->viptime(), output);
  }

  // optional int32 PlayerHo = 20;
  if (has_playerho()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->playerho(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaseInfoType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 PlayerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 PlayerElo = 3;
  if (has_playerelo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playerelo(), target);
  }

  // optional int32 PlayerColor = 4;
  if (has_playercolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->playercolor(), target);
  }

  // optional int32 PlayerMoney = 5;
  if (has_playermoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->playermoney(), target);
  }

  // optional int32 PlayerStone = 6;
  if (has_playerstone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->playerstone(), target);
  }

  // optional int32 PlayerSteel = 7;
  if (has_playersteel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->playersteel(), target);
  }

  // optional int32 PlayerHardCurrency = 8;
  if (has_playerhardcurrency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->playerhardcurrency(), target);
  }

  // optional int32 PlayerXp = 9;
  if (has_playerxp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->playerxp(), target);
  }

  // optional int32 PlayerLevel = 10;
  if (has_playerlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->playerlevel(), target);
  }

  // optional int32 UnlockedTerritoryMaxID = 11;
  if (has_unlockedterritorymaxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->unlockedterritorymaxid(), target);
  }

  // optional int32 RankSection = 12;
  if (has_ranksection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->ranksection(), target);
  }

  // optional int32 RankSubsection = 13;
  if (has_ranksubsection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->ranksubsection(), target);
  }

  // optional int32 AllianceId = 14;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->allianceid(), target);
  }

  // optional int32 AllianceSignet = 15;
  if (has_alliancesignet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->alliancesignet(), target);
  }

  // optional int32 AllianceMemType = 16;
  if (has_alliancememtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->alliancememtype(), target);
  }

  // optional float PlayerPower = 17;
  if (has_playerpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->playerpower(), target);
  }

  // optional int32 VipID = 18;
  if (has_vipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->vipid(), target);
  }

  // optional int32 VipTime = 19;
  if (has_viptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->viptime(), target);
  }

  // optional int32 PlayerHo = 20;
  if (has_playerho()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->playerho(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaseInfoType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PlayerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 PlayerElo = 3;
    if (has_playerelo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerelo());
    }

    // optional int32 PlayerColor = 4;
    if (has_playercolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playercolor());
    }

    // optional int32 PlayerMoney = 5;
    if (has_playermoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playermoney());
    }

    // optional int32 PlayerStone = 6;
    if (has_playerstone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerstone());
    }

    // optional int32 PlayerSteel = 7;
    if (has_playersteel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playersteel());
    }

    // optional int32 PlayerHardCurrency = 8;
    if (has_playerhardcurrency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerhardcurrency());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 PlayerXp = 9;
    if (has_playerxp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerxp());
    }

    // optional int32 PlayerLevel = 10;
    if (has_playerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerlevel());
    }

    // optional int32 UnlockedTerritoryMaxID = 11;
    if (has_unlockedterritorymaxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlockedterritorymaxid());
    }

    // optional int32 RankSection = 12;
    if (has_ranksection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranksection());
    }

    // optional int32 RankSubsection = 13;
    if (has_ranksubsection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranksubsection());
    }

    // optional int32 AllianceId = 14;
    if (has_allianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allianceid());
    }

    // optional int32 AllianceSignet = 15;
    if (has_alliancesignet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alliancesignet());
    }

    // optional int32 AllianceMemType = 16;
    if (has_alliancememtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alliancememtype());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float PlayerPower = 17;
    if (has_playerpower()) {
      total_size += 2 + 4;
    }

    // optional int32 VipID = 18;
    if (has_vipid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipid());
    }

    // optional int32 VipTime = 19;
    if (has_viptime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viptime());
    }

    // optional int32 PlayerHo = 20;
    if (has_playerho()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerho());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseInfoType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseInfoType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseInfoType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseInfoType::MergeFrom(const BaseInfoType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_playerelo()) {
      set_playerelo(from.playerelo());
    }
    if (from.has_playercolor()) {
      set_playercolor(from.playercolor());
    }
    if (from.has_playermoney()) {
      set_playermoney(from.playermoney());
    }
    if (from.has_playerstone()) {
      set_playerstone(from.playerstone());
    }
    if (from.has_playersteel()) {
      set_playersteel(from.playersteel());
    }
    if (from.has_playerhardcurrency()) {
      set_playerhardcurrency(from.playerhardcurrency());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_playerxp()) {
      set_playerxp(from.playerxp());
    }
    if (from.has_playerlevel()) {
      set_playerlevel(from.playerlevel());
    }
    if (from.has_unlockedterritorymaxid()) {
      set_unlockedterritorymaxid(from.unlockedterritorymaxid());
    }
    if (from.has_ranksection()) {
      set_ranksection(from.ranksection());
    }
    if (from.has_ranksubsection()) {
      set_ranksubsection(from.ranksubsection());
    }
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
    if (from.has_alliancesignet()) {
      set_alliancesignet(from.alliancesignet());
    }
    if (from.has_alliancememtype()) {
      set_alliancememtype(from.alliancememtype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_playerpower()) {
      set_playerpower(from.playerpower());
    }
    if (from.has_vipid()) {
      set_vipid(from.vipid());
    }
    if (from.has_viptime()) {
      set_viptime(from.viptime());
    }
    if (from.has_playerho()) {
      set_playerho(from.playerho());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseInfoType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseInfoType::CopyFrom(const BaseInfoType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseInfoType::IsInitialized() const {

  return true;
}

void BaseInfoType::Swap(BaseInfoType* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(playerelo_, other->playerelo_);
    std::swap(playercolor_, other->playercolor_);
    std::swap(playermoney_, other->playermoney_);
    std::swap(playerstone_, other->playerstone_);
    std::swap(playersteel_, other->playersteel_);
    std::swap(playerhardcurrency_, other->playerhardcurrency_);
    std::swap(playerxp_, other->playerxp_);
    std::swap(playerlevel_, other->playerlevel_);
    std::swap(unlockedterritorymaxid_, other->unlockedterritorymaxid_);
    std::swap(ranksection_, other->ranksection_);
    std::swap(ranksubsection_, other->ranksubsection_);
    std::swap(allianceid_, other->allianceid_);
    std::swap(alliancesignet_, other->alliancesignet_);
    std::swap(alliancememtype_, other->alliancememtype_);
    std::swap(playerpower_, other->playerpower_);
    std::swap(vipid_, other->vipid_);
    std::swap(viptime_, other->viptime_);
    std::swap(playerho_, other->playerho_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseInfoType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseInfoType_descriptor_;
  metadata.reflection = BaseInfoType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VersionResourceType::kGameVersionFieldNumber;
const int VersionResourceType::kOsTypeFieldNumber;
const int VersionResourceType::kChanMerchantFieldNumber;
const int VersionResourceType::kResourceVersionFieldNumber;
#endif  // !_MSC_VER

VersionResourceType::VersionResourceType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VersionResourceType::InitAsDefaultInstance() {
}

VersionResourceType::VersionResourceType(const VersionResourceType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VersionResourceType::SharedCtor() {
  _cached_size_ = 0;
  gameversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ostype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chanmerchant_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resourceversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VersionResourceType::~VersionResourceType() {
  SharedDtor();
}

void VersionResourceType::SharedDtor() {
  if (gameversion_ != &::google::protobuf::internal::kEmptyString) {
    delete gameversion_;
  }
  if (ostype_ != &::google::protobuf::internal::kEmptyString) {
    delete ostype_;
  }
  if (chanmerchant_ != &::google::protobuf::internal::kEmptyString) {
    delete chanmerchant_;
  }
  if (resourceversion_ != &::google::protobuf::internal::kEmptyString) {
    delete resourceversion_;
  }
  if (this != default_instance_) {
  }
}

void VersionResourceType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VersionResourceType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VersionResourceType_descriptor_;
}

const VersionResourceType& VersionResourceType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcommon_2eproto();
  return *default_instance_;
}

VersionResourceType* VersionResourceType::default_instance_ = NULL;

VersionResourceType* VersionResourceType::New() const {
  return new VersionResourceType;
}

void VersionResourceType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gameversion()) {
      if (gameversion_ != &::google::protobuf::internal::kEmptyString) {
        gameversion_->clear();
      }
    }
    if (has_ostype()) {
      if (ostype_ != &::google::protobuf::internal::kEmptyString) {
        ostype_->clear();
      }
    }
    if (has_chanmerchant()) {
      if (chanmerchant_ != &::google::protobuf::internal::kEmptyString) {
        chanmerchant_->clear();
      }
    }
    if (has_resourceversion()) {
      if (resourceversion_ != &::google::protobuf::internal::kEmptyString) {
        resourceversion_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VersionResourceType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string GameVersion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameversion().data(), this->gameversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_OsType;
        break;
      }

      // required string OsType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OsType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ostype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ostype().data(), this->ostype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ChanMerchant;
        break;
      }

      // required string ChanMerchant = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChanMerchant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chanmerchant()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chanmerchant().data(), this->chanmerchant().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ResourceVersion;
        break;
      }

      // optional string ResourceVersion = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ResourceVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourceversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resourceversion().data(), this->resourceversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VersionResourceType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string GameVersion = 1;
  if (has_gameversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameversion().data(), this->gameversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gameversion(), output);
  }

  // required string OsType = 2;
  if (has_ostype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ostype().data(), this->ostype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ostype(), output);
  }

  // required string ChanMerchant = 3;
  if (has_chanmerchant()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chanmerchant().data(), this->chanmerchant().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->chanmerchant(), output);
  }

  // optional string ResourceVersion = 4;
  if (has_resourceversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resourceversion().data(), this->resourceversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->resourceversion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VersionResourceType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string GameVersion = 1;
  if (has_gameversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameversion().data(), this->gameversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gameversion(), target);
  }

  // required string OsType = 2;
  if (has_ostype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ostype().data(), this->ostype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ostype(), target);
  }

  // required string ChanMerchant = 3;
  if (has_chanmerchant()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chanmerchant().data(), this->chanmerchant().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->chanmerchant(), target);
  }

  // optional string ResourceVersion = 4;
  if (has_resourceversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resourceversion().data(), this->resourceversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->resourceversion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VersionResourceType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string GameVersion = 1;
    if (has_gameversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameversion());
    }

    // required string OsType = 2;
    if (has_ostype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ostype());
    }

    // required string ChanMerchant = 3;
    if (has_chanmerchant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chanmerchant());
    }

    // optional string ResourceVersion = 4;
    if (has_resourceversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resourceversion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VersionResourceType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VersionResourceType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VersionResourceType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VersionResourceType::MergeFrom(const VersionResourceType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameversion()) {
      set_gameversion(from.gameversion());
    }
    if (from.has_ostype()) {
      set_ostype(from.ostype());
    }
    if (from.has_chanmerchant()) {
      set_chanmerchant(from.chanmerchant());
    }
    if (from.has_resourceversion()) {
      set_resourceversion(from.resourceversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VersionResourceType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionResourceType::CopyFrom(const VersionResourceType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionResourceType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void VersionResourceType::Swap(VersionResourceType* other) {
  if (other != this) {
    std::swap(gameversion_, other->gameversion_);
    std::swap(ostype_, other->ostype_);
    std::swap(chanmerchant_, other->chanmerchant_);
    std::swap(resourceversion_, other->resourceversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VersionResourceType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VersionResourceType_descriptor_;
  metadata.reflection = VersionResourceType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

KeyValue::KeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeyValue::InitAsDefaultInstance() {
}

KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValue::~KeyValue() {
  SharedDtor();
}

void KeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValue_descriptor_;
}

const KeyValue& KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcommon_2eproto();
  return *default_instance_;
}

KeyValue* KeyValue::default_instance_ = NULL;

KeyValue* KeyValue::New() const {
  return new KeyValue;
}

void KeyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValue_descriptor_;
  metadata.reflection = KeyValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item::kTypeFieldNumber;
const int Item::kSubTypeFieldNumber;
const int Item::kNumFieldNumber;
#endif  // !_MSC_VER

Item::Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item::InitAsDefaultInstance() {
}

Item::Item(const Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  subtype_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item::~Item() {
  SharedDtor();
}

void Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_descriptor_;
}

const Item& Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcommon_2eproto();
  return *default_instance_;
}

Item* Item::default_instance_ = NULL;

Item* Item::New() const {
  return new Item;
}

void Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    subtype_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SubType;
        break;
      }

      // required int32 SubType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SubType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subtype_)));
          set_has_subtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 SubType = 2;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->subtype(), output);
  }

  // required int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 SubType = 2;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->subtype(), target);
  }

  // required int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 SubType = 2;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subtype());
    }

    // required int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Item::Swap(Item* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(subtype_, other->subtype_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_descriptor_;
  metadata.reflection = Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemList::kItemFieldNumber;
#endif  // !_MSC_VER

ItemList::ItemList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemList::InitAsDefaultInstance() {
}

ItemList::ItemList(const ItemList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemList::~ItemList() {
  SharedDtor();
}

void ItemList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemList_descriptor_;
}

const ItemList& ItemList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcommon_2eproto();
  return *default_instance_;
}

ItemList* ItemList::default_instance_ = NULL;

ItemList* ItemList::New() const {
  return new ItemList;
}

void ItemList::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cs.Item item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cs.Item item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cs.Item item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemList::ByteSize() const {
  int total_size = 0;

  // repeated .cs.Item item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemList::MergeFrom(const ItemList& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemList::CopyFrom(const ItemList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemList::IsInitialized() const {

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void ItemList::Swap(ItemList* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemList_descriptor_;
  metadata.reflection = ItemList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestInfo::kQuestIdFieldNumber;
const int QuestInfo::kStateFieldNumber;
const int QuestInfo::kValueFieldNumber;
const int QuestInfo::kOffsetColorFieldNumber;
const int QuestInfo::kTaskLvFieldNumber;
const int QuestInfo::kIsVipFieldNumber;
#endif  // !_MSC_VER

QuestInfo::QuestInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestInfo::InitAsDefaultInstance() {
}

QuestInfo::QuestInfo(const QuestInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestInfo::SharedCtor() {
  _cached_size_ = 0;
  questid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  value_ = 0;
  offsetcolor_ = 0;
  tasklv_ = 0;
  isvip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestInfo::~QuestInfo() {
  SharedDtor();
}

void QuestInfo::SharedDtor() {
  if (questid_ != &::google::protobuf::internal::kEmptyString) {
    delete questid_;
  }
  if (this != default_instance_) {
  }
}

void QuestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestInfo_descriptor_;
}

const QuestInfo& QuestInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcommon_2eproto();
  return *default_instance_;
}

QuestInfo* QuestInfo::default_instance_ = NULL;

QuestInfo* QuestInfo::New() const {
  return new QuestInfo;
}

void QuestInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_questid()) {
      if (questid_ != &::google::protobuf::internal::kEmptyString) {
        questid_->clear();
      }
    }
    state_ = 0;
    value_ = 0;
    offsetcolor_ = 0;
    tasklv_ = 0;
    isvip_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string QuestId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_questid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->questid().data(), this->questid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_State;
        break;
      }

      // required int32 State = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Value;
        break;
      }

      // required int32 Value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OffsetColor;
        break;
      }

      // required int32 OffsetColor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OffsetColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offsetcolor_)));
          set_has_offsetcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TaskLv;
        break;
      }

      // required int32 TaskLv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TaskLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tasklv_)));
          set_has_tasklv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IsVip;
        break;
      }

      // required int32 IsVip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isvip_)));
          set_has_isvip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string QuestId = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->questid().data(), this->questid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->questid(), output);
  }

  // required int32 State = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // required int32 Value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }

  // required int32 OffsetColor = 4;
  if (has_offsetcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->offsetcolor(), output);
  }

  // required int32 TaskLv = 5;
  if (has_tasklv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tasklv(), output);
  }

  // required int32 IsVip = 6;
  if (has_isvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->isvip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string QuestId = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->questid().data(), this->questid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->questid(), target);
  }

  // required int32 State = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // required int32 Value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }

  // required int32 OffsetColor = 4;
  if (has_offsetcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->offsetcolor(), target);
  }

  // required int32 TaskLv = 5;
  if (has_tasklv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tasklv(), target);
  }

  // required int32 IsVip = 6;
  if (has_isvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->isvip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string QuestId = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->questid());
    }

    // required int32 State = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int32 Value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // required int32 OffsetColor = 4;
    if (has_offsetcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offsetcolor());
    }

    // required int32 TaskLv = 5;
    if (has_tasklv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tasklv());
    }

    // required int32 IsVip = 6;
    if (has_isvip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isvip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestInfo::MergeFrom(const QuestInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_offsetcolor()) {
      set_offsetcolor(from.offsetcolor());
    }
    if (from.has_tasklv()) {
      set_tasklv(from.tasklv());
    }
    if (from.has_isvip()) {
      set_isvip(from.isvip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestInfo::CopyFrom(const QuestInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void QuestInfo::Swap(QuestInfo* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(state_, other->state_);
    std::swap(value_, other->value_);
    std::swap(offsetcolor_, other->offsetcolor_);
    std::swap(tasklv_, other->tasklv_);
    std::swap(isvip_, other->isvip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestInfo_descriptor_;
  metadata.reflection = QuestInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AchievementData::kIdFieldNumber;
const int AchievementData::kIndexFieldNumber;
const int AchievementData::kStatusFieldNumber;
const int AchievementData::kStoreFieldNumber;
#endif  // !_MSC_VER

AchievementData::AchievementData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AchievementData::InitAsDefaultInstance() {
}

AchievementData::AchievementData(const AchievementData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AchievementData::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  index_ = 0;
  status_ = 0;
  store_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchievementData::~AchievementData() {
  SharedDtor();
}

void AchievementData::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void AchievementData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AchievementData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AchievementData_descriptor_;
}

const AchievementData& AchievementData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcommon_2eproto();
  return *default_instance_;
}

AchievementData* AchievementData::default_instance_ = NULL;

AchievementData* AchievementData::New() const {
  return new AchievementData;
}

void AchievementData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    index_ = 0;
    status_ = 0;
    store_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AchievementData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Index;
        break;
      }

      // required int32 Index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Status;
        break;
      }

      // required int32 Status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Store;
        break;
      }

      // required int32 Store = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Store:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_)));
          set_has_store();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AchievementData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required int32 Index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // required int32 Status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  // required int32 Store = 4;
  if (has_store()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->store(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AchievementData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 Index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // required int32 Status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  // required int32 Store = 4;
  if (has_store()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->store(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AchievementData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 Index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 Status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int32 Store = 4;
    if (has_store()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchievementData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AchievementData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AchievementData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AchievementData::MergeFrom(const AchievementData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_store()) {
      set_store(from.store());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AchievementData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AchievementData::CopyFrom(const AchievementData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchievementData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AchievementData::Swap(AchievementData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(index_, other->index_);
    std::swap(status_, other->status_);
    std::swap(store_, other->store_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AchievementData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AchievementData_descriptor_;
  metadata.reflection = AchievementData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TechInfo::kTechKeyFieldNumber;
const int TechInfo::kTechLevelFieldNumber;
#endif  // !_MSC_VER

TechInfo::TechInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TechInfo::InitAsDefaultInstance() {
}

TechInfo::TechInfo(const TechInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TechInfo::SharedCtor() {
  _cached_size_ = 0;
  techkey_ = 0;
  techlevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TechInfo::~TechInfo() {
  SharedDtor();
}

void TechInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TechInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TechInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TechInfo_descriptor_;
}

const TechInfo& TechInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcommon_2eproto();
  return *default_instance_;
}

TechInfo* TechInfo::default_instance_ = NULL;

TechInfo* TechInfo::New() const {
  return new TechInfo;
}

void TechInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    techkey_ = 0;
    techlevel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TechInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 TechKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &techkey_)));
          set_has_techkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TechLevel;
        break;
      }

      // required int32 TechLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TechLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &techlevel_)));
          set_has_techlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TechInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 TechKey = 1;
  if (has_techkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->techkey(), output);
  }

  // required int32 TechLevel = 2;
  if (has_techlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->techlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TechInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 TechKey = 1;
  if (has_techkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->techkey(), target);
  }

  // required int32 TechLevel = 2;
  if (has_techlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->techlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TechInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 TechKey = 1;
    if (has_techkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->techkey());
    }

    // required int32 TechLevel = 2;
    if (has_techlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->techlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TechInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TechInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TechInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TechInfo::MergeFrom(const TechInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_techkey()) {
      set_techkey(from.techkey());
    }
    if (from.has_techlevel()) {
      set_techlevel(from.techlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TechInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TechInfo::CopyFrom(const TechInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TechInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TechInfo::Swap(TechInfo* other) {
  if (other != this) {
    std::swap(techkey_, other->techkey_);
    std::swap(techlevel_, other->techlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TechInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TechInfo_descriptor_;
  metadata.reflection = TechInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoldersInfo::kSolderIdFieldNumber;
const int SoldersInfo::kSolderLevelFieldNumber;
#endif  // !_MSC_VER

SoldersInfo::SoldersInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SoldersInfo::InitAsDefaultInstance() {
}

SoldersInfo::SoldersInfo(const SoldersInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SoldersInfo::SharedCtor() {
  _cached_size_ = 0;
  solderid_ = 0;
  solderlevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoldersInfo::~SoldersInfo() {
  SharedDtor();
}

void SoldersInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoldersInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoldersInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoldersInfo_descriptor_;
}

const SoldersInfo& SoldersInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcommon_2eproto();
  return *default_instance_;
}

SoldersInfo* SoldersInfo::default_instance_ = NULL;

SoldersInfo* SoldersInfo::New() const {
  return new SoldersInfo;
}

void SoldersInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    solderid_ = 0;
    solderlevel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoldersInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 SolderId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &solderid_)));
          set_has_solderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SolderLevel;
        break;
      }

      // required int32 SolderLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SolderLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &solderlevel_)));
          set_has_solderlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SoldersInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 SolderId = 1;
  if (has_solderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->solderid(), output);
  }

  // required int32 SolderLevel = 2;
  if (has_solderlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->solderlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SoldersInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 SolderId = 1;
  if (has_solderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->solderid(), target);
  }

  // required int32 SolderLevel = 2;
  if (has_solderlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->solderlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SoldersInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 SolderId = 1;
    if (has_solderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->solderid());
    }

    // required int32 SolderLevel = 2;
    if (has_solderlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->solderlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoldersInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoldersInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoldersInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoldersInfo::MergeFrom(const SoldersInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_solderid()) {
      set_solderid(from.solderid());
    }
    if (from.has_solderlevel()) {
      set_solderlevel(from.solderlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoldersInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoldersInfo::CopyFrom(const SoldersInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoldersInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SoldersInfo::Swap(SoldersInfo* other) {
  if (other != this) {
    std::swap(solderid_, other->solderid_);
    std::swap(solderlevel_, other->solderlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoldersInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoldersInfo_descriptor_;
  metadata.reflection = SoldersInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillsInfo::kSkillIdFieldNumber;
#endif  // !_MSC_VER

SkillsInfo::SkillsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillsInfo::InitAsDefaultInstance() {
}

SkillsInfo::SkillsInfo(const SkillsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillsInfo::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillsInfo::~SkillsInfo() {
  SharedDtor();
}

void SkillsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillsInfo_descriptor_;
}

const SkillsInfo& SkillsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcommon_2eproto();
  return *default_instance_;
}

SkillsInfo* SkillsInfo::default_instance_ = NULL;

SkillsInfo* SkillsInfo::New() const {
  return new SkillsInfo;
}

void SkillsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 SkillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 SkillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 SkillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 SkillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillsInfo::MergeFrom(const SkillsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillsInfo::CopyFrom(const SkillsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillsInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkillsInfo::Swap(SkillsInfo* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillsInfo_descriptor_;
  metadata.reflection = SkillsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVPTeamInfo::kPlayerIDFieldNumber;
const int PVPTeamInfo::kTeamIDFieldNumber;
const int PVPTeamInfo::kRobotTypeFieldNumber;
#endif  // !_MSC_VER

PVPTeamInfo::PVPTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVPTeamInfo::InitAsDefaultInstance() {
}

PVPTeamInfo::PVPTeamInfo(const PVPTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVPTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  teamid_ = 0;
  robottype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVPTeamInfo::~PVPTeamInfo() {
  SharedDtor();
}

void PVPTeamInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVPTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVPTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVPTeamInfo_descriptor_;
}

const PVPTeamInfo& PVPTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcommon_2eproto();
  return *default_instance_;
}

PVPTeamInfo* PVPTeamInfo::default_instance_ = NULL;

PVPTeamInfo* PVPTeamInfo::New() const {
  return new PVPTeamInfo;
}

void PVPTeamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
    teamid_ = 0;
    robottype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVPTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PlayerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TeamID;
        break;
      }

      // required int32 TeamID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_RobotType;
        break;
      }

      // required int32 RobotType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RobotType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robottype_)));
          set_has_robottype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVPTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 PlayerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // required int32 TeamID = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->teamid(), output);
  }

  // required int32 RobotType = 3;
  if (has_robottype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->robottype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVPTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 PlayerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // required int32 TeamID = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->teamid(), target);
  }

  // required int32 RobotType = 3;
  if (has_robottype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->robottype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVPTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 PlayerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // required int32 TeamID = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // required int32 RobotType = 3;
    if (has_robottype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robottype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVPTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVPTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVPTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVPTeamInfo::MergeFrom(const PVPTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_robottype()) {
      set_robottype(from.robottype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVPTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPTeamInfo::CopyFrom(const PVPTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPTeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PVPTeamInfo::Swap(PVPTeamInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(teamid_, other->teamid_);
    std::swap(robottype_, other->robottype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVPTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVPTeamInfo_descriptor_;
  metadata.reflection = PVPTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomEndInfoType::kPlayerIDFieldNumber;
const int RoomEndInfoType::kPlayerStatFieldNumber;
const int RoomEndInfoType::kPowerFieldNumber;
#endif  // !_MSC_VER

RoomEndInfoType::RoomEndInfoType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomEndInfoType::InitAsDefaultInstance() {
}

RoomEndInfoType::RoomEndInfoType(const RoomEndInfoType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomEndInfoType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomEndInfoType::~RoomEndInfoType() {
  SharedDtor();
}

void RoomEndInfoType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomEndInfoType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomEndInfoType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomEndInfoType_descriptor_;
}

const RoomEndInfoType& RoomEndInfoType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcommon_2eproto();
  return *default_instance_;
}

RoomEndInfoType* RoomEndInfoType::default_instance_ = NULL;

RoomEndInfoType* RoomEndInfoType::New() const {
  return new RoomEndInfoType;
}

void RoomEndInfoType::Clear() {
  playerid_.Clear();
  playerstat_.Clear();
  power_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomEndInfoType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 PlayerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_playerid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_playerid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_PlayerID;
        if (input->ExpectTag(16)) goto parse_PlayerStat;
        break;
      }

      // repeated int32 PlayerStat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerStat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_playerstat())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_playerstat())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PlayerStat;
        if (input->ExpectTag(24)) goto parse_Power;
        break;
      }

      // repeated int32 Power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_power())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_power())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Power;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomEndInfoType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 PlayerID = 1;
  for (int i = 0; i < this->playerid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->playerid(i), output);
  }

  // repeated int32 PlayerStat = 2;
  for (int i = 0; i < this->playerstat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->playerstat(i), output);
  }

  // repeated int32 Power = 3;
  for (int i = 0; i < this->power_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->power(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomEndInfoType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 PlayerID = 1;
  for (int i = 0; i < this->playerid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->playerid(i), target);
  }

  // repeated int32 PlayerStat = 2;
  for (int i = 0; i < this->playerstat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->playerstat(i), target);
  }

  // repeated int32 Power = 3;
  for (int i = 0; i < this->power_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->power(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomEndInfoType::ByteSize() const {
  int total_size = 0;

  // repeated int32 PlayerID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->playerid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->playerid(i));
    }
    total_size += 1 * this->playerid_size() + data_size;
  }

  // repeated int32 PlayerStat = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->playerstat_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->playerstat(i));
    }
    total_size += 1 * this->playerstat_size() + data_size;
  }

  // repeated int32 Power = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->power_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->power(i));
    }
    total_size += 1 * this->power_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomEndInfoType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomEndInfoType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomEndInfoType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomEndInfoType::MergeFrom(const RoomEndInfoType& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerid_.MergeFrom(from.playerid_);
  playerstat_.MergeFrom(from.playerstat_);
  power_.MergeFrom(from.power_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomEndInfoType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomEndInfoType::CopyFrom(const RoomEndInfoType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomEndInfoType::IsInitialized() const {

  return true;
}

void RoomEndInfoType::Swap(RoomEndInfoType* other) {
  if (other != this) {
    playerid_.Swap(&other->playerid_);
    playerstat_.Swap(&other->playerstat_);
    power_.Swap(&other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomEndInfoType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomEndInfoType_descriptor_;
  metadata.reflection = RoomEndInfoType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSNotifyClientReply::CSNotifyClientReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSNotifyClientReply::InitAsDefaultInstance() {
}

CSNotifyClientReply::CSNotifyClientReply(const CSNotifyClientReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSNotifyClientReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSNotifyClientReply::~CSNotifyClientReply() {
  SharedDtor();
}

void CSNotifyClientReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSNotifyClientReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSNotifyClientReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSNotifyClientReply_descriptor_;
}

const CSNotifyClientReply& CSNotifyClientReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcommon_2eproto();
  return *default_instance_;
}

CSNotifyClientReply* CSNotifyClientReply::default_instance_ = NULL;

CSNotifyClientReply* CSNotifyClientReply::New() const {
  return new CSNotifyClientReply;
}

void CSNotifyClientReply::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSNotifyClientReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSNotifyClientReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSNotifyClientReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSNotifyClientReply::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSNotifyClientReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSNotifyClientReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSNotifyClientReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSNotifyClientReply::MergeFrom(const CSNotifyClientReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSNotifyClientReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSNotifyClientReply::CopyFrom(const CSNotifyClientReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNotifyClientReply::IsInitialized() const {

  return true;
}

void CSNotifyClientReply::Swap(CSNotifyClientReply* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSNotifyClientReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSNotifyClientReply_descriptor_;
  metadata.reflection = CSNotifyClientReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerVipList::kSuperVipTimeFieldNumber;
const int PlayerVipList::kVipTimeFieldNumber;
const int PlayerVipList::kVipChgFieldNumber;
#endif  // !_MSC_VER

PlayerVipList::PlayerVipList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerVipList::InitAsDefaultInstance() {
}

PlayerVipList::PlayerVipList(const PlayerVipList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerVipList::SharedCtor() {
  _cached_size_ = 0;
  superviptime_ = 0;
  viptime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerVipList::~PlayerVipList() {
  SharedDtor();
}

void PlayerVipList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerVipList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerVipList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerVipList_descriptor_;
}

const PlayerVipList& PlayerVipList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcommon_2eproto();
  return *default_instance_;
}

PlayerVipList* PlayerVipList::default_instance_ = NULL;

PlayerVipList* PlayerVipList::New() const {
  return new PlayerVipList;
}

void PlayerVipList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    superviptime_ = 0;
    viptime_ = 0;
  }
  vipchg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerVipList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SuperVipTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &superviptime_)));
          set_has_superviptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_VipTime;
        break;
      }

      // optional int32 VipTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VipTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viptime_)));
          set_has_viptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_VipChg;
        break;
      }

      // repeated .cs.VipChgInfo VipChg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VipChg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vipchg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_VipChg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerVipList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 SuperVipTime = 1;
  if (has_superviptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->superviptime(), output);
  }

  // optional int32 VipTime = 2;
  if (has_viptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->viptime(), output);
  }

  // repeated .cs.VipChgInfo VipChg = 3;
  for (int i = 0; i < this->vipchg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vipchg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerVipList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 SuperVipTime = 1;
  if (has_superviptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->superviptime(), target);
  }

  // optional int32 VipTime = 2;
  if (has_viptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->viptime(), target);
  }

  // repeated .cs.VipChgInfo VipChg = 3;
  for (int i = 0; i < this->vipchg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vipchg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerVipList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SuperVipTime = 1;
    if (has_superviptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->superviptime());
    }

    // optional int32 VipTime = 2;
    if (has_viptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viptime());
    }

  }
  // repeated .cs.VipChgInfo VipChg = 3;
  total_size += 1 * this->vipchg_size();
  for (int i = 0; i < this->vipchg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vipchg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerVipList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerVipList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerVipList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerVipList::MergeFrom(const PlayerVipList& from) {
  GOOGLE_CHECK_NE(&from, this);
  vipchg_.MergeFrom(from.vipchg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_superviptime()) {
      set_superviptime(from.superviptime());
    }
    if (from.has_viptime()) {
      set_viptime(from.viptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerVipList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerVipList::CopyFrom(const PlayerVipList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerVipList::IsInitialized() const {

  return true;
}

void PlayerVipList::Swap(PlayerVipList* other) {
  if (other != this) {
    std::swap(superviptime_, other->superviptime_);
    std::swap(viptime_, other->viptime_);
    vipchg_.Swap(&other->vipchg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerVipList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerVipList_descriptor_;
  metadata.reflection = PlayerVipList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VipChgInfo::kVipTypeFieldNumber;
const int VipChgInfo::kChgTimeFieldNumber;
#endif  // !_MSC_VER

VipChgInfo::VipChgInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VipChgInfo::InitAsDefaultInstance() {
}

VipChgInfo::VipChgInfo(const VipChgInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VipChgInfo::SharedCtor() {
  _cached_size_ = 0;
  viptype_ = 0;
  chgtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipChgInfo::~VipChgInfo() {
  SharedDtor();
}

void VipChgInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VipChgInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VipChgInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipChgInfo_descriptor_;
}

const VipChgInfo& VipChgInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcommon_2eproto();
  return *default_instance_;
}

VipChgInfo* VipChgInfo::default_instance_ = NULL;

VipChgInfo* VipChgInfo::New() const {
  return new VipChgInfo;
}

void VipChgInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    viptype_ = 0;
    chgtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VipChgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 VipType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viptype_)));
          set_has_viptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ChgTime;
        break;
      }

      // optional int32 ChgTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChgTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chgtime_)));
          set_has_chgtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VipChgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 VipType = 1;
  if (has_viptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->viptype(), output);
  }

  // optional int32 ChgTime = 2;
  if (has_chgtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chgtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VipChgInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 VipType = 1;
  if (has_viptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->viptype(), target);
  }

  // optional int32 ChgTime = 2;
  if (has_chgtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chgtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VipChgInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 VipType = 1;
    if (has_viptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viptype());
    }

    // optional int32 ChgTime = 2;
    if (has_chgtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chgtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipChgInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VipChgInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VipChgInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VipChgInfo::MergeFrom(const VipChgInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viptype()) {
      set_viptype(from.viptype());
    }
    if (from.has_chgtime()) {
      set_chgtime(from.chgtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VipChgInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VipChgInfo::CopyFrom(const VipChgInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipChgInfo::IsInitialized() const {

  return true;
}

void VipChgInfo::Swap(VipChgInfo* other) {
  if (other != this) {
    std::swap(viptype_, other->viptype_);
    std::swap(chgtime_, other->chgtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VipChgInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VipChgInfo_descriptor_;
  metadata.reflection = VipChgInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerUnit::kTypeFieldNumber;
const int PlayerUnit::kLevelFieldNumber;
#endif  // !_MSC_VER

PlayerUnit::PlayerUnit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerUnit::InitAsDefaultInstance() {
}

PlayerUnit::PlayerUnit(const PlayerUnit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerUnit::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerUnit::~PlayerUnit() {
  SharedDtor();
}

void PlayerUnit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerUnit_descriptor_;
}

const PlayerUnit& PlayerUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcommon_2eproto();
  return *default_instance_;
}

PlayerUnit* PlayerUnit::default_instance_ = NULL;

PlayerUnit* PlayerUnit::New() const {
  return new PlayerUnit;
}

void PlayerUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }

      // optional int32 Level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 Level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 Level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerUnit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerUnit::MergeFrom(const PlayerUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerUnit::CopyFrom(const PlayerUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerUnit::IsInitialized() const {

  return true;
}

void PlayerUnit::Swap(PlayerUnit* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerUnit_descriptor_;
  metadata.reflection = PlayerUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerCard::kIdFieldNumber;
const int PlayerCard::kNumberFieldNumber;
#endif  // !_MSC_VER

PlayerCard::PlayerCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerCard::InitAsDefaultInstance() {
}

PlayerCard::PlayerCard(const PlayerCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerCard::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerCard::~PlayerCard() {
  SharedDtor();
}

void PlayerCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerCard_descriptor_;
}

const PlayerCard& PlayerCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcommon_2eproto();
  return *default_instance_;
}

PlayerCard* PlayerCard::default_instance_ = NULL;

PlayerCard* PlayerCard::New() const {
  return new PlayerCard;
}

void PlayerCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Number;
        break;
      }

      // optional int32 Number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 Number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 Number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 Number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerCard::MergeFrom(const PlayerCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCard::CopyFrom(const PlayerCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCard::IsInitialized() const {

  return true;
}

void PlayerCard::Swap(PlayerCard* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerCard_descriptor_;
  metadata.reflection = PlayerCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVPBattleReportPlayers::kRoomIDFieldNumber;
#endif  // !_MSC_VER

PVPBattleReportPlayers::PVPBattleReportPlayers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVPBattleReportPlayers::InitAsDefaultInstance() {
}

PVPBattleReportPlayers::PVPBattleReportPlayers(const PVPBattleReportPlayers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVPBattleReportPlayers::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVPBattleReportPlayers::~PVPBattleReportPlayers() {
  SharedDtor();
}

void PVPBattleReportPlayers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVPBattleReportPlayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVPBattleReportPlayers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVPBattleReportPlayers_descriptor_;
}

const PVPBattleReportPlayers& PVPBattleReportPlayers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcommon_2eproto();
  return *default_instance_;
}

PVPBattleReportPlayers* PVPBattleReportPlayers::default_instance_ = NULL;

PVPBattleReportPlayers* PVPBattleReportPlayers::New() const {
  return new PVPBattleReportPlayers;
}

void PVPBattleReportPlayers::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVPBattleReportPlayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVPBattleReportPlayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVPBattleReportPlayers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVPBattleReportPlayers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVPBattleReportPlayers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVPBattleReportPlayers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVPBattleReportPlayers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVPBattleReportPlayers::MergeFrom(const PVPBattleReportPlayers& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVPBattleReportPlayers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPBattleReportPlayers::CopyFrom(const PVPBattleReportPlayers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPBattleReportPlayers::IsInitialized() const {

  return true;
}

void PVPBattleReportPlayers::Swap(PVPBattleReportPlayers* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVPBattleReportPlayers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVPBattleReportPlayers_descriptor_;
  metadata.reflection = PVPBattleReportPlayers_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cs

// @@protoc_insertion_point(global_scope)
