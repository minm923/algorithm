// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_message.proto

#ifndef PROTOBUF_cs_5fmessage_2eproto__INCLUDED
#define PROTOBUF_cs_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cs_common.pb.h"
// @@protoc_insertion_point(includes)

namespace cs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cs_5fmessage_2eproto();
void protobuf_AssignDesc_cs_5fmessage_2eproto();
void protobuf_ShutdownFile_cs_5fmessage_2eproto();

class CSPkgHead;
class CSPKG;
class CSPKGBody_S2C;
class CSPKGBody_S2C_Common;

// ===================================================================

class CSPkgHead : public ::google::protobuf::Message {
 public:
  CSPkgHead();
  virtual ~CSPkgHead();

  CSPkgHead(const CSPkgHead& from);

  inline CSPkgHead& operator=(const CSPkgHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPkgHead& default_instance();

  void Swap(CSPkgHead* other);

  // implements Message ----------------------------------------------

  CSPkgHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPkgHead& from);
  void MergeFrom(const CSPkgHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 CmdID = 1;
  inline bool has_cmdid() const;
  inline void clear_cmdid();
  static const int kCmdIDFieldNumber = 1;
  inline ::google::protobuf::uint32 cmdid() const;
  inline void set_cmdid(::google::protobuf::uint32 value);

  // required uint32 MsgSeqID = 2;
  inline bool has_msgseqid() const;
  inline void clear_msgseqid();
  static const int kMsgSeqIDFieldNumber = 2;
  inline ::google::protobuf::uint32 msgseqid() const;
  inline void set_msgseqid(::google::protobuf::uint32 value);

  // required uint32 EncryptType = 3;
  inline bool has_encrypttype() const;
  inline void clear_encrypttype();
  static const int kEncryptTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 encrypttype() const;
  inline void set_encrypttype(::google::protobuf::uint32 value);

  // optional uint32 RetCode = 4;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 4;
  inline ::google::protobuf::uint32 retcode() const;
  inline void set_retcode(::google::protobuf::uint32 value);

  // optional string ErrMessage = 5;
  inline bool has_errmessage() const;
  inline void clear_errmessage();
  static const int kErrMessageFieldNumber = 5;
  inline const ::std::string& errmessage() const;
  inline void set_errmessage(const ::std::string& value);
  inline void set_errmessage(const char* value);
  inline void set_errmessage(const char* value, size_t size);
  inline ::std::string* mutable_errmessage();
  inline ::std::string* release_errmessage();
  inline void set_allocated_errmessage(::std::string* errmessage);

  // required uint32 CompressType = 6;
  inline bool has_compresstype() const;
  inline void clear_compresstype();
  static const int kCompressTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 compresstype() const;
  inline void set_compresstype(::google::protobuf::uint32 value);

  // optional uint32 NotifyMsgSeqID = 7;
  inline bool has_notifymsgseqid() const;
  inline void clear_notifymsgseqid();
  static const int kNotifyMsgSeqIDFieldNumber = 7;
  inline ::google::protobuf::uint32 notifymsgseqid() const;
  inline void set_notifymsgseqid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cs.CSPkgHead)
 private:
  inline void set_has_cmdid();
  inline void clear_has_cmdid();
  inline void set_has_msgseqid();
  inline void clear_has_msgseqid();
  inline void set_has_encrypttype();
  inline void clear_has_encrypttype();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_errmessage();
  inline void clear_has_errmessage();
  inline void set_has_compresstype();
  inline void clear_has_compresstype();
  inline void set_has_notifymsgseqid();
  inline void clear_has_notifymsgseqid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cmdid_;
  ::google::protobuf::uint32 msgseqid_;
  ::google::protobuf::uint32 encrypttype_;
  ::google::protobuf::uint32 retcode_;
  ::std::string* errmessage_;
  ::google::protobuf::uint32 compresstype_;
  ::google::protobuf::uint32 notifymsgseqid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmessage_2eproto();
  friend void protobuf_AssignDesc_cs_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static CSPkgHead* default_instance_;
};
// -------------------------------------------------------------------

class CSPKG : public ::google::protobuf::Message {
 public:
  CSPKG();
  virtual ~CSPKG();

  CSPKG(const CSPKG& from);

  inline CSPKG& operator=(const CSPKG& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPKG& default_instance();

  void Swap(CSPKG* other);

  // implements Message ----------------------------------------------

  CSPKG* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPKG& from);
  void MergeFrom(const CSPKG& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .cs.CSPkgHead Head = 1;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1;
  inline const ::cs::CSPkgHead& head() const;
  inline ::cs::CSPkgHead* mutable_head();
  inline ::cs::CSPkgHead* release_head();
  inline void set_allocated_head(::cs::CSPkgHead* head);

  // required bytes Body = 2;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 2;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const void* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:cs.CSPKG)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_body();
  inline void clear_has_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::cs::CSPkgHead* head_;
  ::std::string* body_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmessage_2eproto();
  friend void protobuf_AssignDesc_cs_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static CSPKG* default_instance_;
};
// -------------------------------------------------------------------

class CSPKGBody_S2C : public ::google::protobuf::Message {
 public:
  CSPKGBody_S2C();
  virtual ~CSPKGBody_S2C();

  CSPKGBody_S2C(const CSPKGBody_S2C& from);

  inline CSPKGBody_S2C& operator=(const CSPKGBody_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPKGBody_S2C& default_instance();

  void Swap(CSPKGBody_S2C* other);

  // implements Message ----------------------------------------------

  CSPKGBody_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPKGBody_S2C& from);
  void MergeFrom(const CSPKGBody_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes Body = 1;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 1;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const void* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // optional .cs.CSPKGBody_S2C_Common CommonData = 2;
  inline bool has_commondata() const;
  inline void clear_commondata();
  static const int kCommonDataFieldNumber = 2;
  inline const ::cs::CSPKGBody_S2C_Common& commondata() const;
  inline ::cs::CSPKGBody_S2C_Common* mutable_commondata();
  inline ::cs::CSPKGBody_S2C_Common* release_commondata();
  inline void set_allocated_commondata(::cs::CSPKGBody_S2C_Common* commondata);

  // @@protoc_insertion_point(class_scope:cs.CSPKGBody_S2C)
 private:
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_commondata();
  inline void clear_has_commondata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* body_;
  ::cs::CSPKGBody_S2C_Common* commondata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmessage_2eproto();
  friend void protobuf_AssignDesc_cs_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static CSPKGBody_S2C* default_instance_;
};
// -------------------------------------------------------------------

class CSPKGBody_S2C_Common : public ::google::protobuf::Message {
 public:
  CSPKGBody_S2C_Common();
  virtual ~CSPKGBody_S2C_Common();

  CSPKGBody_S2C_Common(const CSPKGBody_S2C_Common& from);

  inline CSPKGBody_S2C_Common& operator=(const CSPKGBody_S2C_Common& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPKGBody_S2C_Common& default_instance();

  void Swap(CSPKGBody_S2C_Common* other);

  // implements Message ----------------------------------------------

  CSPKGBody_S2C_Common* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPKGBody_S2C_Common& from);
  void MergeFrom(const CSPKGBody_S2C_Common& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cs.BaseInfoType baseInfo = 1;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseInfoFieldNumber = 1;
  inline const ::cs::BaseInfoType& baseinfo() const;
  inline ::cs::BaseInfoType* mutable_baseinfo();
  inline ::cs::BaseInfoType* release_baseinfo();
  inline void set_allocated_baseinfo(::cs::BaseInfoType* baseinfo);

  // repeated .cs.PlayerUnit unitList = 2;
  inline int unitlist_size() const;
  inline void clear_unitlist();
  static const int kUnitListFieldNumber = 2;
  inline const ::cs::PlayerUnit& unitlist(int index) const;
  inline ::cs::PlayerUnit* mutable_unitlist(int index);
  inline ::cs::PlayerUnit* add_unitlist();
  inline const ::google::protobuf::RepeatedPtrField< ::cs::PlayerUnit >&
      unitlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::cs::PlayerUnit >*
      mutable_unitlist();

  // repeated .cs.PlayerCard cardList = 3;
  inline int cardlist_size() const;
  inline void clear_cardlist();
  static const int kCardListFieldNumber = 3;
  inline const ::cs::PlayerCard& cardlist(int index) const;
  inline ::cs::PlayerCard* mutable_cardlist(int index);
  inline ::cs::PlayerCard* add_cardlist();
  inline const ::google::protobuf::RepeatedPtrField< ::cs::PlayerCard >&
      cardlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::cs::PlayerCard >*
      mutable_cardlist();

  // repeated int32 statusList = 4;
  inline int statuslist_size() const;
  inline void clear_statuslist();
  static const int kStatusListFieldNumber = 4;
  inline ::google::protobuf::int32 statuslist(int index) const;
  inline void set_statuslist(int index, ::google::protobuf::int32 value);
  inline void add_statuslist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      statuslist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_statuslist();

  // optional int32 serverStatus = 5;
  inline bool has_serverstatus() const;
  inline void clear_serverstatus();
  static const int kServerStatusFieldNumber = 5;
  inline ::google::protobuf::int32 serverstatus() const;
  inline void set_serverstatus(::google::protobuf::int32 value);

  // optional int32 countDown = 6;
  inline bool has_countdown() const;
  inline void clear_countdown();
  static const int kCountDownFieldNumber = 6;
  inline ::google::protobuf::int32 countdown() const;
  inline void set_countdown(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cs.CSPKGBody_S2C_Common)
 private:
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();
  inline void set_has_serverstatus();
  inline void clear_has_serverstatus();
  inline void set_has_countdown();
  inline void clear_has_countdown();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::cs::BaseInfoType* baseinfo_;
  ::google::protobuf::RepeatedPtrField< ::cs::PlayerUnit > unitlist_;
  ::google::protobuf::RepeatedPtrField< ::cs::PlayerCard > cardlist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > statuslist_;
  ::google::protobuf::int32 serverstatus_;
  ::google::protobuf::int32 countdown_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmessage_2eproto();
  friend void protobuf_AssignDesc_cs_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static CSPKGBody_S2C_Common* default_instance_;
};
// ===================================================================


// ===================================================================

// CSPkgHead

// required uint32 CmdID = 1;
inline bool CSPkgHead::has_cmdid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPkgHead::set_has_cmdid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPkgHead::clear_has_cmdid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPkgHead::clear_cmdid() {
  cmdid_ = 0u;
  clear_has_cmdid();
}
inline ::google::protobuf::uint32 CSPkgHead::cmdid() const {
  return cmdid_;
}
inline void CSPkgHead::set_cmdid(::google::protobuf::uint32 value) {
  set_has_cmdid();
  cmdid_ = value;
}

// required uint32 MsgSeqID = 2;
inline bool CSPkgHead::has_msgseqid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSPkgHead::set_has_msgseqid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSPkgHead::clear_has_msgseqid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSPkgHead::clear_msgseqid() {
  msgseqid_ = 0u;
  clear_has_msgseqid();
}
inline ::google::protobuf::uint32 CSPkgHead::msgseqid() const {
  return msgseqid_;
}
inline void CSPkgHead::set_msgseqid(::google::protobuf::uint32 value) {
  set_has_msgseqid();
  msgseqid_ = value;
}

// required uint32 EncryptType = 3;
inline bool CSPkgHead::has_encrypttype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSPkgHead::set_has_encrypttype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSPkgHead::clear_has_encrypttype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSPkgHead::clear_encrypttype() {
  encrypttype_ = 0u;
  clear_has_encrypttype();
}
inline ::google::protobuf::uint32 CSPkgHead::encrypttype() const {
  return encrypttype_;
}
inline void CSPkgHead::set_encrypttype(::google::protobuf::uint32 value) {
  set_has_encrypttype();
  encrypttype_ = value;
}

// optional uint32 RetCode = 4;
inline bool CSPkgHead::has_retcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSPkgHead::set_has_retcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSPkgHead::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSPkgHead::clear_retcode() {
  retcode_ = 0u;
  clear_has_retcode();
}
inline ::google::protobuf::uint32 CSPkgHead::retcode() const {
  return retcode_;
}
inline void CSPkgHead::set_retcode(::google::protobuf::uint32 value) {
  set_has_retcode();
  retcode_ = value;
}

// optional string ErrMessage = 5;
inline bool CSPkgHead::has_errmessage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSPkgHead::set_has_errmessage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSPkgHead::clear_has_errmessage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSPkgHead::clear_errmessage() {
  if (errmessage_ != &::google::protobuf::internal::kEmptyString) {
    errmessage_->clear();
  }
  clear_has_errmessage();
}
inline const ::std::string& CSPkgHead::errmessage() const {
  return *errmessage_;
}
inline void CSPkgHead::set_errmessage(const ::std::string& value) {
  set_has_errmessage();
  if (errmessage_ == &::google::protobuf::internal::kEmptyString) {
    errmessage_ = new ::std::string;
  }
  errmessage_->assign(value);
}
inline void CSPkgHead::set_errmessage(const char* value) {
  set_has_errmessage();
  if (errmessage_ == &::google::protobuf::internal::kEmptyString) {
    errmessage_ = new ::std::string;
  }
  errmessage_->assign(value);
}
inline void CSPkgHead::set_errmessage(const char* value, size_t size) {
  set_has_errmessage();
  if (errmessage_ == &::google::protobuf::internal::kEmptyString) {
    errmessage_ = new ::std::string;
  }
  errmessage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSPkgHead::mutable_errmessage() {
  set_has_errmessage();
  if (errmessage_ == &::google::protobuf::internal::kEmptyString) {
    errmessage_ = new ::std::string;
  }
  return errmessage_;
}
inline ::std::string* CSPkgHead::release_errmessage() {
  clear_has_errmessage();
  if (errmessage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errmessage_;
    errmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSPkgHead::set_allocated_errmessage(::std::string* errmessage) {
  if (errmessage_ != &::google::protobuf::internal::kEmptyString) {
    delete errmessage_;
  }
  if (errmessage) {
    set_has_errmessage();
    errmessage_ = errmessage;
  } else {
    clear_has_errmessage();
    errmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 CompressType = 6;
inline bool CSPkgHead::has_compresstype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSPkgHead::set_has_compresstype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSPkgHead::clear_has_compresstype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSPkgHead::clear_compresstype() {
  compresstype_ = 0u;
  clear_has_compresstype();
}
inline ::google::protobuf::uint32 CSPkgHead::compresstype() const {
  return compresstype_;
}
inline void CSPkgHead::set_compresstype(::google::protobuf::uint32 value) {
  set_has_compresstype();
  compresstype_ = value;
}

// optional uint32 NotifyMsgSeqID = 7;
inline bool CSPkgHead::has_notifymsgseqid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSPkgHead::set_has_notifymsgseqid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSPkgHead::clear_has_notifymsgseqid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSPkgHead::clear_notifymsgseqid() {
  notifymsgseqid_ = 0u;
  clear_has_notifymsgseqid();
}
inline ::google::protobuf::uint32 CSPkgHead::notifymsgseqid() const {
  return notifymsgseqid_;
}
inline void CSPkgHead::set_notifymsgseqid(::google::protobuf::uint32 value) {
  set_has_notifymsgseqid();
  notifymsgseqid_ = value;
}

// -------------------------------------------------------------------

// CSPKG

// required .cs.CSPkgHead Head = 1;
inline bool CSPKG::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPKG::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPKG::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPKG::clear_head() {
  if (head_ != NULL) head_->::cs::CSPkgHead::Clear();
  clear_has_head();
}
inline const ::cs::CSPkgHead& CSPKG::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::cs::CSPkgHead* CSPKG::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::cs::CSPkgHead;
  return head_;
}
inline ::cs::CSPkgHead* CSPKG::release_head() {
  clear_has_head();
  ::cs::CSPkgHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void CSPKG::set_allocated_head(::cs::CSPkgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// required bytes Body = 2;
inline bool CSPKG::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSPKG::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSPKG::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSPKG::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& CSPKG::body() const {
  return *body_;
}
inline void CSPKG::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void CSPKG::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void CSPKG::set_body(const void* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSPKG::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* CSPKG::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSPKG::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CSPKGBody_S2C

// required bytes Body = 1;
inline bool CSPKGBody_S2C::has_body() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPKGBody_S2C::set_has_body() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPKGBody_S2C::clear_has_body() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPKGBody_S2C::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& CSPKGBody_S2C::body() const {
  return *body_;
}
inline void CSPKGBody_S2C::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void CSPKGBody_S2C::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void CSPKGBody_S2C::set_body(const void* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSPKGBody_S2C::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* CSPKGBody_S2C::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSPKGBody_S2C::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .cs.CSPKGBody_S2C_Common CommonData = 2;
inline bool CSPKGBody_S2C::has_commondata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSPKGBody_S2C::set_has_commondata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSPKGBody_S2C::clear_has_commondata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSPKGBody_S2C::clear_commondata() {
  if (commondata_ != NULL) commondata_->::cs::CSPKGBody_S2C_Common::Clear();
  clear_has_commondata();
}
inline const ::cs::CSPKGBody_S2C_Common& CSPKGBody_S2C::commondata() const {
  return commondata_ != NULL ? *commondata_ : *default_instance_->commondata_;
}
inline ::cs::CSPKGBody_S2C_Common* CSPKGBody_S2C::mutable_commondata() {
  set_has_commondata();
  if (commondata_ == NULL) commondata_ = new ::cs::CSPKGBody_S2C_Common;
  return commondata_;
}
inline ::cs::CSPKGBody_S2C_Common* CSPKGBody_S2C::release_commondata() {
  clear_has_commondata();
  ::cs::CSPKGBody_S2C_Common* temp = commondata_;
  commondata_ = NULL;
  return temp;
}
inline void CSPKGBody_S2C::set_allocated_commondata(::cs::CSPKGBody_S2C_Common* commondata) {
  delete commondata_;
  commondata_ = commondata;
  if (commondata) {
    set_has_commondata();
  } else {
    clear_has_commondata();
  }
}

// -------------------------------------------------------------------

// CSPKGBody_S2C_Common

// optional .cs.BaseInfoType baseInfo = 1;
inline bool CSPKGBody_S2C_Common::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPKGBody_S2C_Common::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPKGBody_S2C_Common::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPKGBody_S2C_Common::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::cs::BaseInfoType::Clear();
  clear_has_baseinfo();
}
inline const ::cs::BaseInfoType& CSPKGBody_S2C_Common::baseinfo() const {
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::cs::BaseInfoType* CSPKGBody_S2C_Common::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::cs::BaseInfoType;
  return baseinfo_;
}
inline ::cs::BaseInfoType* CSPKGBody_S2C_Common::release_baseinfo() {
  clear_has_baseinfo();
  ::cs::BaseInfoType* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void CSPKGBody_S2C_Common::set_allocated_baseinfo(::cs::BaseInfoType* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    set_has_baseinfo();
  } else {
    clear_has_baseinfo();
  }
}

// repeated .cs.PlayerUnit unitList = 2;
inline int CSPKGBody_S2C_Common::unitlist_size() const {
  return unitlist_.size();
}
inline void CSPKGBody_S2C_Common::clear_unitlist() {
  unitlist_.Clear();
}
inline const ::cs::PlayerUnit& CSPKGBody_S2C_Common::unitlist(int index) const {
  return unitlist_.Get(index);
}
inline ::cs::PlayerUnit* CSPKGBody_S2C_Common::mutable_unitlist(int index) {
  return unitlist_.Mutable(index);
}
inline ::cs::PlayerUnit* CSPKGBody_S2C_Common::add_unitlist() {
  return unitlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cs::PlayerUnit >&
CSPKGBody_S2C_Common::unitlist() const {
  return unitlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::cs::PlayerUnit >*
CSPKGBody_S2C_Common::mutable_unitlist() {
  return &unitlist_;
}

// repeated .cs.PlayerCard cardList = 3;
inline int CSPKGBody_S2C_Common::cardlist_size() const {
  return cardlist_.size();
}
inline void CSPKGBody_S2C_Common::clear_cardlist() {
  cardlist_.Clear();
}
inline const ::cs::PlayerCard& CSPKGBody_S2C_Common::cardlist(int index) const {
  return cardlist_.Get(index);
}
inline ::cs::PlayerCard* CSPKGBody_S2C_Common::mutable_cardlist(int index) {
  return cardlist_.Mutable(index);
}
inline ::cs::PlayerCard* CSPKGBody_S2C_Common::add_cardlist() {
  return cardlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cs::PlayerCard >&
CSPKGBody_S2C_Common::cardlist() const {
  return cardlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::cs::PlayerCard >*
CSPKGBody_S2C_Common::mutable_cardlist() {
  return &cardlist_;
}

// repeated int32 statusList = 4;
inline int CSPKGBody_S2C_Common::statuslist_size() const {
  return statuslist_.size();
}
inline void CSPKGBody_S2C_Common::clear_statuslist() {
  statuslist_.Clear();
}
inline ::google::protobuf::int32 CSPKGBody_S2C_Common::statuslist(int index) const {
  return statuslist_.Get(index);
}
inline void CSPKGBody_S2C_Common::set_statuslist(int index, ::google::protobuf::int32 value) {
  statuslist_.Set(index, value);
}
inline void CSPKGBody_S2C_Common::add_statuslist(::google::protobuf::int32 value) {
  statuslist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CSPKGBody_S2C_Common::statuslist() const {
  return statuslist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CSPKGBody_S2C_Common::mutable_statuslist() {
  return &statuslist_;
}

// optional int32 serverStatus = 5;
inline bool CSPKGBody_S2C_Common::has_serverstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSPKGBody_S2C_Common::set_has_serverstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSPKGBody_S2C_Common::clear_has_serverstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSPKGBody_S2C_Common::clear_serverstatus() {
  serverstatus_ = 0;
  clear_has_serverstatus();
}
inline ::google::protobuf::int32 CSPKGBody_S2C_Common::serverstatus() const {
  return serverstatus_;
}
inline void CSPKGBody_S2C_Common::set_serverstatus(::google::protobuf::int32 value) {
  set_has_serverstatus();
  serverstatus_ = value;
}

// optional int32 countDown = 6;
inline bool CSPKGBody_S2C_Common::has_countdown() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSPKGBody_S2C_Common::set_has_countdown() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSPKGBody_S2C_Common::clear_has_countdown() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSPKGBody_S2C_Common::clear_countdown() {
  countdown_ = 0;
  clear_has_countdown();
}
inline ::google::protobuf::int32 CSPKGBody_S2C_Common::countdown() const {
  return countdown_;
}
inline void CSPKGBody_S2C_Common::set_countdown(::google::protobuf::int32 value) {
  set_has_countdown();
  countdown_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cs_5fmessage_2eproto__INCLUDED
