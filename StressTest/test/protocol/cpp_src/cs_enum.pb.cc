// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_enum.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs_enum.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cs {

namespace {

const ::google::protobuf::EnumDescriptor* EnmCmdID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmCompressType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmEncryptType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmGameItemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmCurrencyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmExpType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmInhabyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmCorpsType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmCorpsGroup_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmMapSignalType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmStatusType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmTaskMsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmAllianceMember_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmAllianceJoinCond_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmAllianceJoinReply_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmSkillType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmChatChannel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmPVPStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmServerStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmPVPNum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmPVPResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmPVPTeam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetWorkSP_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BattleCardType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PreWarCardType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmRobotType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmBoxStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmBoxQuality_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmPVPMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmPlayerStat_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmPVEHardType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmPVPType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmPvpBattleReportType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmAllianceMemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmPrepareWarType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmPrepareWarStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmMissionStar_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmBattleCardNum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmPVPMvpType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmFriendListType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmMailType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmMailSubType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmMailStat_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmRoomPosition_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmInviteType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmCreditAlterType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmBoxType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmPvpStatType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnmSyncRedisData_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_5fenum_2eproto() {
  protobuf_AddDesc_cs_5fenum_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs_enum.proto");
  GOOGLE_CHECK(file != NULL);
  EnmCmdID_descriptor_ = file->enum_type(0);
  EnmCompressType_descriptor_ = file->enum_type(1);
  EnmEncryptType_descriptor_ = file->enum_type(2);
  EnmGameItemType_descriptor_ = file->enum_type(3);
  EnmCurrencyType_descriptor_ = file->enum_type(4);
  EnmExpType_descriptor_ = file->enum_type(5);
  EnmInhabyType_descriptor_ = file->enum_type(6);
  EnmCorpsType_descriptor_ = file->enum_type(7);
  EnmCorpsGroup_descriptor_ = file->enum_type(8);
  EnmMapSignalType_descriptor_ = file->enum_type(9);
  EnmStatusType_descriptor_ = file->enum_type(10);
  EnmTaskMsgType_descriptor_ = file->enum_type(11);
  EnmAllianceMember_descriptor_ = file->enum_type(12);
  EnmAllianceJoinCond_descriptor_ = file->enum_type(13);
  EnmAllianceJoinReply_descriptor_ = file->enum_type(14);
  EnmSkillType_descriptor_ = file->enum_type(15);
  EnmChatChannel_descriptor_ = file->enum_type(16);
  EnmPVPStatus_descriptor_ = file->enum_type(17);
  EnmServerStatus_descriptor_ = file->enum_type(18);
  EnmPVPNum_descriptor_ = file->enum_type(19);
  EnmPVPResult_descriptor_ = file->enum_type(20);
  EnmPVPTeam_descriptor_ = file->enum_type(21);
  NetWorkSP_descriptor_ = file->enum_type(22);
  BattleCardType_descriptor_ = file->enum_type(23);
  PreWarCardType_descriptor_ = file->enum_type(24);
  EnmRobotType_descriptor_ = file->enum_type(25);
  EnmBoxStatus_descriptor_ = file->enum_type(26);
  EnmBoxQuality_descriptor_ = file->enum_type(27);
  EnmPVPMode_descriptor_ = file->enum_type(28);
  EnmPlayerStat_descriptor_ = file->enum_type(29);
  EnmPVEHardType_descriptor_ = file->enum_type(30);
  EnmPVPType_descriptor_ = file->enum_type(31);
  EnmPvpBattleReportType_descriptor_ = file->enum_type(32);
  EnmAllianceMemType_descriptor_ = file->enum_type(33);
  EnmPrepareWarType_descriptor_ = file->enum_type(34);
  EnmPrepareWarStatus_descriptor_ = file->enum_type(35);
  EnmMissionStar_descriptor_ = file->enum_type(36);
  EnmBattleCardNum_descriptor_ = file->enum_type(37);
  EnmPVPMvpType_descriptor_ = file->enum_type(38);
  EnmFriendListType_descriptor_ = file->enum_type(39);
  EnmMailType_descriptor_ = file->enum_type(40);
  EnmMailSubType_descriptor_ = file->enum_type(41);
  EnmMailStat_descriptor_ = file->enum_type(42);
  EnmRoomPosition_descriptor_ = file->enum_type(43);
  EnmInviteType_descriptor_ = file->enum_type(44);
  EnmCreditAlterType_descriptor_ = file->enum_type(45);
  EnmBoxType_descriptor_ = file->enum_type(46);
  EnmPvpStatType_descriptor_ = file->enum_type(47);
  EnmSyncRedisData_descriptor_ = file->enum_type(48);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_5fenum_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_cs_5fenum_2eproto() {
}

void protobuf_AddDesc_cs_5fenum_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rcs_enum.proto\022\002cs*\374k\n\010EnmCmdID\022\023\n\017CS_L"
    "SFRAME_PUSH\020\000\022\016\n\nCS_PHP_REQ\020\001\022\016\n\nCS_PHP_"
    "RES\020\002\022 \n\034CS_GET_GAME_SVR_MIN_LOAD_REQ\020\003\022"
    " \n\034CS_GET_GAME_SVR_MIN_LOAD_RES\020\004\022\024\n\020CS_"
    "HEARTBEAT_REQ\020\005\022\024\n\020CS_HEARTBEAT_RES\020\006\022\034\n"
    "\030CS_UPDATE_SECRET_KEY_REQ\020\007\022\034\n\030CS_UPDATE"
    "_SECRET_KEY_RES\020\010\022\026\n\022CS_KICK_OFF_NOTIFY\020"
    "\t\022\017\n\013CS_PING_REQ\020\013\022\017\n\013CS_PING_RES\020\014\022\023\n\017C"
    "S_STAT_LOG_REQ\020\r\022\023\n\017CS_STAT_LOG_RES\020\016\022\023\n"
    "\017CS_PVP_STAT_REQ\020\017\022\023\n\017CS_PVP_STAT_RES\020\020\022"
    "\026\n\021CS_TEST_HELLO_REQ\020\225N\022\026\n\021CS_TEST_HELLO"
    "_RES\020\226N\022\021\n\014CS_LOGIN_REQ\020\365N\022\021\n\014CS_LOGIN_R"
    "ES\020\366N\022\034\n\027CS_FINALIZE_ACCOUNT_REQ\020\367N\022\034\n\027C"
    "S_FINALIZE_ACCOUNT_RES\020\370N\022\023\n\016CS_RELOGIN_"
    "REQ\020\371N\022\023\n\016CS_RELOGIN_RES\020\372N\022\027\n\022CS_REEDEM"
    "_CODE_REQ\020\373N\022\027\n\022CS_REEDEM_CODE_RES\020\374N\022\020\n"
    "\013CS_BOOT_REQ\020\375N\022\020\n\013CS_BOOT_RES\020\376N\022\033\n\026CS_"
    "GET_RANDOM_NAME_REQ\020\377N\022\033\n\026CS_GET_RANDOM_"
    "NAME_RES\020\200O\022\027\n\022CS_CHANGE_NAME_REQ\020\201O\022\027\n\022"
    "CS_CHANGE_NAME_RES\020\202O\022\030\n\023CS_GET_BASEINFO"
    "_REQ\020\331O\022\030\n\023CS_GET_BASEINFO_RES\020\332O\022\023\n\016CS_"
    "SETDATA_REQ\020\333O\022\023\n\016CS_SETDATA_RES\020\334O\022\023\n\016C"
    "S_GETDATA_REQ\020\335O\022\023\n\016CS_GETDATA_RES\020\336O\022\036\n"
    "\031CS_CHANGE_PLAYER_HEAD_REQ\020\337O\022\036\n\031CS_CHAN"
    "GE_PLAYER_HEAD_RES\020\340O\022\033\n\026CS_GET_UNLOCK_C"
    "ARD_REQ\020\341O\022\033\n\026CS_GET_UNLOCK_CARD_RES\020\342O\022"
    " \n\033CS_GET_PLAYER_BASE_DATA_REQ\020\343O\022 \n\033CS_"
    "GET_PLAYER_BASE_DATA_RES\020\344O\022\035\n\030CS_PULL_M"
    "Y_RANK_LIST_REQ\020\275P\022\035\n\030CS_PULL_MY_RANK_LI"
    "ST_RES\020\276P\022\036\n\031CS_PULL_TOP_RANK_LIST_REQ\020\277"
    "P\022\036\n\031CS_PULL_TOP_RANK_LIST_RES\020\300P\022\033\n\026CS_"
    "PVE_POINTS_LIST_REQ\020\301P\022\033\n\026CS_PVE_POINTS_"
    "LIST_RES\020\302P\022\033\n\026CS_PVP_POINTS_LIST_REQ\020\303P"
    "\022\033\n\026CS_PVP_POINTS_LIST_RES\020\304P\022\033\n\026CS_3V3_"
    "POINTS_LIST_REQ\020\305P\022\033\n\026CS_3V3_POINTS_LIST"
    "_RES\020\306P\022\037\n\032CS_WIN_STREAK_PVP_LIST_REQ\020\307P"
    "\022\037\n\032CS_WIN_STREAK_PVP_LIST_RES\020\310P\022\037\n\032CS_"
    "WIN_STREAK_3V3_LIST_REQ\020\311P\022\037\n\032CS_WIN_STR"
    "EAK_3V3_LIST_RES\020\312P\022\036\n\031CS_GET_BUILDINGS_"
    "INFO_REQ\020\241Q\022\036\n\031CS_GET_BUILDINGS_INFO_RES"
    "\020\242Q\022\023\n\016CS_COLLECT_REQ\020\243Q\022\023\n\016CS_COLLECT_R"
    "ES\020\244Q\022\037\n\032CS_GET_BUILDING_STATUS_REQ\020\245Q\022\037"
    "\n\032CS_GET_BUILDING_STATUS_RES\020\246Q\022\034\n\027CS_BU"
    "ILDING_UPGRADE_REQ\020\247Q\022\034\n\027CS_BUILDING_UPG"
    "RADE_RES\020\250Q\022\032\n\025CS_BUILDING_BOOST_REQ\020\251Q\022"
    "\032\n\025CS_BUILDING_BOOST_RES\020\252Q\022 \n\033CS_BUILDI"
    "NG_UPGRADE_DMD_REQ\020\253Q\022 \n\033CS_BUILDING_UPG"
    "RADE_DMD_RES\020\254Q\022\033\n\026CS_LEGION_WAR_INFO_RE"
    "Q\020\323Q\022\033\n\026CS_LEGION_WAR_INFO_RES\020\324Q\022\"\n\035CS_"
    "LEGION_WAR_DETAIL_INFO_REQ\020\325Q\022\"\n\035CS_LEGI"
    "ON_WAR_DETAIL_INFO_RES\020\326Q\022\032\n\025CS_LEGION_W"
    "AR_END_REQ\020\327Q\022\032\n\025CS_LEGION_WAR_END_RES\020\330"
    "Q\022 \n\033CS_GET_BATTLE_UNIT_INFO_REQ\020\215R\022 \n\033C"
    "S_GET_BATTLE_UNIT_INFO_RES\020\216R\022\036\n\031CS_UNLO"
    "CK_BATTLE_UNIT_REQ\020\217R\022\036\n\031CS_UNLOCK_BATTL"
    "E_UNIT_RES\020\220R\022\037\n\032CS_UPGRADE_BATTLE_UNIT_"
    "REQ\020\221R\022\037\n\032CS_UPGRADE_BATTLE_UNIT_RES\020\222R\022"
    "\"\n\035CS_GET_CREATION_AREA_INFO_REQ\020\223R\022\"\n\035C"
    "S_GET_CREATION_AREA_INFO_RES\020\224R\022\034\n\027CS_GE"
    "T_DEFENCE_INFO_REQ\020\225R\022\034\n\027CS_GET_DEFENCE_"
    "INFO_RES\020\226R\022!\n\034CS_UNLOCK_AREA_DIFFCULTY_"
    "REQ\020\227R\022!\n\034CS_UNLOCK_AREA_DIFFCULTY_RES\020\230"
    "R\022\032\n\025CS_UNLOCK_AREA_AI_REQ\020\231R\022\032\n\025CS_UNLO"
    "CK_AREA_AI_RES\020\232R\022\027\n\022CS_CHANGE_AREA_REQ\020"
    "\233R\022\027\n\022CS_CHANGE_AREA_RES\020\234R\022 \n\033CS_GET_SI"
    "NGLE_AREA_INFO_REQ\020\235R\022 \n\033CS_GET_SINGLE_A"
    "REA_INFO_RES\020\236R\022!\n\034CS_GET_DEFENCE_UNIT_I"
    "NFO_REQ\020\237R\022!\n\034CS_GET_DEFENCE_UNIT_INFO_R"
    "ES\020\240R\022 \n\033CS_UNLOCK_ALL_DIFFCULTY_REQ\020\241R\022"
    " \n\033CS_UNLOCK_ALL_DIFFCULTY_RES\020\242R\022\036\n\031CS_"
    "GET_DEFENCE_LAYOUT_REQ\020\351R\022\036\n\031CS_GET_DEFE"
    "NCE_LAYOUT_RES\020\352R\022\036\n\031CS_SET_DEFENCE_LAYO"
    "UT_REQ\020\353R\022\036\n\031CS_SET_DEFENCE_LAYOUT_RES\020\354"
    "R\022\030\n\023CS_START_ATTACK_REQ\020\355R\022\030\n\023CS_START_"
    "ATTACK_RES\020\356R\022\030\n\023CS_BATTLE_AWARD_REQ\020\357R\022"
    "\030\n\023CS_BATTLE_AWARD_RES\020\360R\022!\n\034CS_PLAYER_D"
    "EFENCE_LAYOUT_REQ\020\361R\022!\n\034CS_PLAYER_DEFENC"
    "E_LAYOUT_RES\020\362R\022\031\n\024CS_BATTLE_REPORT_REQ\020"
    "\363R\022\031\n\024CS_BATTLE_REPORT_RES\020\364R\022\032\n\025CS_PREV"
    "IEW_PLAYER_REQ\020\367R\022\032\n\025CS_PREVIEW_PLAYER_R"
    "ES\020\370R\022\032\n\025CS_BATTLE_REVENGE_REQ\020\371R\022\032\n\025CS_"
    "BATTLE_REVENGE_RES\020\372R\022$\n\037CS_PULL_BATTLE_"
    "PREVIEW_INFO_REQ\020\373R\022$\n\037CS_PULL_BATTLE_PR"
    "EVIEW_INFO_RES\020\374R\022\026\n\021CS_START_LAND_REQ\020\375"
    "R\022\026\n\021CS_START_LAND_RES\020\376R\022!\n\034CS_BATTLE_C"
    "HECK_DOWNLOAD_REQ\020\377R\022!\n\034CS_BATTLE_CHECK_"
    "DOWNLOAD_RES\020\200S\022\027\n\022CS_INFO_UPDATE_REQ\020\201S"
    "\022\027\n\022CS_INFO_UPDATE_RES\020\202S\022\034\n\027CS_SAVE_BAT"
    "TLE_CARD_REQ\020\203S\022\034\n\027CS_SAVE_BATTLE_CARD_R"
    "ES\020\204S\022\031\n\024CS_ATTACK_NOTIFY_REQ\020\355Z\022\031\n\024CS_A"
    "TTACK_NOTIFY_RES\020\356Z\022!\n\034CS_GET_AREA_UNLOC"
    "K_ROBOT_REQ\020\357Z\022!\n\034CS_GET_AREA_UNLOCK_ROB"
    "OT_RES\020\360Z\022\034\n\027CS_PUSH_ACHIEVEMENT_REQ\020\315S\022"
    "\034\n\027CS_PUSH_ACHIEVEMENT_RES\020\316S\022!\n\034CS_COMP"
    "LETET_ACHIEVEMENT_REQ\020\317S\022!\n\034CS_COMPLETET"
    "_ACHIEVEMENT_RES\020\320S\022\031\n\024CS_GET_QUESTLIST_"
    "REQ\020\321S\022\031\n\024CS_GET_QUESTLIST_RES\020\322S\022\032\n\025CS_"
    "PUSH_QUESTDATA_REQ\020\323S\022\032\n\025CS_PUSH_QUESTDA"
    "TA_RES\020\324S\022\033\n\026CS_GET_QUESTREWARD_REQ\020\325S\022\033"
    "\n\026CS_GET_QUESTREWARD_RES\020\326S\022 \n\033CS_GET_AC"
    "HIEVEMENT_LIST_REQ\020\327S\022 \n\033CS_GET_ACHIEVEM"
    "ENT_LIST_RES\020\330S\022\034\n\027CS_GET_ACTIVEREWARD_R"
    "EQ\020\331S\022\034\n\027CS_GET_ACTIVEREWARD_RES\020\332S\022\036\n\031C"
    "S_GET_PVP_SKILL_INFO_REQ\020\261T\022\036\n\031CS_GET_PV"
    "P_SKILL_INFO_RES\020\262T\022\035\n\030CS_UPGRADE_PVP_SK"
    "ILL_REQ\020\263T\022\035\n\030CS_UPGRADE_PVP_SKILL_RES\020\264"
    "T\022\033\n\026CS_ALLIANCE_APPLY_PUSH\020\225U\022\034\n\027CS_ALL"
    "IANCE_HANDLE_PUSH\020\226U\022\032\n\025CS_ALLIANCE_KICK"
    "_PUSH\020\253U\022\034\n\027CS_ALLIANCE_UPDATE_PUSH\020\254U\022$"
    "\n\037CS_ALLIANCE_MEMBERS_UPDATE_PUSH\020\261U\022\031\n\024"
    "CS_ALLIANCE_LOG_PUSH\020\262U\022#\n\036CS_SHARE_ROOM"
    "_TO_ALLIANCE_PUSH\020\263U\022*\n%CS_SHARE_ROOM_TO"
    "_ALLIANCE_STATUS_PUSH\020\264U\022\033\n\026CS_ALLIANCE_"
    "CREATE_REQ\020\227U\022\033\n\026CS_ALLIANCE_CREATE_RES\020"
    "\230U\022#\n\036CS_ALLIANCE_SEARCH_BY_NAME_REQ\020\231U\022"
    "#\n\036CS_ALLIANCE_SEARCH_BY_NAME_RES\020\232U\022\031\n\024"
    "CS_ALLIANCE_JOIN_REQ\020\233U\022\031\n\024CS_ALLIANCE_J"
    "OIN_RES\020\234U\022\031\n\024CS_ALLIANCE_QUIT_REQ\020\235U\022\031\n"
    "\024CS_ALLIANCE_QUIT_RES\020\236U\022\031\n\024CS_ALLIANCE_"
    "KICK_REQ\020\237U\022\031\n\024CS_ALLIANCE_KICK_RES\020\240U\022\037"
    "\n\032CS_ALLIANCE_CHG_MEMBER_REQ\020\241U\022\037\n\032CS_AL"
    "LIANCE_CHG_MEMBER_RES\020\242U\022\036\n\031CS_ALLIANCE_"
    "RECOMMEND_REQ\020\243U\022\036\n\031CS_ALLIANCE_RECOMMEN"
    "D_RES\020\244U\022\031\n\024CS_ALLIANCE_INFO_REQ\020\245U\022\031\n\024C"
    "S_ALLIANCE_INFO_RES\020\246U\022!\n\034CS_ALLIANCE_HA"
    "NDLE_APPLY_REQ\020\247U\022!\n\034CS_ALLIANCE_HANDLE_"
    "APPLY_RES\020\250U\022\035\n\030CS_ALLIANCE_CHG_INFO_REQ"
    "\020\251U\022\035\n\030CS_ALLIANCE_CHG_INFO_RES\020\252U\022\"\n\035CS"
    "_ALLIANCE_NAME_REPEATED_REQ\020\255U\022\"\n\035CS_ALL"
    "IANCE_NAME_REPEATED_RES\020\256U\022\030\n\023CS_ALLIANC"
    "E_LOG_REQ\020\257U\022\030\n\023CS_ALLIANCE_LOG_RES\020\260U\022#"
    "\n\036CS_GET_ALLIANCE_ROOM_SHARE_REQ\020\265U\022#\n\036C"
    "S_GET_ALLIANCE_ROOM_SHARE_RES\020\266U\022\024\n\017CS_S"
    "HOP_BUY_REQ\020\335V\022\024\n\017CS_SHOP_BUY_RES\020\336V\022\034\n\027"
    "CS_GET_BUY_DENFENCE_REQ\020\337V\022\034\n\027CS_GET_BUY"
    "_DENFENCE_RES\020\340V\022\027\n\022CS_SHOPPVP_BUY_REQ\020\343"
    "V\022\027\n\022CS_SHOPPVP_BUY_RES\020\344V\022\024\n\017CS_SHOPPIN"
    "G_REQ\020\345V\022\024\n\017CS_SHOPPING_RES\020\346V\022\033\n\026CS_SHO"
    "P_GET_PANELS_REQ\020\347V\022\033\n\026CS_SHOP_GET_PANEL"
    "S_RES\020\350V\022\036\n\031CS_SHOP_REFRESH_CARDS_REQ\020\351V"
    "\022\036\n\031CS_SHOP_REFRESH_CARDS_RES\020\352V\022\034\n\027CS_S"
    "ET_DEFENCE_INFO_REQ\020\301W\022\034\n\027CS_SET_DEFENCE"
    "_INFO_RES\020\302W\022\037\n\032CS_GUIDANCEMATCHTARGET_R"
    "EQ\020\245X\022\037\n\032CS_GUIDANCEMATCHTARGET_RES\020\246X\022\027"
    "\n\022CS_MATCHTARGET_REQ\020\247X\022\027\n\022CS_MATCHTARGE"
    "T_RES\020\250X\022\032\n\025CS_SET_GUIDANCEID_REQ\020\251X\022\032\n\025"
    "CS_SET_GUIDANCEID_RES\020\252X\022\032\n\025CS_GET_GUIDA"
    "NCEID_REQ\020\253X\022\032\n\025CS_GET_GUIDANCEID_RES\020\254X"
    "\022\025\n\020CS_MATCH_PVP_REQ\020\211Y\022\025\n\020CS_MATCH_PVP_"
    "RES\020\212Y\022\033\n\026CS_START_PVP_FIGHT_REQ\020\213Y\022\033\n\026C"
    "S_START_PVP_FIGHT_RES\020\214Y\022\025\n\020CS_READY_PVP"
    "_REQ\020\215Y\022\025\n\020CS_READY_PVP_RES\020\216Y\022\034\n\027CS_QUE"
    "RY_PVP_STATUS_REQ\020\217Y\022\034\n\027CS_QUERY_PVP_STA"
    "TUS_RES\020\220Y\022\023\n\016CS_CMD_PVP_REQ\020\221Y\022\023\n\016CS_CM"
    "D_PVP_RES\020\222Y\022\023\n\016CS_PVP_END_REQ\020\223Y\022\023\n\016CS_"
    "PVP_END_RES\020\224Y\022\025\n\020CS_GET_FRAME_REQ\020\225Y\022\025\n"
    "\020CS_GET_FRAME_RES\020\226Y\022\030\n\023CS_CANCEL_MATCH_"
    "REQ\020\227Y\022\030\n\023CS_CANCEL_MATCH_RES\020\230Y\022\026\n\021CS_M"
    "ATCH_PVP_PUSH\020\234Y\022\026\n\021CS_READY_PVP_PUSH\020\235Y"
    "\022\033\n\026CS_NOTIFY_CLIENT_REPLY\020\236Y\022\037\n\032CS_PVP_"
    "GET_PLAYER_DATA_REQ\020\241Y\022\037\n\032CS_PVP_GET_PLA"
    "YER_DATA_RES\020\242Y\022 \n\033CS_PULL_PVP_POINTS_LI"
    "ST_REQ\020\243Y\022 \n\033CS_PULL_PVP_POINTS_LIST_RES"
    "\020\244Y\022!\n\034CS_PULL_WIN_PERCENT_LIST_REQ\020\245Y\022!"
    "\n\034CS_PULL_WIN_PERCENT_LIST_RES\020\246Y\022 \n\033CS_"
    "PULL_WIN_STREAK_LIST_REQ\020\247Y\022 \n\033CS_PULL_W"
    "IN_STREAK_LIST_RES\020\250Y\022#\n\036CS_GET_TO_PLAYE"
    "R_LOAD_PROC_REQ\020\251Y\022#\n\036CS_GET_TO_PLAYER_L"
    "OAD_PROC_RES\020\252Y\022\037\n\032CS_GET_PVP_BATTLE_INF"
    "O_REQ\020\253Y\022\037\n\032CS_GET_PVP_BATTLE_INFO_RES\020\254"
    "Y\022\035\n\030CS_GET_PVP_DOWN_ADDR_REQ\020\255Y\022\035\n\030CS_G"
    "ET_PVP_DOWN_ADDR_RES\020\256Y\022\"\n\035CS_PVP_BATTLE"
    "_REPORT_LIST_REQ\020\257Y\022\"\n\035CS_PVP_BATTLE_REP"
    "ORT_LIST_RES\020\260Y\022$\n\037CS_PVP_BATTLE_REPORT_"
    "DETAIL_REQ\020\261Y\022$\n\037CS_PVP_BATTLE_REPORT_DE"
    "TAIL_RES\020\262Y\022#\n\036CS_SET_SHARE_BATTLE_REPOR"
    "T_REQ\020\263Y\022#\n\036CS_SET_SHARE_BATTLE_REPORT_R"
    "ES\020\264Y\022#\n\036CS_GET_SHARE_BATTLE_REPORT_REQ\020"
    "\265Y\022#\n\036CS_GET_SHARE_BATTLE_REPORT_RES\020\266Y\022"
    ",\n\'CS_GET_ALLIANCE_SHARE_BATTLE_REPORT_R"
    "EQ\020\267Y\022,\n\'CS_GET_ALLIANCE_SHARE_BATTLE_RE"
    "PORT_RES\020\270Y\022\"\n\035CS_SHARE_ROOM_TO_ALLIANCE"
    "_REQ\020\271Y\022\"\n\035CS_SHARE_ROOM_TO_ALLIANCE_RES"
    "\020\272Y\022\035\n\030CS_REPORT_FRAME_HASH_REQ\020\341Y\022\035\n\030CS"
    "_REPORT_FRAME_HASH_RES\020\342Y\022\033\n\026CS_REPORT_P"
    "VP_INFO_REQ\020\343Y\022\033\n\026CS_REPORT_PVP_INFO_RES"
    "\020\344Y\022\023\n\016CS_GVG_END_REQ\020\345Y\022\023\n\016CS_GVG_END_R"
    "ES\020\346Y\022\024\n\017CS_PVP_OPEN_REQ\020\347Y\022\024\n\017CS_PVP_OP"
    "EN_RES\020\350Y\022\033\n\026CS_PVP_REJECT_LAST_REQ\020\351Y\022\033"
    "\n\026CS_PVP_REJECT_LAST_RES\020\352Y\022\030\n\023CS_GET_PV"
    "P_COND_REQ\020\353Y\022\030\n\023CS_GET_PVP_COND_RES\020\354Y\022"
    "\032\n\025CS_GET_POWER_INFO_REQ\020\355Y\022\032\n\025CS_GET_PO"
    "WER_INFO_RES\020\356Y\022\025\n\020CS_BUY_POWER_REQ\020\357Y\022\025"
    "\n\020CS_BUY_POWER_RES\020\360Y\022\030\n\023CS_CHAT_STATUS_"
    "PUSH\020\321Z\022\020\n\013CS_MSG_PUSH\020\322Z\022\020\n\013CS_CHAT_REQ"
    "\020\323Z\022\020\n\013CS_CHAT_RES\020\324Z\022\025\n\020CS_PULL_CHAT_RE"
    "Q\020\325Z\022\025\n\020CS_PULL_CHAT_RES\020\326Z\022\023\n\016CS_CHAT_N"
    "OTIFY\020\327Z\022\027\n\022GET_ROBOT_INFO_REQ\020\265[\022\027\n\022GET"
    "_ROBOT_INFO_RES\020\266[\022\027\n\022SET_ROBOT_INFO_REQ"
    "\020\267[\022\027\n\022SET_ROBOT_INFO_RES\020\270[\022\022\n\rGEN_ROBO"
    "T_REQ\020\271[\022\022\n\rGEN_ROBOT_RES\020\272[\022\021\n\014GM_DEBUG"
    "_REQ\020\273[\022\021\n\014GM_DEBUG_RES\020\274[\022%\n CS_GET_INH"
    "ABITANT_EVENT_LIST_REQ\020\231\\\022%\n CS_GET_INHA"
    "BITANT_EVENT_LIST_RES\020\232\\\022\030\n\023CS_ACTIVE_EV"
    "ENT_REQ\020\233\\\022\030\n\023CS_ACTIVE_EVENT_RES\020\234\\\022$\n\037"
    "CS_INHABITANT_MISSION_AWARD_REQ\020\235\\\022$\n\037CS"
    "_INHABITANT_MISSION_AWARD_RES\020\236\\\022\035\n\030CS_C"
    "HANGE_TO_MISSION_REQ\020\237\\\022\035\n\030CS_CHANGE_TO_"
    "MISSION_RES\020\240\\\022\026\n\021CS_GET_QAINFO_REQ\020\373\\\022\026"
    "\n\021CS_GET_QAINFO_RES\020\374\\\022\030\n\023CS_GET_VIP_INF"
    "O_REQ\020\375\\\022\030\n\023CS_GET_VIP_INFO_RES\020\376\\\022\031\n\024CS"
    "_GET_VIP_AWARD_REQ\020\377\\\022\031\n\024CS_GET_VIP_AWAR"
    "D_RES\020\200]\022\034\n\027CS_BUY_VIP_GIFT_BAG_REQ\020\201]\022\034"
    "\n\027CS_BUY_VIP_GIFT_BAG_RES\020\202]\022\030\n\023CS_GET_U"
    "DP_INFO_REQ\020\341]\022\030\n\023CS_GET_UDP_INFO_RES\020\342]"
    "\022\026\n\021CS_CREATE_KCP_REQ\020\343]\022\026\n\021CS_CREATE_KC"
    "P_RES\020\344]\022\025\n\020CS_LOGIN_UDP_REQ\020\345]\022\025\n\020CS_LO"
    "GIN_UDP_RES\020\346]\022\027\n\022CS_RELOGIN_UDP_REQ\020\347]\022"
    "\027\n\022CS_RELOGIN_UDP_RES\020\350]\022\031\n\024CS_UDP_HEART"
    "BEAT_REQ\020\351]\022\031\n\024CS_UDP_HEARTBEAT_RES\020\352]\022\026"
    "\n\021CS_LOGOUT_UDP_REQ\020\353]\022\026\n\021CS_LOGOUT_UDP_"
    "RES\020\354]\022\025\n\020CS_BASEINFO_PUSH\020\305^\022\023\n\016CS_STAT"
    "US_PUSH\020\306^\022\033\n\026CS_UPDATE_VERSION_PUSH\020\307^\022"
    "\033\n\026CS_ALLIANCE_SHARE_PUSH\020\310^\022\035\n\030CS_TEAM_"
    "PLAYER_INFO_PUSH\020\311^\022!\n\034CS_CHANGE_ROOM_PO"
    "SITION_PUSH\020\312^\022(\n#CS_REFUSE_CHANGE_ROOM_"
    "POSITION_PUSH\020\313^\022!\n\034CS_ALLIANCE_MEMBER_I"
    "NFO_PUSH\020\314^\022\027\n\022CS_GET_QA_INFO_REQ\020\251_\022\027\n\022"
    "CS_GET_QA_INFO_RES\020\252_\022\035\n\030CS_GET_ACTIVITY"
    "_INFO_REQ\020\253_\022\035\n\030CS_GET_ACTIVITY_INFO_RES"
    "\020\254_\022\036\n\031CS_GET_ACTIVITY_AWARD_REQ\020\255_\022\036\n\031C"
    "S_GET_ACTIVITY_AWARD_RES\020\256_\022\033\n\026CS_GET_NO"
    "TICE_INFO_REQ\020\257_\022\033\n\026CS_GET_NOTICE_INFO_R"
    "ES\020\260_\022\034\n\027CS_GET_TREASURE_BOX_REQ\020\215`\022\034\n\027C"
    "S_GET_TREASURE_BOX_RES\020\216`\022$\n\037CS_GET_COLL"
    "ECT_TREASURE_BOX_REQ\020\217`\022$\n\037CS_GET_COLLEC"
    "T_TREASURE_BOX_RES\020\220`\022\035\n\030CS_COLLECT_TOWE"
    "R_BOX_REQ\020\221`\022\035\n\030CS_COLLECT_TOWER_BOX_RES"
    "\020\222`\022\037\n\032CS_ALLIANCE_INVITE_PVP_REQ\020\361`\022\037\n\032"
    "CS_ALLIANCE_INVITE_PVP_RES\020\362`\022\031\n\024CS_CANC"
    "EL_INVITE_REQ\020\363`\022\031\n\024CS_CANCEL_INVITE_RES"
    "\020\364`\022\035\n\030CS_JOIN_ALLIANCE_PVP_REQ\020\365`\022\035\n\030CS"
    "_JOIN_ALLIANCE_PVP_RES\020\366`\022\031\n\024CS_ALLIANCE"
    "_PVP_PUSH\020\367`\022%\n CS_QUERY_ALLIANCE_PVP_ST"
    "ATUS_REQ\020\370`\022%\n CS_QUERY_ALLIANCE_PVP_STA"
    "TUS_RES\020\371`\022(\n#CS_CHANGE_ALLIANCE_GVG_POS"
    "ITION_REQ\020\372`\022(\n#CS_CHANGE_ALLIANCE_GVG_P"
    "OSITION_RES\020\373`\022\036\n\031CS_START_ALLIANCE_GVG_"
    "REQ\020\374`\022\036\n\031CS_START_ALLIANCE_GVG_RES\020\375`\022\034"
    "\n\027CS_GET_ALLIANCE_PVP_REQ\020\376`\022\034\n\027CS_GET_A"
    "LLIANCE_PVP_RES\020\377`\022\027\n\022CS_TEAM_INVITE_REQ"
    "\020\325a\022\027\n\022CS_TEAM_INVITE_RES\020\326a\022\027\n\022CS_TEAM_"
    "ACCEPT_REQ\020\327a\022\027\n\022CS_TEAM_ACCEPT_RES\020\330a\022\026"
    "\n\021CS_TEAM_QUERY_REQ\020\331a\022\026\n\021CS_TEAM_QUERY_"
    "RES\020\332a\022\035\n\030CS_TEAM_CANCEL_MATCH_REQ\020\333a\022\035\n"
    "\030CS_TEAM_CANCEL_MATCH_RES\020\334a\022\025\n\020CS_TEAM_"
    "QUIT_REQ\020\335a\022\025\n\020CS_TEAM_QUIT_RES\020\336a\022\"\n\035CS"
    "_GET_RELATE_PLAYER_STAT_REQ\020\337a\022\"\n\035CS_GET"
    "_RELATE_PLAYER_STAT_RES\020\340a\022\027\n\022CS_TEAM_RE"
    "FUSE_REQ\020\341a\022\027\n\022CS_TEAM_REFUSE_RES\020\342a\022\030\n\023"
    "CS_TEAM_INVITE_PUSH\020\350a\022\030\n\023CS_TEAM_REFUSE"
    "_PUSH\020\351a\022\031\n\024CS_MACHINE_START_REQ\020\353a\022\031\n\024C"
    "S_MACHINE_START_RES\020\354a\022\036\n\031CS_MACHINE_SET"
    "TLEMENT_REQ\020\355a\022\036\n\031CS_MACHINE_SETTLEMENT_"
    "RES\020\356a\022#\n\036CS_PVP_BATTLE_REPORT_QUERY_REQ"
    "\020\362a\022#\n\036CS_PVP_BATTLE_REPORT_QUERY_RES\020\363a"
    "\022\'\n\"CS_PVP_BATTLE_REPORT_DETERMINE_REQ\020\365"
    "a\022\'\n\"CS_PVP_BATTLE_REPORT_DETERMINE_RES\020"
    "\366a\022\027\n\022CS_TEAM_CREATE_REQ\020\367a\022\027\n\022CS_TEAM_C"
    "REATE_RES\020\370a\022\"\n\035CS_GET_RECENT_PLAYER_STA"
    "T_REQ\020\271b\022\"\n\035CS_GET_RECENT_PLAYER_STAT_RE"
    "S\020\272b\022 \n\033CS_CHANGE_ROOM_POSITION_REQ\020\273b\022 "
    "\n\033CS_CHANGE_ROOM_POSITION_RES\020\274b\022!\n\034CS_S"
    "ET_ROOM_READY_STATUS_REQ\020\275b\022!\n\034CS_SET_RO"
    "OM_READY_STATUS_RES\020\276b\022\034\n\027CS_KICK_ROOM_P"
    "LAYER_REQ\020\277b\022\034\n\027CS_KICK_ROOM_PLAYER_RES\020"
    "\300b\022\027\n\022CS_CANCEL_ROOM_REQ\020\301b\022\027\n\022CS_CANCEL"
    "_ROOM_RES\020\302b\022\032\n\025CS_ADD_ROOM_ROBOT_REQ\020\303b"
    "\022\032\n\025CS_ADD_ROOM_ROBOT_RES\020\304b\022\'\n\"CS_ACCEP"
    "T_CHANGE_ROOM_POSITION_REQ\020\305b\022\'\n\"CS_ACCE"
    "PT_CHANGE_ROOM_POSITION_RES\020\306b\022\'\n\"CS_REF"
    "USE_CHANGE_ROOM_POSITION_REQ\020\307b\022\'\n\"CS_RE"
    "FUSE_CHANGE_ROOM_POSITION_RES\020\310b\022 \n\033CS_G"
    "ET_ALL_MISSION_INFO_REQ\020\311e\022 \n\033CS_GET_ALL"
    "_MISSION_INFO_RES\020\312e\022\034\n\027CS_OPEN_MISSION_"
    "BOX_REQ\020\313e\022\034\n\027CS_OPEN_MISSION_BOX_RES\020\314e"
    "\022\031\n\024CS_MISSION_START_REQ\020\315e\022\031\n\024CS_MISSIO"
    "N_START_RES\020\316e\022\032\n\025CS_MISSION_REWARD_REQ\020"
    "\317e\022\032\n\025CS_MISSION_REWARD_RES\020\320e\022\035\n\030CS_MIS"
    "SION_CLEARANCE_REQ\020\321e\022\035\n\030CS_MISSION_CLEA"
    "RANCE_RES\020\322e\022 \n\033CS_GET_BATTLE_CARD_DATA_"
    "REQ\020\323e\022 \n\033CS_GET_BATTLE_CARD_DATA_RES\020\324e"
    "\022\033\n\026CS_GET_BATTLE_INFO_REQ\020\325e\022\033\n\026CS_GET_"
    "BATTLE_INFO_RES\020\326e\022!\n\034CS_MISSION_BATTLE_"
    "REWARD_REQ\020\327e\022!\n\034CS_MISSION_BATTLE_REWAR"
    "D_RES\020\330e\022 \n\033CS_DAY_ONLINE_GIFT_DATA_REQ\020"
    "\334e\022 \n\033CS_DAY_ONLINE_GIFT_DATA_RES\020\335e\022#\n\036"
    "CS_DAY_ONLINE_GIFT_RECEIVE_REQ\020\336e\022#\n\036CS_"
    "DAY_ONLINE_GIFT_RECEIVE_RES\020\337e\022\035\n\030CS_REP"
    "ORT_ACCUSATION_REQ\020\347e\022\035\n\030CS_REPORT_ACCUS"
    "ATION_RES\020\350e\022\034\n\027CS_PULL_FOLLOW_LIST_REQ\020"
    "\351e\022\034\n\027CS_PULL_FOLLOW_LIST_RES\020\352e\022\032\n\025CS_P"
    "ULL_FANS_LIST_REQ\020\353e\022\032\n\025CS_PULL_FANS_LIS"
    "T_RES\020\354e\022\033\n\026CS_PULL_BLACK_LIST_REQ\020\355e\022\033\n"
    "\026CS_PULL_BLACK_LIST_RES\020\356e\022\027\n\022CS_FIND_PL"
    "AYER_REQ\020\357e\022\027\n\022CS_FIND_PLAYER_RES\020\360e\022\034\n\027"
    "CS_FIND_LIST_PLAYER_REQ\020\361e\022\034\n\027CS_FIND_LI"
    "ST_PLAYER_RES\020\362e\022\036\n\031CS_DELETE_LIST_PLAYE"
    "R_REQ\020\363e\022\036\n\031CS_DELETE_LIST_PLAYER_RES\020\364e"
    "\022\036\n\031CS_ADD_PLAYER_BY_TYPE_REQ\020\365e\022\036\n\031CS_A"
    "DD_PLAYER_BY_TYPE_RES\020\366e\022\027\n\022CS_NOTICE_NE"
    "W_FANS\020\367e\022\034\n\027CS_PULL_FRIEND_BASE_REQ\020\370e\022"
    "\034\n\027CS_PULL_FRIEND_BASE_RES\020\371e\022\027\n\022CS_FRIE"
    "ND_CHAT_REQ\020\372e\022\027\n\022CS_FRIEND_CHAT_RES\020\373e\022"
    "\032\n\025CS_FRIEND_CHAT_NOTICE\020\374e\022!\n\034CS_PULL_F"
    "RIEND_CHAT_LIST_REQ\020\375e\022!\n\034CS_PULL_FRIEND"
    "_CHAT_LIST_RES\020\376e\022&\n!CS_PULL_FOLLOW_LIST"
    "_FOR_OTHER_REQ\020\377e\022&\n!CS_PULL_FOLLOW_LIST"
    "_FOR_OTHER_RES\020\200f\022\033\n\026CS_NOTICE_BE_ADD_BL"
    "ACK\020\201f\022\031\n\024CS_GET_MAIL_LIST_REQ\020\255f\022\031\n\024CS_"
    "GET_MAIL_LIST_RES\020\256f\022\025\n\020CS_VIEW_MAIL_REQ"
    "\020\257f\022\025\n\020CS_VIEW_MAIL_RES\020\260f\022\025\n\020CS_SEND_MA"
    "IL_REQ\020\261f\022\025\n\020CS_SEND_MAIL_RES\020\262f\022\024\n\017CS_D"
    "EL_MAIL_REQ\020\263f\022\024\n\017CS_DEL_MAIL_RES\020\264f\022\033\n\026"
    "CS_GET_MAIL_ATTACH_REQ\020\265f\022\033\n\026CS_GET_MAIL"
    "_ATTACH_RES\020\266f\022\023\n\016CS_MAIL_NOTIFY\020\267f\022\"\n\035C"
    "S_FULL_SERVICE_MAIL_TEST_REQ\020\270f\022\"\n\035CS_FU"
    "LL_SERVICE_MAIL_TEST_RES\020\271f\022\035\n\030CS_GET_AL"
    "L_RUNE_INFO_REQ\020\221g\022\035\n\030CS_GET_ALL_RUNE_IN"
    "FO_RES\020\222g\022!\n\034CS_CHANGE_RUNE_PAGE_INFO_RE"
    "Q\020\223g\022!\n\034CS_CHANGE_RUNE_PAGE_INFO_RES\020\224g\022"
    "!\n\034CS_CHANGE_RUNE_PAGE_NAME_REQ\020\225g\022!\n\034CS"
    "_CHANGE_RUNE_PAGE_NAME_RES\020\226g\022\034\n\027CS_UNLO"
    "CK_RUNE_PAGE_REQ\020\227g\022\034\n\027CS_UNLOCK_RUNE_PA"
    "GE_RES\020\230g\022 \n\033CS_SEE_PLAYER_BASE_INFO_REQ"
    "\020\365g\022 \n\033CS_SEE_PLAYER_BASE_INFO_RES\020\366g\022\035\n"
    "\030CS_PVP_CREDIT_RECORD_REQ\020\376g\022\035\n\030CS_PVP_C"
    "REDIT_RECORD_RES\020\377g\022\037\n\032CS_PVP_NOTICE_CRE"
    "DIT_ALTER\020\200h\022\025\n\020CS_WONPRAISE_REQ\020\211h\022\025\n\020C"
    "S_WONPRAISE_RES\020\212h\022\030\n\023CS_WONPRAISE_NOTIF"
    "Y\020\213h\022\035\n\030CS_GET_TRAINING_INFO_REQ\020\214h\022\035\n\030C"
    "S_GET_TRAINING_INFO_RES\020\215h\022\032\n\025CS_TRAININ"
    "G_START_REQ\020\216h\022\032\n\025CS_TRAINING_START_RES\020"
    "\217h\022\030\n\023CS_TRAINING_WIN_REQ\020\220h\022\030\n\023CS_TRAIN"
    "ING_WIN_RES\020\221h\022 \n\033CS_CHANGE_PVE_HARD_TYP"
    "E_REQ\020\235h\022 \n\033CS_CHANGE_PVE_HARD_TYPE_RES\020"
    "\236h*I\n\017EnmCompressType\022\032\n\026ENM_COMPRESS_TY"
    "PE_NONE\020\000\022\032\n\026ENM_COMPRESS_TYPE_ZLIB\020\001*G\n"
    "\016EnmEncryptType\022\031\n\025ENM_ENCRYPT_TYPE_NONE"
    "\020\000\022\032\n\026ENM_ENCRYPT_TYPE_XXTEA\020\001*C\n\017EnmGam"
    "eItemType\022\r\n\010CURRENCY\020\351\007\022\n\n\005CORPS\020\352\007\022\010\n\003"
    "EXP\020\353\007\022\013\n\006INHABY\020\354\007*:\n\017EnmCurrencyType\022\010"
    "\n\004GOLD\020e\022\013\n\007DIAMOND\020f\022\007\n\003RMB\020g\022\007\n\003USD\020h*"
    "\026\n\nEnmExpType\022\010\n\004EXPE\020c*\035\n\rEnmInhabyType"
    "\022\014\n\010INHABY_1\020e*\374\025\n\014EnmCorpsType\022\010\n\004NONE\020"
    "\000\022\013\n\007SOLDIER\020e\022\033\n\027BUILDING_ATTACK_SOLDIE"
    "R\020f\022\r\n\010BOMB_MAN\020\205\002\022\021\n\014SIEGE_ENGINE\020\207\002\022\014\n"
    "\007BARRACK\020\210\002\022\r\n\010PVPTOWER\020\213\002\022\016\n\tPVPTOWER3\020"
    "\217\002\022\021\n\014MISSILETOWER\020\215\002\022\017\n\nPRISMTOWER\020\216\002\022\021"
    "\n\014FLYERBARRACK\020\220\002\022\014\n\007PVEBASE\020\221\002\022\014\n\007SANDB"
    "AG\020\222\002\022\020\n\013PVE_SANDBAG\020\223\002\022\t\n\004BOMB\020\261\002\022\013\n\006GE"
    "YSER\020\262\002\022\017\n\nDALLE_TRAP\020\266\002\022\n\n\005TESLA\020\271\002\022\013\n\006"
    "TURRET\020\257\002\022\022\n\rMIDDLE_TURRET\020\300\002\022\017\n\nBIG_TUR"
    "RET\020\301\002\022\t\n\004TANK\020\255\002\022\020\n\013MIDDLE_TANK\020\302\002\022\r\n\010B"
    "IG_TANK\020\303\002\022\n\n\005CANON\020\260\002\022\021\n\014MIDDLE_CANON\020\304"
    "\002\022\016\n\tBIG_CANON\020\305\002\022\017\n\nAPOCALYPSE\020\306\002\022\013\n\006BU"
    "NKER\020\256\002\022\013\n\006SNIPER\020\263\002\022\022\n\rMIDDLE_SNIPER\020\340\002"
    "\022\017\n\nBIG_SNIPER\020\341\002\022\013\n\006RUCHER\020\264\002\022\021\n\014MIDDLE"
    "_RUCHE\020\336\002\022\016\n\tBIG_RUCHE\020\337\002\022\013\n\006TURTLE\020\267\002\022\022"
    "\n\rMIDDLE_TURTLE\020\342\002\022\017\n\nBIG_TURTLE\020\343\002\022\r\n\010R"
    "OTOTANK\020\270\002\022\024\n\017MIDDLE_ROTOTANK\020\344\002\022\021\n\014BIG_"
    "ROTOTANK\020\345\002\022\010\n\003VAN\020\272\002\022\017\n\nMIDDLE_VAN\020\346\002\022\014"
    "\n\007BIG_VAN\020\347\002\022\017\n\nHELICOPTER\020\274\002\022\n\n\005GUARD\020\273"
    "\002\022\013\n\006TRACER\020\275\002\022\023\n\016BUNKER_SOLDIER\020\276\002\022\017\n\nH"
    "EADQUATER\020\221\003\022\020\n\013CRYSTAL_Big\020\222\003\022\022\n\rCRYSTA"
    "L_Small\020\223\003\022\t\n\004BOSS\020\331\004\022\020\n\013BOSSLootBox\020\332\004\022"
    "\032\n\025MERCENARY_VERSION_MIN\020\275\005\022\037\n\032MERCENARY"
    "_VERSION1_SOLDIER\020\310\005\022!\n\034MERCENARY_VERSIO"
    "N1_CIRCELAOE\020\311\005\022!\n\034MERCENARY_VERSION1_SE"
    "CTORAOE\020\312\005\022\037\n\032MERCENARY_VERSION1_GATLING"
    "\020\313\005\022\036\n\031MERCENARY_VERSION1_SNIPER\020\314\005\022\037\n\032M"
    "ERCENARY_VERSION2_LINEAOE\020\316\005\022\036\n\031MERCENAR"
    "Y_VERSION2_MISSLE\020\317\005\022\035\n\030MERCENARY_VERSIO"
    "N3_SNEER\020\321\005\022\"\n\035MERCENARY_VERSION3_FIVEBU"
    "LLET\020\322\005\022\036\n\031MERCENARY_VERSION3_MASTER\020\323\005\022"
    "#\n\036MERCENARY_VERSION4_FLYER_DANTI\020\324\005\022\034\n\027"
    "MERCENARY_VERSION4_DRUM\020\325\005\022\'\n\"MERCENARY_"
    "VERSION4_FLYER_CIRCLEAOE\020\326\005\022\'\n\"MERCENARY"
    "_VERSION4_AGAINSTBUILDING\020\327\005\022\"\n\035MERCENAR"
    "Y_VERSION4_ENERGYBUFF\020\330\005\022 \n\033MERCENARY_VE"
    "RSION5_ENGINEER\020\331\005\022!\n\034MERCENARY_VERSION5"
    "_COMMANDER\020\332\005\022\036\n\031MERCENARY_VERSION5_DOCT"
    "OR\020\333\005\022\"\n\035MERCENARY_VERSION6_LIFESHIELD\020\334"
    "\005\022\037\n\032MERCENARY_VERSION6_FIREMAN\020\335\005\022\036\n\031ME"
    "RCENARY_VERSION6_ICEMAN\020\336\005\022 \n\033MERCENARY_"
    "VERSION6_JIATELIN\020\337\005\022\035\n\030MERCENARY_VERSIO"
    "N6_TIEJU\020\340\005\022#\n\036MERCENARY_VERSION7_SPEARH"
    "OLDER\020\341\005\022#\n\036MERCENARY_VERSION7_BOMBTHROW"
    "ER\020\342\005\022!\n\034MERCENARY_VERSION7_AXEHOLDER\020\343\005"
    "\022!\n\034MERCENARY_VERSION7_SHOCKWAVE\020\344\005\022\"\n\035M"
    "ERCENARY_VERSION7_DOGTRAINER\020\346\005\022#\n\036MERCE"
    "NARY_VERSION7_ANTIRIOTMAN\020\347\005\022\"\n\035MERCENAR"
    "Y_VERSIONHERO_SOLDIER\020\356\005\022!\n\034MERCENARY_VE"
    "RSIONHERO_SNIPER\020\357\005\022\037\n\032MERCENARY_VERSION"
    "HERO_BOMB\020\360\005\022\"\n\035MERCENARY_VERSIONHERO_FI"
    "REMAN\020\361\005\022!\n\034MERCENARY_VERSIONHERO_GATLIN"
    "\020\362\005\022&\n!MERCENARY_VERSIONHERO_ANTIRIOTMAN"
    "\020\363\005\022\033\n\026MERCENARY_VERSION7_DOG\020\345\005\022)\n$MERC"
    "ENARY_VERSIONHERO_SUMMON_SKYBOOM\020\364\005\022\"\n\035M"
    "ERCENARY_VERSIONHERO_NONAME1\020\365\005\022\"\n\035MERCE"
    "NARY_VERSIONHERO_NONAME2\020\366\005\022\"\n\035MERCENARY"
    "_VERSIONHERO_NONAME3\020\367\005\022\"\n\035MERCENARY_VER"
    "SIONHERO_NONAME4\020\370\005\022\"\n\035MERCENARY_VERSION"
    "HERO_NONAME5\020\371\005\022\"\n\035MERCENARY_VERSIONHERO"
    "_NONAME6\020\372\005\022\036\n\031MERCENARY_VERSIONHERO_HQS"
    "\020\373\005\022!\n\034MERCENARY_VERSIONHERO_TOTEST\020\236\006\022\032"
    "\n\025MERCENARY_VERSION_MAX\020\237\006\022\r\n\010HERO_MIN\020\240"
    "\006\022\017\n\nHERO_MODEL\020\241\006\022\024\n\017HERO_DOGTRAINER\020\242\006"
    "\022\023\n\016HERO_COMMANDER\020\243\006\022\021\n\014HERO_TRAPMAN\020\244\006"
    "\022\026\n\021HERO_SHIELDGUNMAN\020\245\006\022\021\n\014HERO_HORNMAN"
    "\020\246\006\022\021\n\014HERO_REQIQIU\020\247\006\022\022\n\rHERO_SEXAGENT\020"
    "\250\006\022\021\n\014HERO_NONAME1\020\251\006\022\021\n\014HERO_NONAME2\020\252\006"
    "\022\021\n\014HERO_NONAME3\020\253\006\022\021\n\014HERO_NONAME4\020\254\006\022\016"
    "\n\tHERO_CFDZ\020\255\006\022\016\n\tHERO_HQDZ\020\256\006\022\r\n\010HERO_M"
    "AX\020\203\007\022\026\n\021PVE_BOSS_WAR_BASS\020\205\007*\366\005\n\rEnmCor"
    "psGroup\022\007\n\003ALL\020e\022\021\n\rSINGLE_DAMAGE\020f\022\016\n\nA"
    "OE_DAMAGE\020g\022\013\n\007SPECIAL\020h\022\t\n\005FLYER\020i\022\013\n\007G"
    "ROUDER\020j\022\016\n\nANTI_FLYER\020k\022\t\n\005TOWER\020l\022\017\n\013S"
    "UMMON_CORP\020m\022\n\n\006FODDER\020n\022\t\n\005TAUNT\020o\022\021\n\014D"
    "EFENSE_CORP\020\311\001\022\020\n\013TURRET_CORP\020\313\001\022\017\n\nCANO"
    "N_CORP\020\314\001\022\016\n\tTANK_CORP\020\315\001\022\020\n\013SNIPER_CORP"
    "\020\316\001\022\024\n\017HELICOPTER_CORP\020\317\001\022\020\n\013TURTLE_CORP"
    "\020\320\001\022\022\n\rROTOTANK_CORP\020\321\001\022\r\n\010VAN_CORP\020\322\001\022\024"
    "\n\017APOCALYPSE_CORP\020\323\001\022\017\n\nRUCHE_CORP\020\324\001\022\023\n"
    "\016ALL_TOWER_CORP\020\325\001\022\022\n\rALL_TANK_CORP\020\326\001\022\022"
    "\n\rPVP_TANK_CORP\020\327\001\022\016\n\tMINE_CORP\020\255\002\022\020\n\013GE"
    "YSER_CORP\020\256\002\022\023\n\016DALLETRAP_CROP\020\257\002\022\017\n\nTES"
    "LA_CORP\020\260\002\022\022\n\rBOMB_MAN_CORP\020\221\003\022\016\n\tBOSS_C"
    "ORP\020\365\003\022\020\n\013HUMMAN_CORP\020\331\004\022\021\n\014MACHINE_CORP"
    "\020\332\004\022\020\n\013ORCISH_CORP\020\333\004\022\020\n\013WILD_ANIMAL\020\334\004\022"
    "\025\n\020SNIPER_MERCENARY\020\275\005\022\023\n\016BOMB_MERCENARY"
    "\020\276\005\022\025\n\020CHARGE_MERCENARY\020\277\005\022\017\n\nAI_SOLDIER"
    "\020\300\005\022\024\n\017SUPPORT_SOLDIER\020\301\005\022\033\n\026HERO_VERSIO"
    "N_MERCENARY\020\302\005\022\016\n\tHERO_CORP\020\241\006*E\n\020EnmMap"
    "SignalType\022\n\n\006ATTACK\020\001\022\014\n\010FALLBACK\020\002\022\013\n\007"
    "SENDTXT\020\003\022\n\n\006GATHER\020\004*V\n\rEnmStatusType\022\027"
    "\n\023NewBuildingUnlocked\020\001\022\022\n\016QuestComplete"
    "t\020\002\022\030\n\024AchievementCompletet\020\003*\326\n\n\016EnmTas"
    "kMsgType\022\024\n\020Task_OccupyStore\020e\022\031\n\025Task_O"
    "ccupyBaseCenter\020f\022\033\n\026Task_DestroyBattleU"
    "nit\020\311\001\022\030\n\023Task_DestroySoldier\020\317\001\022\036\n\031Task"
    "_DestroySoldierNormol\020\320\001\022\037\n\032Task_Destroy"
    "SoldierCaptial\020\321\001\022\025\n\020Task_TriggerMine\020\326\001"
    "\022\027\n\022Task_TriggerGeyser\020\327\001\022\032\n\025Task_Trigge"
    "rDalleTrap\020\330\001\022\027\n\022Task_CallMercenary\020\255\002\022\025"
    "\n\020Task_AttackEnemy\020\221\003\022\021\n\014Task_GameWin\020\222\003"
    "\022\025\n\020Task_PillageGold\020\223\003\022\025\n\020Task_CollectG"
    "ole\020\224\003\022\023\n\016Task_GainGrade\020\225\003\022\026\n\021Task_Stud"
    "yTechEnd\020\226\003\022\034\n\027Task_UpgradeBuildingEnd\020\227"
    "\003\022\022\n\rTask_CostGold\020\365\003\022\025\n\020Task_CostDiamon"
    "d\020\366\003\022\026\n\021Task_FactoryRapid\020\331\004\022\027\n\022Task_bar"
    "racksRapid\020\332\004\022\026\n\021Task_PillageSteel\020\275\005\022\026\n"
    "\021Task_PillageStone\020\276\005\022\030\n\023Task_collection"
    "Gold\020\277\005\022\031\n\024Task_collectionSteel\020\300\005\022\031\n\024Ta"
    "sk_collectionStone\020\301\005\022\035\n\030Task_collection"
    "GoldCount\020\302\005\022\036\n\031Task_collectionSteelCoun"
    "t\020\303\005\022\036\n\031Task_collectionStoneCount\020\304\005\022\027\n\022"
    "Task_GainDeadGrade\020\305\005\022\027\n\022Task_GainTimeGr"
    "ade\020\306\005\022\032\n\025Task_GainCaptureGrade\020\307\005\022\031\n\024Ta"
    "sk_GainCommboGrade\020\310\005\022\024\n\017Task_ViewReplay"
    "\020\311\005\022\031\n\024Task_ViewCreationMap\020\312\005\022\027\n\022Task_R"
    "evengeAttack\020\313\005\022\023\n\016Task_CostSteel\020\314\005\022\023\n\016"
    "Task_CostStone\020\315\005\022\023\n\016Task_1V1Attack\020\320\005\022\020"
    "\n\013Task_1V1Win\020\321\005\022\032\n\025Task_1V1WinContinuou"
    "s\020\322\005\022\024\n\017Task_RevengeWin\020\323\005\022\027\n\022Task_1V1Br"
    "eakCanno\020\324\005\022\024\n\017Task_PutDefence\020\325\005\022\023\n\016Tas"
    "k_3v3Attack\020\356\005\022\026\n\021Task_3v3AttackWin\020\357\005\022\027"
    "\n\022Task_3v3KillPeople\020\360\005\022\027\n\022Task_3v3Break"
    "Canno\020\361\005\022\027\n\022Task_3v3KillPlayer\020\362\005\022\030\n\023Tas"
    "k_3v3UseBigSkill\020\363\005\022\036\n\031Task_3v3SummonPeo"
    "pleCount\020\364\005\022\034\n\027Task_PVESingleLevelPass\020\241"
    "\006\022#\n\036Task_PVEAttackDefenseLevelPass\020\242\006*w"
    "\n\021EnmAllianceMember\022 \n\034ENM_ALLIANCE_MEMB"
    "ER_ORDINARY\020\001\022\035\n\031ENM_ALLIANCE_MEMBER_CHI"
    "EF\020\002\022!\n\035ENM_ALLIANCE_MEMBER_PRESIDENT\020\003*"
    "z\n\023EnmAllianceJoinCond\022\036\n\032ENM_ALLIANCE_J"
    "OIN_COND_CAN\020\001\022 \n\034ENM_ALLIANCE_JOIN_COND"
    "_APPLY\020\002\022!\n\035ENM_ALLIANCE_JOIN_COND_FORBI"
    "D\020\003*^\n\024EnmAllianceJoinReply\022#\n\037ENM_ALLIA"
    "NCE_JOIN_REPLY_SUCCESS\020\001\022!\n\035ENM_ALLIANCE"
    "_JOIN_REPLY_APPLY\020\002**\n\014EnmSkillType\022\014\n\010U"
    "LTIMATE\020\001\022\014\n\010SUBSKILL\020\002*\241\001\n\016EnmChatChann"
    "el\022\032\n\026ENM_CHAT_CHANNEL_WORLD\020\001\022\035\n\031ENM_CH"
    "AT_CHANNEL_ALLIANCE\020\002\022\034\n\030ENM_CHAT_CHANNE"
    "L_PRIVATE\020\003\022\031\n\025ENM_CHAT_CHANNEL_ROOM\020\004\022\033"
    "\n\027ENM_CHAT_CHANNEL_BATTLE\020\005*\304\001\n\014EnmPVPSt"
    "atus\022\027\n\023ENM_PVP_STATUS_INIT\020\000\022\027\n\023ENM_PVP"
    "_STATUS_NONE\020\001\022\027\n\023ENM_PVP_STATUS_TEAM\020\002\022"
    "\030\n\024ENM_PVP_STATUS_MATCH\020\003\022\035\n\031ENM_PVP_STA"
    "TUS_WAIT_READY\020\004\022\030\n\024ENM_PVP_STATUS_FIGHT"
    "\020\005\022\026\n\022ENM_PVP_STATUS_END\020\006*E\n\017EnmServerS"
    "tatus\022\032\n\026ENM_STATUS_ON_MAINTAIN\020\001\022\026\n\022ENM"
    "_STATUS_ON_STOP\020\002*b\n\tEnmPVPNum\022\024\n\020ENM_PV"
    "P_NUM_NULL\020\000\022\023\n\017ENM_PVP_NUM_ONE\020\001\022\023\n\017ENM"
    "_PVP_NUM_TWO\020\002\022\025\n\021ENM_PVP_NUM_THREE\020\003*X\n"
    "\014EnmPVPResult\022\026\n\022ENM_PVP_RESULT_WIN\020\001\022\027\n"
    "\023ENM_PVP_RESULT_LOSE\020\002\022\027\n\023ENM_PVP_RESULT"
    "_DRAW\020\003*P\n\nEnmPVPTeam\022\025\n\021ENM_PVP_TEAM_NO"
    "NE\020\000\022\024\n\020ENM_PVP_TEAM_RED\020\001\022\025\n\021ENM_PVP_TE"
    "AM_BLUE\020\002*=\n\tNetWorkSP\022\013\n\007TELECOM\020\001\022\n\n\006M"
    "OBILE\020\002\022\n\n\006UNICOM\020\003\022\013\n\007OTHERSP\020\024*P\n\016Batt"
    "leCardType\022\r\n\tCARD_NONE\020\000\022\r\n\tCARD_HERO\020\001"
    "\022\020\n\014CARD_SOLDIER\020\002\022\016\n\nCARD_SKILL\020\003*d\n\016Pr"
    "eWarCardType\022\031\n\025ENM_PRE_WAR_CARD_NULL\020\000\022"
    "\031\n\025ENM_PRE_WAR_CARD_HERO\020\001\022\034\n\030ENM_PRE_WA"
    "R_CARD_SOLDIER\020\002*\211\003\n\014EnmRobotType\022\027\n\023ENM"
    "_ROBOT_TYPE_NONE\020\000\022\031\n\025ENM_ROBOT_TYPE_PLA"
    "YER\020\001\022\027\n\023ENM_ROBOT_TYPE_EASY\020\n\022\030\n\024ENM_RO"
    "BOT_TYPE_LEVEL\020\013\022\032\n\026ENM_ROBOT_TYPE_TIMEO"
    "UT\020\014\022\031\n\025ENM_ROBOT_TYPE_NOVICE\020\r\022\037\n\033ENM_R"
    "OBOT_TYPE_INTERMEDIATE\020\016\022\031\n\025ENM_ROBOT_TY"
    "PE_SENIOR\020\017\022\031\n\025ENM_ROBOT_TYPE_HOSTED\020\020\022\""
    "\n\036ENM_ROBOT_TYPE_3V3_MATE_NEWBIE\020\021\022 \n\034EN"
    "M_ROBOT_TYPE_3V3_TO_NEWBIE\020\022\022\037\n\033ENM_ROBO"
    "T_TYPE_3V3_MATE_WIN\020\023\022\035\n\031ENM_ROBOT_TYPE_"
    "3V3_TO_WIN\020\024**\n\014EnmBoxStatus\022\013\n\007Locking\020"
    "\001\022\r\n\tUnlocking\020\002*<\n\rEnmBoxQuality\022\t\n\005Gre"
    "en\020\001\022\010\n\004Blue\020\002\022\n\n\006Purple\020\003\022\n\n\006Orange\020\004*G"
    "\n\nEnmPVPMode\022\020\n\014ENM_MODE_1V1\020\001\022\020\n\014ENM_MO"
    "DE_3V3\020\002\022\025\n\021ENM_MODE_1V1_TUTO\020\003*|\n\rEnmPl"
    "ayerStat\022\033\n\027ENM_PLAYER_STAT_OFFLINE\020\000\022\030\n"
    "\024ENM_PLAYER_STAT_GAME\020\001\022\030\n\024ENM_PLAYER_ST"
    "AT_TEAM\020\002\022\032\n\026ENM_PLAYER_STAT_ONLINE\020\003*`\n"
    "\016EnmPVEHardType\022\021\n\rENM_HARD_NONE\020\000\022\023\n\017EN"
    "M_HARD_NOVICE\020\001\022\023\n\017ENM_HARD_MIDDLE\020\002\022\021\n\r"
    "ENM_HARD_HIGH\020\003*\367\001\n\nEnmPVPType\022\024\n\020ENM_PV"
    "P_TYPE_GVG\020\001\022\025\n\021ENM_PVP_TYPE_TEAM\020\002\022\031\n\025E"
    "NM_PVP_TYPE_ROOM_3V3\020\003\022\030\n\024ENM_PVP_TYPE_P"
    "VE_3V3\020\004\022\024\n\020ENM_PVP_TYPE_PVP\020\005\022\030\n\024ENM_PV"
    "P_TYPE_PVE_1V1\020\006\022\031\n\025ENM_PVP_TYPE_ROOM_1V"
    "1\020\007\022\035\n\031ENM_PVP_TYPE_PVP_FRIENDLY\020\010\022\035\n\031EN"
    "M_PVP_TYPE_GVG_FRIENDLY\020\t*X\n\026EnmPvpBattl"
    "eReportType\022\023\n\017ENM_BATTLE_NULL\020\000\022\025\n\021ENM_"
    "BATTLE_REPORT\020\001\022\022\n\016ENM_WAIT_READY\020\002*Q\n\022E"
    "nmAllianceMemType\022\020\n\014ENM_AMT_INIT\020\001\022\022\n\016E"
    "NM_AMT_OFFICE\020\002\022\025\n\021ENM_AMT_PRESIDENT\020\003*\222"
    "\001\n\021EnmPrepareWarType\022\027\n\023ENM_PREPAREWAR_N"
    "ULL\020\000\022\026\n\022ENM_PREPAREWAR_PVP\020\001\022\026\n\022ENM_PRE"
    "PAREWAR_PVE\020\002\022\031\n\025ENM_PREPAREWAR_3V3PVP\020\003"
    "\022\031\n\025ENM_PREPAREWAR_3V3PVE\020\004*K\n\023EnmPrepar"
    "eWarStatus\022\031\n\025ENM_PREPAREWAR_PREWAR\020\001\022\031\n"
    "\025ENM_PREPAREWAR_WARING\020\002*{\n\016EnmMissionSt"
    "ar\022\031\n\025ENM_MISSION_STAR_ZERO\020\000\022\030\n\024ENM_MIS"
    "SION_STAR_ONE\020\001\022\030\n\024ENM_MISSION_STAR_TWO\020"
    "\002\022\032\n\026ENM_MISSION_STAR_THREE\020\003*\221\001\n\020EnmBat"
    "tleCardNum\022\034\n\030ENM_BATTLE_CARD_NUM_HERO\020\001"
    "\022\035\n\031ENM_BATTLE_CARD_NUM_SKILL\020\002\022\037\n\033ENM_B"
    "ATTLE_CARD_NUM_SOLDIER\020\003\022\037\n\033ENM_BATTLE_C"
    "ARD_DECK_BIGNUM\020\005*_\n\rEnmPVPMvpType\022\031\n\025EN"
    "M_PVP_MVP_TYPE_NONE\020\000\022\030\n\024ENM_PVP_MVP_TYP"
    "E_WIN\020\001\022\031\n\025ENM_PVP_MVP_TYPE_LOSE\020\002*\177\n\021En"
    "mFriendListType\022\023\n\017ENM_FRIEND_NULL\020\000\022\025\n\021"
    "ENM_FRIEND_FOLLOW\020\001\022\023\n\017ENM_FRIEND_FANS\020\002"
    "\022\024\n\020ENM_FRIEND_BLACK\020\003\022\023\n\017ENM_FRIEND_CHA"
    "T\020\004*A\n\013EnmMailType\022\030\n\024ENM_MAIL_TYPE_SYST"
    "EM\020\001\022\030\n\024ENM_MAIL_TYPE_FRIEND\020\002*J\n\016EnmMai"
    "lSubType\022\033\n\027ENM_MAIL_SUBTYPE_NOTICE\020\001\022\033\n"
    "\027ENM_MAIL_SUBTYPE_ATTACH\020\002*X\n\013EnmMailSta"
    "t\022\030\n\024ENM_MAIL_STAT_UNREAD\020\001\022\026\n\022ENM_MAIL_"
    "STAT_READ\020\002\022\027\n\023ENM_MAIL_STAT_UNGET\020\003*\200\001\n"
    "\017EnmRoomPosition\022\020\n\014ENM_ROOM_ONE\020\000\022\020\n\014EN"
    "M_ROOM_TWO\020\001\022\021\n\rENM_ROOM_TREE\020\002\022\021\n\rENM_R"
    "OOM_FOUR\020\003\022\021\n\rENM_ROOM_FIVE\020\004\022\020\n\014ENM_ROO"
    "M_SIX\020\005*e\n\rEnmInviteType\022\032\n\026ENM_INVITE_T"
    "YPE_FRIEND\020\001\022\034\n\030ENM_INVITE_TYPE_ALLIANCE"
    "\020\002\022\032\n\026ENM_INVITE_TYPE_RECENT\020\003*\241\002\n\022EnmCr"
    "editAlterType\022\031\n\025ENM_PVP_REPORT_HANGUP\020\001"
    "\022\027\n\023ENM_PVP_REPORT_FEED\020\002\022\033\n\027ENM_PVP_REP"
    "ORT_NEGATIVE\020\003\022\030\n\024ENM_PVP_REPORT_ABUSE\020\004"
    "\022\034\n\030ENM_PVP_REPORT_PERFORMER\020\005\022\030\n\024ENM_PV"
    "P_REPORT_ADDON\020\006\022\033\n\027ENM_PVP_SETTLEMENT_D"
    "UCT\020\n\022\032\n\026ENM_PVP_SETTLEMENT_ADD\020\013\022\032\n\026ENM"
    "_RELEASE_SUSPENSION\020\014\022\023\n\017ENM_PVE_1V1_ADD"
    "\020\r*\347\001\n\nEnmBoxType\022\025\n\021ENM_BOX_TYPE_FULL\020\000"
    "\022\026\n\022ENM_BOX_TYPE_GREEN\020\001\022\025\n\021ENM_BOX_TYPE"
    "_BLUE\020\002\022\027\n\023ENM_BOX_TYPE_PURPLE\020\003\022\027\n\023ENM_"
    "BOX_TYPE_ORANGE\020\004\022\026\n\022ENM_BOX_TYPE_LIMIT\020"
    "\005\022\033\n\027ENM_BOX_TYPE_REPUTATION\020\006\022\025\n\021ENM_BO"
    "X_TYPE_NONE\020\007\022\025\n\021ENM_BOX_TYPE_LOSE\020\010*I\n\016"
    "EnmPvpStatType\022\031\n\025ENM_PVP_STAT_TYPE_RTT\020"
    "\001\022\034\n\030ENM_PVP_STAT_TYPE_UPDATE\020\002*H\n\020EnmSy"
    "ncRedisData\022\033\n\027ENM_NOT_SYNC_REDIS_DATA\020\000"
    "\022\027\n\023ENM_SYNC_REDIS_DATA\020\001", 23705);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs_enum.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_5fenum_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_5fenum_2eproto {
  StaticDescriptorInitializer_cs_5fenum_2eproto() {
    protobuf_AddDesc_cs_5fenum_2eproto();
  }
} static_descriptor_initializer_cs_5fenum_2eproto_;
const ::google::protobuf::EnumDescriptor* EnmCmdID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmCmdID_descriptor_;
}
bool EnmCmdID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 10005:
    case 10006:
    case 10101:
    case 10102:
    case 10103:
    case 10104:
    case 10105:
    case 10106:
    case 10107:
    case 10108:
    case 10109:
    case 10110:
    case 10111:
    case 10112:
    case 10113:
    case 10114:
    case 10201:
    case 10202:
    case 10203:
    case 10204:
    case 10205:
    case 10206:
    case 10207:
    case 10208:
    case 10209:
    case 10210:
    case 10211:
    case 10212:
    case 10301:
    case 10302:
    case 10303:
    case 10304:
    case 10305:
    case 10306:
    case 10307:
    case 10308:
    case 10309:
    case 10310:
    case 10311:
    case 10312:
    case 10313:
    case 10314:
    case 10401:
    case 10402:
    case 10403:
    case 10404:
    case 10405:
    case 10406:
    case 10407:
    case 10408:
    case 10409:
    case 10410:
    case 10411:
    case 10412:
    case 10451:
    case 10452:
    case 10453:
    case 10454:
    case 10455:
    case 10456:
    case 10509:
    case 10510:
    case 10511:
    case 10512:
    case 10513:
    case 10514:
    case 10515:
    case 10516:
    case 10517:
    case 10518:
    case 10519:
    case 10520:
    case 10521:
    case 10522:
    case 10523:
    case 10524:
    case 10525:
    case 10526:
    case 10527:
    case 10528:
    case 10529:
    case 10530:
    case 10601:
    case 10602:
    case 10603:
    case 10604:
    case 10605:
    case 10606:
    case 10607:
    case 10608:
    case 10609:
    case 10610:
    case 10611:
    case 10612:
    case 10615:
    case 10616:
    case 10617:
    case 10618:
    case 10619:
    case 10620:
    case 10621:
    case 10622:
    case 10623:
    case 10624:
    case 10625:
    case 10626:
    case 10627:
    case 10628:
    case 10701:
    case 10702:
    case 10703:
    case 10704:
    case 10705:
    case 10706:
    case 10707:
    case 10708:
    case 10709:
    case 10710:
    case 10711:
    case 10712:
    case 10713:
    case 10714:
    case 10801:
    case 10802:
    case 10803:
    case 10804:
    case 10901:
    case 10902:
    case 10903:
    case 10904:
    case 10905:
    case 10906:
    case 10907:
    case 10908:
    case 10909:
    case 10910:
    case 10911:
    case 10912:
    case 10913:
    case 10914:
    case 10915:
    case 10916:
    case 10917:
    case 10918:
    case 10919:
    case 10920:
    case 10921:
    case 10922:
    case 10923:
    case 10924:
    case 10925:
    case 10926:
    case 10927:
    case 10928:
    case 10929:
    case 10930:
    case 10931:
    case 10932:
    case 10933:
    case 10934:
    case 11101:
    case 11102:
    case 11103:
    case 11104:
    case 11107:
    case 11108:
    case 11109:
    case 11110:
    case 11111:
    case 11112:
    case 11113:
    case 11114:
    case 11201:
    case 11202:
    case 11301:
    case 11302:
    case 11303:
    case 11304:
    case 11305:
    case 11306:
    case 11307:
    case 11308:
    case 11401:
    case 11402:
    case 11403:
    case 11404:
    case 11405:
    case 11406:
    case 11407:
    case 11408:
    case 11409:
    case 11410:
    case 11411:
    case 11412:
    case 11413:
    case 11414:
    case 11415:
    case 11416:
    case 11420:
    case 11421:
    case 11422:
    case 11425:
    case 11426:
    case 11427:
    case 11428:
    case 11429:
    case 11430:
    case 11431:
    case 11432:
    case 11433:
    case 11434:
    case 11435:
    case 11436:
    case 11437:
    case 11438:
    case 11439:
    case 11440:
    case 11441:
    case 11442:
    case 11443:
    case 11444:
    case 11445:
    case 11446:
    case 11447:
    case 11448:
    case 11449:
    case 11450:
    case 11489:
    case 11490:
    case 11491:
    case 11492:
    case 11493:
    case 11494:
    case 11495:
    case 11496:
    case 11497:
    case 11498:
    case 11499:
    case 11500:
    case 11501:
    case 11502:
    case 11503:
    case 11504:
    case 11601:
    case 11602:
    case 11603:
    case 11604:
    case 11605:
    case 11606:
    case 11607:
    case 11629:
    case 11630:
    case 11631:
    case 11632:
    case 11701:
    case 11702:
    case 11703:
    case 11704:
    case 11705:
    case 11706:
    case 11707:
    case 11708:
    case 11801:
    case 11802:
    case 11803:
    case 11804:
    case 11805:
    case 11806:
    case 11807:
    case 11808:
    case 11899:
    case 11900:
    case 11901:
    case 11902:
    case 11903:
    case 11904:
    case 11905:
    case 11906:
    case 12001:
    case 12002:
    case 12003:
    case 12004:
    case 12005:
    case 12006:
    case 12007:
    case 12008:
    case 12009:
    case 12010:
    case 12011:
    case 12012:
    case 12101:
    case 12102:
    case 12103:
    case 12104:
    case 12105:
    case 12106:
    case 12107:
    case 12108:
    case 12201:
    case 12202:
    case 12203:
    case 12204:
    case 12205:
    case 12206:
    case 12207:
    case 12208:
    case 12301:
    case 12302:
    case 12303:
    case 12304:
    case 12305:
    case 12306:
    case 12401:
    case 12402:
    case 12403:
    case 12404:
    case 12405:
    case 12406:
    case 12407:
    case 12408:
    case 12409:
    case 12410:
    case 12411:
    case 12412:
    case 12413:
    case 12414:
    case 12415:
    case 12501:
    case 12502:
    case 12503:
    case 12504:
    case 12505:
    case 12506:
    case 12507:
    case 12508:
    case 12509:
    case 12510:
    case 12511:
    case 12512:
    case 12513:
    case 12514:
    case 12520:
    case 12521:
    case 12523:
    case 12524:
    case 12525:
    case 12526:
    case 12530:
    case 12531:
    case 12533:
    case 12534:
    case 12535:
    case 12536:
    case 12601:
    case 12602:
    case 12603:
    case 12604:
    case 12605:
    case 12606:
    case 12607:
    case 12608:
    case 12609:
    case 12610:
    case 12611:
    case 12612:
    case 12613:
    case 12614:
    case 12615:
    case 12616:
    case 13001:
    case 13002:
    case 13003:
    case 13004:
    case 13005:
    case 13006:
    case 13007:
    case 13008:
    case 13009:
    case 13010:
    case 13011:
    case 13012:
    case 13013:
    case 13014:
    case 13015:
    case 13016:
    case 13020:
    case 13021:
    case 13022:
    case 13023:
    case 13031:
    case 13032:
    case 13033:
    case 13034:
    case 13035:
    case 13036:
    case 13037:
    case 13038:
    case 13039:
    case 13040:
    case 13041:
    case 13042:
    case 13043:
    case 13044:
    case 13045:
    case 13046:
    case 13047:
    case 13048:
    case 13049:
    case 13050:
    case 13051:
    case 13052:
    case 13053:
    case 13054:
    case 13055:
    case 13056:
    case 13057:
    case 13101:
    case 13102:
    case 13103:
    case 13104:
    case 13105:
    case 13106:
    case 13107:
    case 13108:
    case 13109:
    case 13110:
    case 13111:
    case 13112:
    case 13113:
    case 13201:
    case 13202:
    case 13203:
    case 13204:
    case 13205:
    case 13206:
    case 13207:
    case 13208:
    case 13301:
    case 13302:
    case 13310:
    case 13311:
    case 13312:
    case 13321:
    case 13322:
    case 13323:
    case 13324:
    case 13325:
    case 13326:
    case 13327:
    case 13328:
    case 13329:
    case 13341:
    case 13342:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmCompressType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmCompressType_descriptor_;
}
bool EnmCompressType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmEncryptType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmEncryptType_descriptor_;
}
bool EnmEncryptType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmGameItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmGameItemType_descriptor_;
}
bool EnmGameItemType_IsValid(int value) {
  switch(value) {
    case 1001:
    case 1002:
    case 1003:
    case 1004:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmCurrencyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmCurrencyType_descriptor_;
}
bool EnmCurrencyType_IsValid(int value) {
  switch(value) {
    case 101:
    case 102:
    case 103:
    case 104:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmExpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmExpType_descriptor_;
}
bool EnmExpType_IsValid(int value) {
  switch(value) {
    case 99:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmInhabyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmInhabyType_descriptor_;
}
bool EnmInhabyType_IsValid(int value) {
  switch(value) {
    case 101:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmCorpsType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmCorpsType_descriptor_;
}
bool EnmCorpsType_IsValid(int value) {
  switch(value) {
    case 0:
    case 101:
    case 102:
    case 261:
    case 263:
    case 264:
    case 267:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 350:
    case 351:
    case 352:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 401:
    case 402:
    case 403:
    case 601:
    case 602:
    case 701:
    case 712:
    case 713:
    case 714:
    case 715:
    case 716:
    case 718:
    case 719:
    case 721:
    case 722:
    case 723:
    case 724:
    case 725:
    case 726:
    case 727:
    case 728:
    case 729:
    case 730:
    case 731:
    case 732:
    case 733:
    case 734:
    case 735:
    case 736:
    case 737:
    case 738:
    case 739:
    case 740:
    case 741:
    case 742:
    case 743:
    case 750:
    case 751:
    case 752:
    case 753:
    case 754:
    case 755:
    case 756:
    case 757:
    case 758:
    case 759:
    case 760:
    case 761:
    case 762:
    case 763:
    case 798:
    case 799:
    case 800:
    case 801:
    case 802:
    case 803:
    case 804:
    case 805:
    case 806:
    case 807:
    case 808:
    case 809:
    case 810:
    case 811:
    case 812:
    case 813:
    case 814:
    case 899:
    case 901:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmCorpsGroup_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmCorpsGroup_descriptor_;
}
bool EnmCorpsGroup_IsValid(int value) {
  switch(value) {
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 201:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 301:
    case 302:
    case 303:
    case 304:
    case 401:
    case 501:
    case 601:
    case 602:
    case 603:
    case 604:
    case 701:
    case 702:
    case 703:
    case 704:
    case 705:
    case 706:
    case 801:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmMapSignalType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmMapSignalType_descriptor_;
}
bool EnmMapSignalType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmStatusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmStatusType_descriptor_;
}
bool EnmStatusType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmTaskMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmTaskMsgType_descriptor_;
}
bool EnmTaskMsgType_IsValid(int value) {
  switch(value) {
    case 101:
    case 102:
    case 201:
    case 207:
    case 208:
    case 209:
    case 214:
    case 215:
    case 216:
    case 301:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 501:
    case 502:
    case 601:
    case 602:
    case 701:
    case 702:
    case 703:
    case 704:
    case 705:
    case 706:
    case 707:
    case 708:
    case 709:
    case 710:
    case 711:
    case 712:
    case 713:
    case 714:
    case 715:
    case 716:
    case 717:
    case 720:
    case 721:
    case 722:
    case 723:
    case 724:
    case 725:
    case 750:
    case 751:
    case 752:
    case 753:
    case 754:
    case 755:
    case 756:
    case 801:
    case 802:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmAllianceMember_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmAllianceMember_descriptor_;
}
bool EnmAllianceMember_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmAllianceJoinCond_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmAllianceJoinCond_descriptor_;
}
bool EnmAllianceJoinCond_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmAllianceJoinReply_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmAllianceJoinReply_descriptor_;
}
bool EnmAllianceJoinReply_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmSkillType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmSkillType_descriptor_;
}
bool EnmSkillType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmChatChannel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmChatChannel_descriptor_;
}
bool EnmChatChannel_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmPVPStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmPVPStatus_descriptor_;
}
bool EnmPVPStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmServerStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmServerStatus_descriptor_;
}
bool EnmServerStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmPVPNum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmPVPNum_descriptor_;
}
bool EnmPVPNum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmPVPResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmPVPResult_descriptor_;
}
bool EnmPVPResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmPVPTeam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmPVPTeam_descriptor_;
}
bool EnmPVPTeam_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NetWorkSP_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetWorkSP_descriptor_;
}
bool NetWorkSP_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BattleCardType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleCardType_descriptor_;
}
bool BattleCardType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PreWarCardType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PreWarCardType_descriptor_;
}
bool PreWarCardType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmRobotType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmRobotType_descriptor_;
}
bool EnmRobotType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmBoxStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmBoxStatus_descriptor_;
}
bool EnmBoxStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmBoxQuality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmBoxQuality_descriptor_;
}
bool EnmBoxQuality_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmPVPMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmPVPMode_descriptor_;
}
bool EnmPVPMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmPlayerStat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmPlayerStat_descriptor_;
}
bool EnmPlayerStat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmPVEHardType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmPVEHardType_descriptor_;
}
bool EnmPVEHardType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmPVPType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmPVPType_descriptor_;
}
bool EnmPVPType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmPvpBattleReportType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmPvpBattleReportType_descriptor_;
}
bool EnmPvpBattleReportType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmAllianceMemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmAllianceMemType_descriptor_;
}
bool EnmAllianceMemType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmPrepareWarType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmPrepareWarType_descriptor_;
}
bool EnmPrepareWarType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmPrepareWarStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmPrepareWarStatus_descriptor_;
}
bool EnmPrepareWarStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmMissionStar_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmMissionStar_descriptor_;
}
bool EnmMissionStar_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmBattleCardNum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmBattleCardNum_descriptor_;
}
bool EnmBattleCardNum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmPVPMvpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmPVPMvpType_descriptor_;
}
bool EnmPVPMvpType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmFriendListType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmFriendListType_descriptor_;
}
bool EnmFriendListType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmMailType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmMailType_descriptor_;
}
bool EnmMailType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmMailSubType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmMailSubType_descriptor_;
}
bool EnmMailSubType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmMailStat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmMailStat_descriptor_;
}
bool EnmMailStat_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmRoomPosition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmRoomPosition_descriptor_;
}
bool EnmRoomPosition_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmInviteType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmInviteType_descriptor_;
}
bool EnmInviteType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmCreditAlterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmCreditAlterType_descriptor_;
}
bool EnmCreditAlterType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmBoxType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmBoxType_descriptor_;
}
bool EnmBoxType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmPvpStatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmPvpStatType_descriptor_;
}
bool EnmPvpStatType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnmSyncRedisData_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnmSyncRedisData_descriptor_;
}
bool EnmSyncRedisData_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cs

// @@protoc_insertion_point(global_scope)
