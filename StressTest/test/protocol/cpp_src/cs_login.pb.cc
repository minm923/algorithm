// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs_login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cs {

namespace {

const ::google::protobuf::Descriptor* DeviceDataType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceDataType_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSLoginRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSLoginRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSReloginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSReloginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSReloginRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSReloginRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSFinalizeaccountReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSFinalizeaccountReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSFinalizeaccountRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSFinalizeaccountRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetRandomNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetRandomNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetRandomNameRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetRandomNameRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSChangeNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSChangeNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSChangeNameRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSChangeNameRes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_5flogin_2eproto() {
  protobuf_AddDesc_cs_5flogin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs_login.proto");
  GOOGLE_CHECK(file != NULL);
  DeviceDataType_descriptor_ = file->message_type(0);
  static const int DeviceDataType_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDataType, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDataType, sessiondevice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDataType, imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDataType, ntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDataType, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDataType, memsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDataType, disp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDataType, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDataType, netsp_),
  };
  DeviceDataType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceDataType_descriptor_,
      DeviceDataType::default_instance_,
      DeviceDataType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDataType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDataType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceDataType));
  CSLoginReq_descriptor_ = file->message_type(1);
  static const int CSLoginReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, playeraccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, versionresource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, plattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, devicedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, playerpasswd_),
  };
  CSLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSLoginReq_descriptor_,
      CSLoginReq::default_instance_,
      CSLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSLoginReq));
  CSLoginRes_descriptor_ = file->message_type(2);
  static const int CSLoginRes_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRes, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRes, forceupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRes, downloadurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRes, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRes, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRes, rolestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRes, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRes, secretkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRes, isbeattacking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRes, beattackinglefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRes, env_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRes, notify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRes, defenceaeaid_),
  };
  CSLoginRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSLoginRes_descriptor_,
      CSLoginRes::default_instance_,
      CSLoginRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSLoginRes));
  CSReloginReq_descriptor_ = file->message_type(3);
  static const int CSReloginReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReloginReq, playeraccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReloginReq, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReloginReq, versionresource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReloginReq, plattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReloginReq, devicedata_),
  };
  CSReloginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSReloginReq_descriptor_,
      CSReloginReq::default_instance_,
      CSReloginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReloginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReloginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSReloginReq));
  CSReloginRes_descriptor_ = file->message_type(4);
  static const int CSReloginRes_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReloginRes, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReloginRes, forceupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReloginRes, downloadurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReloginRes, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReloginRes, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReloginRes, rolestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReloginRes, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReloginRes, secretkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReloginRes, isbeattacking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReloginRes, beattackinglefttime_),
  };
  CSReloginRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSReloginRes_descriptor_,
      CSReloginRes::default_instance_,
      CSReloginRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReloginRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReloginRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSReloginRes));
  CSFinalizeaccountReq_descriptor_ = file->message_type(5);
  static const int CSFinalizeaccountReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFinalizeaccountReq, finalcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFinalizeaccountReq, finalname_),
  };
  CSFinalizeaccountReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSFinalizeaccountReq_descriptor_,
      CSFinalizeaccountReq::default_instance_,
      CSFinalizeaccountReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFinalizeaccountReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFinalizeaccountReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSFinalizeaccountReq));
  CSFinalizeaccountRes_descriptor_ = file->message_type(6);
  static const int CSFinalizeaccountRes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFinalizeaccountRes, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFinalizeaccountRes, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFinalizeaccountRes, reason_),
  };
  CSFinalizeaccountRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSFinalizeaccountRes_descriptor_,
      CSFinalizeaccountRes::default_instance_,
      CSFinalizeaccountRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFinalizeaccountRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFinalizeaccountRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSFinalizeaccountRes));
  CSGetRandomNameReq_descriptor_ = file->message_type(7);
  static const int CSGetRandomNameReq_offsets_[1] = {
  };
  CSGetRandomNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetRandomNameReq_descriptor_,
      CSGetRandomNameReq::default_instance_,
      CSGetRandomNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRandomNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRandomNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetRandomNameReq));
  CSGetRandomNameRes_descriptor_ = file->message_type(8);
  static const int CSGetRandomNameRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRandomNameRes, name_),
  };
  CSGetRandomNameRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetRandomNameRes_descriptor_,
      CSGetRandomNameRes::default_instance_,
      CSGetRandomNameRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRandomNameRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRandomNameRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetRandomNameRes));
  CSChangeNameReq_descriptor_ = file->message_type(9);
  static const int CSChangeNameReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChangeNameReq, newname_),
  };
  CSChangeNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSChangeNameReq_descriptor_,
      CSChangeNameReq::default_instance_,
      CSChangeNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChangeNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChangeNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSChangeNameReq));
  CSChangeNameRes_descriptor_ = file->message_type(10);
  static const int CSChangeNameRes_offsets_[1] = {
  };
  CSChangeNameRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSChangeNameRes_descriptor_,
      CSChangeNameRes::default_instance_,
      CSChangeNameRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChangeNameRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChangeNameRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSChangeNameRes));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_5flogin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceDataType_descriptor_, &DeviceDataType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSLoginReq_descriptor_, &CSLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSLoginRes_descriptor_, &CSLoginRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSReloginReq_descriptor_, &CSReloginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSReloginRes_descriptor_, &CSReloginRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSFinalizeaccountReq_descriptor_, &CSFinalizeaccountReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSFinalizeaccountRes_descriptor_, &CSFinalizeaccountRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetRandomNameReq_descriptor_, &CSGetRandomNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetRandomNameRes_descriptor_, &CSGetRandomNameRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSChangeNameReq_descriptor_, &CSChangeNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSChangeNameRes_descriptor_, &CSChangeNameRes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cs_5flogin_2eproto() {
  delete DeviceDataType::default_instance_;
  delete DeviceDataType_reflection_;
  delete CSLoginReq::default_instance_;
  delete CSLoginReq_reflection_;
  delete CSLoginRes::default_instance_;
  delete CSLoginRes_reflection_;
  delete CSReloginReq::default_instance_;
  delete CSReloginReq_reflection_;
  delete CSReloginRes::default_instance_;
  delete CSReloginRes_reflection_;
  delete CSFinalizeaccountReq::default_instance_;
  delete CSFinalizeaccountReq_reflection_;
  delete CSFinalizeaccountRes::default_instance_;
  delete CSFinalizeaccountRes_reflection_;
  delete CSGetRandomNameReq::default_instance_;
  delete CSGetRandomNameReq_reflection_;
  delete CSGetRandomNameRes::default_instance_;
  delete CSGetRandomNameRes_reflection_;
  delete CSChangeNameReq::default_instance_;
  delete CSChangeNameReq_reflection_;
  delete CSChangeNameRes::default_instance_;
  delete CSChangeNameRes_reflection_;
}

void protobuf_AddDesc_cs_5flogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cs::protobuf_AddDesc_cs_5fcommon_2eproto();
  ::cs::protobuf_AddDesc_cs_5fenum_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016cs_login.proto\022\002cs\032\017cs_common.proto\032\rc"
    "s_enum.proto\"\263\001\n\016DeviceDataType\022\016\n\006Devic"
    "e\030\001 \001(\t\022\025\n\rSessionDevice\030\002 \001(\t\022\014\n\004IMEI\030\003"
    " \001(\t\022\r\n\005NTYPE\030\004 \001(\t\022\n\n\002OS\030\005 \001(\t\022\017\n\007MemSi"
    "ze\030\006 \001(\005\022\014\n\004DISP\030\007 \001(\t\022\013\n\003MAC\030\010 \001(\t\022%\n\005N"
    "etSP\030\t \001(\0162\r.cs.NetWorkSP:\007TELECOM\"\264\001\n\nC"
    "SLoginReq\022\025\n\rPlayerAccount\030\001 \002(\t\022\r\n\005Toke"
    "n\030\002 \002(\t\0220\n\017VersionResource\030\003 \002(\0132\027.cs.Ve"
    "rsionResourceType\022\020\n\010PlatType\030\004 \001(\t\022&\n\nD"
    "eviceData\030\005 \001(\0132\022.cs.DeviceDataType\022\024\n\014P"
    "layerPassWd\030\006 \001(\t\"\205\002\n\nCSLoginRes\022\022\n\nServ"
    "erTime\030\001 \001(\005\022\023\n\013ForceUpdate\030\002 \001(\010\022\023\n\013Dow"
    "nLoadUrl\030\003 \001(\t\022\020\n\010PlayerId\030\004 \001(\005\022\014\n\004Name"
    "\030\005 \001(\t\022\021\n\tRoleState\030\006 \001(\005\022\014\n\004Hash\030\007 \001(\t\022"
    "\021\n\tSecretKey\030\010 \001(\014\022\025\n\rIsBeAttacking\030\t \001("
    "\010\022\033\n\023BeAttackingLeftTime\030\n \001(\r\022\013\n\003Env\030\013 "
    "\001(\004\022\016\n\006Notify\030\014 \001(\t\022\024\n\014DefenceAeaId\030\r \001("
    "\005\"\240\001\n\014CSReloginReq\022\025\n\rPlayerAccount\030\001 \002("
    "\t\022\r\n\005Token\030\002 \002(\t\0220\n\017VersionResource\030\003 \002("
    "\0132\027.cs.VersionResourceType\022\020\n\010PlatType\030\004"
    " \001(\t\022&\n\nDeviceData\030\005 \001(\0132\022.cs.DeviceData"
    "Type\"\324\001\n\014CSReloginRes\022\022\n\nServerTime\030\001 \001("
    "\005\022\023\n\013ForceUpdate\030\002 \001(\010\022\023\n\013DownLoadUrl\030\003 "
    "\001(\t\022\020\n\010PlayerId\030\004 \001(\005\022\014\n\004Name\030\005 \001(\t\022\021\n\tR"
    "oleState\030\006 \001(\005\022\014\n\004Hash\030\007 \001(\t\022\021\n\tSecretKe"
    "y\030\010 \001(\014\022\025\n\rIsBeAttacking\030\t \001(\010\022\033\n\023BeAtta"
    "ckingLeftTime\030\n \001(\r\"=\n\024CSFinalizeaccount"
    "Req\022\022\n\nFinalColor\030\001 \002(\005\022\021\n\tFinalName\030\002 \002"
    "(\t\"D\n\024CSFinalizeaccountRes\022\014\n\004Name\030\001 \001(\t"
    "\022\016\n\006Status\030\002 \001(\005\022\016\n\006Reason\030\003 \001(\t\"\024\n\022CSGe"
    "tRandomNameReq\"\"\n\022CSGetRandomNameRes\022\014\n\004"
    "Name\030\001 \001(\t\"\"\n\017CSChangeNameReq\022\017\n\007NewName"
    "\030\001 \001(\t\"\021\n\017CSChangeNameRes", 1305);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs_login.proto", &protobuf_RegisterTypes);
  DeviceDataType::default_instance_ = new DeviceDataType();
  CSLoginReq::default_instance_ = new CSLoginReq();
  CSLoginRes::default_instance_ = new CSLoginRes();
  CSReloginReq::default_instance_ = new CSReloginReq();
  CSReloginRes::default_instance_ = new CSReloginRes();
  CSFinalizeaccountReq::default_instance_ = new CSFinalizeaccountReq();
  CSFinalizeaccountRes::default_instance_ = new CSFinalizeaccountRes();
  CSGetRandomNameReq::default_instance_ = new CSGetRandomNameReq();
  CSGetRandomNameRes::default_instance_ = new CSGetRandomNameRes();
  CSChangeNameReq::default_instance_ = new CSChangeNameReq();
  CSChangeNameRes::default_instance_ = new CSChangeNameRes();
  DeviceDataType::default_instance_->InitAsDefaultInstance();
  CSLoginReq::default_instance_->InitAsDefaultInstance();
  CSLoginRes::default_instance_->InitAsDefaultInstance();
  CSReloginReq::default_instance_->InitAsDefaultInstance();
  CSReloginRes::default_instance_->InitAsDefaultInstance();
  CSFinalizeaccountReq::default_instance_->InitAsDefaultInstance();
  CSFinalizeaccountRes::default_instance_->InitAsDefaultInstance();
  CSGetRandomNameReq::default_instance_->InitAsDefaultInstance();
  CSGetRandomNameRes::default_instance_->InitAsDefaultInstance();
  CSChangeNameReq::default_instance_->InitAsDefaultInstance();
  CSChangeNameRes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_5flogin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_5flogin_2eproto {
  StaticDescriptorInitializer_cs_5flogin_2eproto() {
    protobuf_AddDesc_cs_5flogin_2eproto();
  }
} static_descriptor_initializer_cs_5flogin_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DeviceDataType::kDeviceFieldNumber;
const int DeviceDataType::kSessionDeviceFieldNumber;
const int DeviceDataType::kIMEIFieldNumber;
const int DeviceDataType::kNTYPEFieldNumber;
const int DeviceDataType::kOSFieldNumber;
const int DeviceDataType::kMemSizeFieldNumber;
const int DeviceDataType::kDISPFieldNumber;
const int DeviceDataType::kMACFieldNumber;
const int DeviceDataType::kNetSPFieldNumber;
#endif  // !_MSC_VER

DeviceDataType::DeviceDataType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceDataType::InitAsDefaultInstance() {
}

DeviceDataType::DeviceDataType(const DeviceDataType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceDataType::SharedCtor() {
  _cached_size_ = 0;
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sessiondevice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ntype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  memsize_ = 0;
  disp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  netsp_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceDataType::~DeviceDataType() {
  SharedDtor();
}

void DeviceDataType::SharedDtor() {
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (sessiondevice_ != &::google::protobuf::internal::kEmptyString) {
    delete sessiondevice_;
  }
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    delete imei_;
  }
  if (ntype_ != &::google::protobuf::internal::kEmptyString) {
    delete ntype_;
  }
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (disp_ != &::google::protobuf::internal::kEmptyString) {
    delete disp_;
  }
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (this != default_instance_) {
  }
}

void DeviceDataType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceDataType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceDataType_descriptor_;
}

const DeviceDataType& DeviceDataType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5flogin_2eproto();
  return *default_instance_;
}

DeviceDataType* DeviceDataType::default_instance_ = NULL;

DeviceDataType* DeviceDataType::New() const {
  return new DeviceDataType;
}

void DeviceDataType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::kEmptyString) {
        device_->clear();
      }
    }
    if (has_sessiondevice()) {
      if (sessiondevice_ != &::google::protobuf::internal::kEmptyString) {
        sessiondevice_->clear();
      }
    }
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::kEmptyString) {
        imei_->clear();
      }
    }
    if (has_ntype()) {
      if (ntype_ != &::google::protobuf::internal::kEmptyString) {
        ntype_->clear();
      }
    }
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::kEmptyString) {
        os_->clear();
      }
    }
    memsize_ = 0;
    if (has_disp()) {
      if (disp_ != &::google::protobuf::internal::kEmptyString) {
        disp_->clear();
      }
    }
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::kEmptyString) {
        mac_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    netsp_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceDataType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Device = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SessionDevice;
        break;
      }

      // optional string SessionDevice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SessionDevice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessiondevice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sessiondevice().data(), this->sessiondevice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_IMEI;
        break;
      }

      // optional string IMEI = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IMEI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_NTYPE;
        break;
      }

      // optional string NTYPE = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NTYPE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ntype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ntype().data(), this->ntype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_OS;
        break;
      }

      // optional string OS = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OS:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_MemSize;
        break;
      }

      // optional int32 MemSize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MemSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memsize_)));
          set_has_memsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_DISP;
        break;
      }

      // optional string DISP = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DISP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->disp().data(), this->disp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_MAC;
        break;
      }

      // optional string MAC = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MAC:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_NetSP;
        break;
      }

      // optional .cs.NetWorkSP NetSP = 9 [default = TELECOM];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NetSP:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cs::NetWorkSP_IsValid(value)) {
            set_netsp(static_cast< ::cs::NetWorkSP >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceDataType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Device = 1;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device(), output);
  }

  // optional string SessionDevice = 2;
  if (has_sessiondevice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sessiondevice().data(), this->sessiondevice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sessiondevice(), output);
  }

  // optional string IMEI = 3;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->imei(), output);
  }

  // optional string NTYPE = 4;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ntype().data(), this->ntype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ntype(), output);
  }

  // optional string OS = 5;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->os(), output);
  }

  // optional int32 MemSize = 6;
  if (has_memsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->memsize(), output);
  }

  // optional string DISP = 7;
  if (has_disp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disp().data(), this->disp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->disp(), output);
  }

  // optional string MAC = 8;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->mac(), output);
  }

  // optional .cs.NetWorkSP NetSP = 9 [default = TELECOM];
  if (has_netsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->netsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceDataType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Device = 1;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device(), target);
  }

  // optional string SessionDevice = 2;
  if (has_sessiondevice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sessiondevice().data(), this->sessiondevice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sessiondevice(), target);
  }

  // optional string IMEI = 3;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->imei(), target);
  }

  // optional string NTYPE = 4;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ntype().data(), this->ntype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ntype(), target);
  }

  // optional string OS = 5;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->os(), target);
  }

  // optional int32 MemSize = 6;
  if (has_memsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->memsize(), target);
  }

  // optional string DISP = 7;
  if (has_disp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disp().data(), this->disp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->disp(), target);
  }

  // optional string MAC = 8;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->mac(), target);
  }

  // optional .cs.NetWorkSP NetSP = 9 [default = TELECOM];
  if (has_netsp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->netsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceDataType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Device = 1;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // optional string SessionDevice = 2;
    if (has_sessiondevice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sessiondevice());
    }

    // optional string IMEI = 3;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

    // optional string NTYPE = 4;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ntype());
    }

    // optional string OS = 5;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional int32 MemSize = 6;
    if (has_memsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memsize());
    }

    // optional string DISP = 7;
    if (has_disp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disp());
    }

    // optional string MAC = 8;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .cs.NetWorkSP NetSP = 9 [default = TELECOM];
    if (has_netsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->netsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceDataType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceDataType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceDataType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceDataType::MergeFrom(const DeviceDataType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_sessiondevice()) {
      set_sessiondevice(from.sessiondevice());
    }
    if (from.has_imei()) {
      set_imei(from.imei());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_memsize()) {
      set_memsize(from.memsize());
    }
    if (from.has_disp()) {
      set_disp(from.disp());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_netsp()) {
      set_netsp(from.netsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceDataType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceDataType::CopyFrom(const DeviceDataType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceDataType::IsInitialized() const {

  return true;
}

void DeviceDataType::Swap(DeviceDataType* other) {
  if (other != this) {
    std::swap(device_, other->device_);
    std::swap(sessiondevice_, other->sessiondevice_);
    std::swap(imei_, other->imei_);
    std::swap(ntype_, other->ntype_);
    std::swap(os_, other->os_);
    std::swap(memsize_, other->memsize_);
    std::swap(disp_, other->disp_);
    std::swap(mac_, other->mac_);
    std::swap(netsp_, other->netsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceDataType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceDataType_descriptor_;
  metadata.reflection = DeviceDataType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSLoginReq::kPlayerAccountFieldNumber;
const int CSLoginReq::kTokenFieldNumber;
const int CSLoginReq::kVersionResourceFieldNumber;
const int CSLoginReq::kPlatTypeFieldNumber;
const int CSLoginReq::kDeviceDataFieldNumber;
const int CSLoginReq::kPlayerPassWdFieldNumber;
#endif  // !_MSC_VER

CSLoginReq::CSLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSLoginReq::InitAsDefaultInstance() {
  versionresource_ = const_cast< ::cs::VersionResourceType*>(&::cs::VersionResourceType::default_instance());
  devicedata_ = const_cast< ::cs::DeviceDataType*>(&::cs::DeviceDataType::default_instance());
}

CSLoginReq::CSLoginReq(const CSLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSLoginReq::SharedCtor() {
  _cached_size_ = 0;
  playeraccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  versionresource_ = NULL;
  plattype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicedata_ = NULL;
  playerpasswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSLoginReq::~CSLoginReq() {
  SharedDtor();
}

void CSLoginReq::SharedDtor() {
  if (playeraccount_ != &::google::protobuf::internal::kEmptyString) {
    delete playeraccount_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (plattype_ != &::google::protobuf::internal::kEmptyString) {
    delete plattype_;
  }
  if (playerpasswd_ != &::google::protobuf::internal::kEmptyString) {
    delete playerpasswd_;
  }
  if (this != default_instance_) {
    delete versionresource_;
    delete devicedata_;
  }
}

void CSLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSLoginReq_descriptor_;
}

const CSLoginReq& CSLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5flogin_2eproto();
  return *default_instance_;
}

CSLoginReq* CSLoginReq::default_instance_ = NULL;

CSLoginReq* CSLoginReq::New() const {
  return new CSLoginReq;
}

void CSLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playeraccount()) {
      if (playeraccount_ != &::google::protobuf::internal::kEmptyString) {
        playeraccount_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_versionresource()) {
      if (versionresource_ != NULL) versionresource_->::cs::VersionResourceType::Clear();
    }
    if (has_plattype()) {
      if (plattype_ != &::google::protobuf::internal::kEmptyString) {
        plattype_->clear();
      }
    }
    if (has_devicedata()) {
      if (devicedata_ != NULL) devicedata_->::cs::DeviceDataType::Clear();
    }
    if (has_playerpasswd()) {
      if (playerpasswd_ != &::google::protobuf::internal::kEmptyString) {
        playerpasswd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PlayerAccount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playeraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playeraccount().data(), this->playeraccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Token;
        break;
      }

      // required string Token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_VersionResource;
        break;
      }

      // required .cs.VersionResourceType VersionResource = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VersionResource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_versionresource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_PlatType;
        break;
      }

      // optional string PlatType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlatType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plattype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->plattype().data(), this->plattype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_DeviceData;
        break;
      }

      // optional .cs.DeviceDataType DeviceData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeviceData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_devicedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_PlayerPassWd;
        break;
      }

      // optional string PlayerPassWd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerPassWd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerpasswd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerpasswd().data(), this->playerpasswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string PlayerAccount = 1;
  if (has_playeraccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playeraccount().data(), this->playeraccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playeraccount(), output);
  }

  // required string Token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }

  // required .cs.VersionResourceType VersionResource = 3;
  if (has_versionresource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->versionresource(), output);
  }

  // optional string PlatType = 4;
  if (has_plattype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plattype().data(), this->plattype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->plattype(), output);
  }

  // optional .cs.DeviceDataType DeviceData = 5;
  if (has_devicedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->devicedata(), output);
  }

  // optional string PlayerPassWd = 6;
  if (has_playerpasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerpasswd().data(), this->playerpasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->playerpasswd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string PlayerAccount = 1;
  if (has_playeraccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playeraccount().data(), this->playeraccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playeraccount(), target);
  }

  // required string Token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // required .cs.VersionResourceType VersionResource = 3;
  if (has_versionresource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->versionresource(), target);
  }

  // optional string PlatType = 4;
  if (has_plattype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plattype().data(), this->plattype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->plattype(), target);
  }

  // optional .cs.DeviceDataType DeviceData = 5;
  if (has_devicedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->devicedata(), target);
  }

  // optional string PlayerPassWd = 6;
  if (has_playerpasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerpasswd().data(), this->playerpasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->playerpasswd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PlayerAccount = 1;
    if (has_playeraccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playeraccount());
    }

    // required string Token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required .cs.VersionResourceType VersionResource = 3;
    if (has_versionresource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->versionresource());
    }

    // optional string PlatType = 4;
    if (has_plattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plattype());
    }

    // optional .cs.DeviceDataType DeviceData = 5;
    if (has_devicedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->devicedata());
    }

    // optional string PlayerPassWd = 6;
    if (has_playerpasswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerpasswd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSLoginReq::MergeFrom(const CSLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playeraccount()) {
      set_playeraccount(from.playeraccount());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_versionresource()) {
      mutable_versionresource()->::cs::VersionResourceType::MergeFrom(from.versionresource());
    }
    if (from.has_plattype()) {
      set_plattype(from.plattype());
    }
    if (from.has_devicedata()) {
      mutable_devicedata()->::cs::DeviceDataType::MergeFrom(from.devicedata());
    }
    if (from.has_playerpasswd()) {
      set_playerpasswd(from.playerpasswd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLoginReq::CopyFrom(const CSLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_versionresource()) {
    if (!this->versionresource().IsInitialized()) return false;
  }
  return true;
}

void CSLoginReq::Swap(CSLoginReq* other) {
  if (other != this) {
    std::swap(playeraccount_, other->playeraccount_);
    std::swap(token_, other->token_);
    std::swap(versionresource_, other->versionresource_);
    std::swap(plattype_, other->plattype_);
    std::swap(devicedata_, other->devicedata_);
    std::swap(playerpasswd_, other->playerpasswd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSLoginReq_descriptor_;
  metadata.reflection = CSLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSLoginRes::kServerTimeFieldNumber;
const int CSLoginRes::kForceUpdateFieldNumber;
const int CSLoginRes::kDownLoadUrlFieldNumber;
const int CSLoginRes::kPlayerIdFieldNumber;
const int CSLoginRes::kNameFieldNumber;
const int CSLoginRes::kRoleStateFieldNumber;
const int CSLoginRes::kHashFieldNumber;
const int CSLoginRes::kSecretKeyFieldNumber;
const int CSLoginRes::kIsBeAttackingFieldNumber;
const int CSLoginRes::kBeAttackingLeftTimeFieldNumber;
const int CSLoginRes::kEnvFieldNumber;
const int CSLoginRes::kNotifyFieldNumber;
const int CSLoginRes::kDefenceAeaIdFieldNumber;
#endif  // !_MSC_VER

CSLoginRes::CSLoginRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSLoginRes::InitAsDefaultInstance() {
}

CSLoginRes::CSLoginRes(const CSLoginRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSLoginRes::SharedCtor() {
  _cached_size_ = 0;
  servertime_ = 0;
  forceupdate_ = false;
  downloadurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolestate_ = 0;
  hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  secretkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isbeattacking_ = false;
  beattackinglefttime_ = 0u;
  env_ = GOOGLE_ULONGLONG(0);
  notify_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defenceaeaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSLoginRes::~CSLoginRes() {
  SharedDtor();
}

void CSLoginRes::SharedDtor() {
  if (downloadurl_ != &::google::protobuf::internal::kEmptyString) {
    delete downloadurl_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    delete hash_;
  }
  if (secretkey_ != &::google::protobuf::internal::kEmptyString) {
    delete secretkey_;
  }
  if (notify_ != &::google::protobuf::internal::kEmptyString) {
    delete notify_;
  }
  if (this != default_instance_) {
  }
}

void CSLoginRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSLoginRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSLoginRes_descriptor_;
}

const CSLoginRes& CSLoginRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5flogin_2eproto();
  return *default_instance_;
}

CSLoginRes* CSLoginRes::default_instance_ = NULL;

CSLoginRes* CSLoginRes::New() const {
  return new CSLoginRes;
}

void CSLoginRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    servertime_ = 0;
    forceupdate_ = false;
    if (has_downloadurl()) {
      if (downloadurl_ != &::google::protobuf::internal::kEmptyString) {
        downloadurl_->clear();
      }
    }
    playerid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    rolestate_ = 0;
    if (has_hash()) {
      if (hash_ != &::google::protobuf::internal::kEmptyString) {
        hash_->clear();
      }
    }
    if (has_secretkey()) {
      if (secretkey_ != &::google::protobuf::internal::kEmptyString) {
        secretkey_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isbeattacking_ = false;
    beattackinglefttime_ = 0u;
    env_ = GOOGLE_ULONGLONG(0);
    if (has_notify()) {
      if (notify_ != &::google::protobuf::internal::kEmptyString) {
        notify_->clear();
      }
    }
    defenceaeaid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSLoginRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ServerTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ForceUpdate;
        break;
      }

      // optional bool ForceUpdate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ForceUpdate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forceupdate_)));
          set_has_forceupdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DownLoadUrl;
        break;
      }

      // optional string DownLoadUrl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DownLoadUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_downloadurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->downloadurl().data(), this->downloadurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_PlayerId;
        break;
      }

      // optional int32 PlayerId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Name;
        break;
      }

      // optional string Name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_RoleState;
        break;
      }

      // optional int32 RoleState = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolestate_)));
          set_has_rolestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Hash;
        break;
      }

      // optional string Hash = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_SecretKey;
        break;
      }

      // optional bytes SecretKey = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SecretKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secretkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_IsBeAttacking;
        break;
      }

      // optional bool IsBeAttacking = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsBeAttacking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbeattacking_)));
          set_has_isbeattacking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_BeAttackingLeftTime;
        break;
      }

      // optional uint32 BeAttackingLeftTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BeAttackingLeftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beattackinglefttime_)));
          set_has_beattackinglefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_Env;
        break;
      }

      // optional uint64 Env = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Env:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &env_)));
          set_has_env();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_Notify;
        break;
      }

      // optional string Notify = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notify()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notify().data(), this->notify().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_DefenceAeaId;
        break;
      }

      // optional int32 DefenceAeaId = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DefenceAeaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defenceaeaid_)));
          set_has_defenceaeaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSLoginRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ServerTime = 1;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->servertime(), output);
  }

  // optional bool ForceUpdate = 2;
  if (has_forceupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->forceupdate(), output);
  }

  // optional string DownLoadUrl = 3;
  if (has_downloadurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->downloadurl().data(), this->downloadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->downloadurl(), output);
  }

  // optional int32 PlayerId = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->playerid(), output);
  }

  // optional string Name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // optional int32 RoleState = 6;
  if (has_rolestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rolestate(), output);
  }

  // optional string Hash = 7;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->hash(), output);
  }

  // optional bytes SecretKey = 8;
  if (has_secretkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->secretkey(), output);
  }

  // optional bool IsBeAttacking = 9;
  if (has_isbeattacking()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isbeattacking(), output);
  }

  // optional uint32 BeAttackingLeftTime = 10;
  if (has_beattackinglefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->beattackinglefttime(), output);
  }

  // optional uint64 Env = 11;
  if (has_env()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->env(), output);
  }

  // optional string Notify = 12;
  if (has_notify()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notify().data(), this->notify().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->notify(), output);
  }

  // optional int32 DefenceAeaId = 13;
  if (has_defenceaeaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->defenceaeaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSLoginRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ServerTime = 1;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->servertime(), target);
  }

  // optional bool ForceUpdate = 2;
  if (has_forceupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->forceupdate(), target);
  }

  // optional string DownLoadUrl = 3;
  if (has_downloadurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->downloadurl().data(), this->downloadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->downloadurl(), target);
  }

  // optional int32 PlayerId = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->playerid(), target);
  }

  // optional string Name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional int32 RoleState = 6;
  if (has_rolestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rolestate(), target);
  }

  // optional string Hash = 7;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->hash(), target);
  }

  // optional bytes SecretKey = 8;
  if (has_secretkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->secretkey(), target);
  }

  // optional bool IsBeAttacking = 9;
  if (has_isbeattacking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isbeattacking(), target);
  }

  // optional uint32 BeAttackingLeftTime = 10;
  if (has_beattackinglefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->beattackinglefttime(), target);
  }

  // optional uint64 Env = 11;
  if (has_env()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->env(), target);
  }

  // optional string Notify = 12;
  if (has_notify()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notify().data(), this->notify().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->notify(), target);
  }

  // optional int32 DefenceAeaId = 13;
  if (has_defenceaeaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->defenceaeaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSLoginRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ServerTime = 1;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servertime());
    }

    // optional bool ForceUpdate = 2;
    if (has_forceupdate()) {
      total_size += 1 + 1;
    }

    // optional string DownLoadUrl = 3;
    if (has_downloadurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->downloadurl());
    }

    // optional int32 PlayerId = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // optional string Name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 RoleState = 6;
    if (has_rolestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolestate());
    }

    // optional string Hash = 7;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hash());
    }

    // optional bytes SecretKey = 8;
    if (has_secretkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secretkey());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool IsBeAttacking = 9;
    if (has_isbeattacking()) {
      total_size += 1 + 1;
    }

    // optional uint32 BeAttackingLeftTime = 10;
    if (has_beattackinglefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beattackinglefttime());
    }

    // optional uint64 Env = 11;
    if (has_env()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->env());
    }

    // optional string Notify = 12;
    if (has_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notify());
    }

    // optional int32 DefenceAeaId = 13;
    if (has_defenceaeaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defenceaeaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSLoginRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSLoginRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSLoginRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSLoginRes::MergeFrom(const CSLoginRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
    if (from.has_forceupdate()) {
      set_forceupdate(from.forceupdate());
    }
    if (from.has_downloadurl()) {
      set_downloadurl(from.downloadurl());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_rolestate()) {
      set_rolestate(from.rolestate());
    }
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_secretkey()) {
      set_secretkey(from.secretkey());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isbeattacking()) {
      set_isbeattacking(from.isbeattacking());
    }
    if (from.has_beattackinglefttime()) {
      set_beattackinglefttime(from.beattackinglefttime());
    }
    if (from.has_env()) {
      set_env(from.env());
    }
    if (from.has_notify()) {
      set_notify(from.notify());
    }
    if (from.has_defenceaeaid()) {
      set_defenceaeaid(from.defenceaeaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSLoginRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLoginRes::CopyFrom(const CSLoginRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLoginRes::IsInitialized() const {

  return true;
}

void CSLoginRes::Swap(CSLoginRes* other) {
  if (other != this) {
    std::swap(servertime_, other->servertime_);
    std::swap(forceupdate_, other->forceupdate_);
    std::swap(downloadurl_, other->downloadurl_);
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(rolestate_, other->rolestate_);
    std::swap(hash_, other->hash_);
    std::swap(secretkey_, other->secretkey_);
    std::swap(isbeattacking_, other->isbeattacking_);
    std::swap(beattackinglefttime_, other->beattackinglefttime_);
    std::swap(env_, other->env_);
    std::swap(notify_, other->notify_);
    std::swap(defenceaeaid_, other->defenceaeaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSLoginRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSLoginRes_descriptor_;
  metadata.reflection = CSLoginRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSReloginReq::kPlayerAccountFieldNumber;
const int CSReloginReq::kTokenFieldNumber;
const int CSReloginReq::kVersionResourceFieldNumber;
const int CSReloginReq::kPlatTypeFieldNumber;
const int CSReloginReq::kDeviceDataFieldNumber;
#endif  // !_MSC_VER

CSReloginReq::CSReloginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSReloginReq::InitAsDefaultInstance() {
  versionresource_ = const_cast< ::cs::VersionResourceType*>(&::cs::VersionResourceType::default_instance());
  devicedata_ = const_cast< ::cs::DeviceDataType*>(&::cs::DeviceDataType::default_instance());
}

CSReloginReq::CSReloginReq(const CSReloginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSReloginReq::SharedCtor() {
  _cached_size_ = 0;
  playeraccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  versionresource_ = NULL;
  plattype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicedata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSReloginReq::~CSReloginReq() {
  SharedDtor();
}

void CSReloginReq::SharedDtor() {
  if (playeraccount_ != &::google::protobuf::internal::kEmptyString) {
    delete playeraccount_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (plattype_ != &::google::protobuf::internal::kEmptyString) {
    delete plattype_;
  }
  if (this != default_instance_) {
    delete versionresource_;
    delete devicedata_;
  }
}

void CSReloginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSReloginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSReloginReq_descriptor_;
}

const CSReloginReq& CSReloginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5flogin_2eproto();
  return *default_instance_;
}

CSReloginReq* CSReloginReq::default_instance_ = NULL;

CSReloginReq* CSReloginReq::New() const {
  return new CSReloginReq;
}

void CSReloginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playeraccount()) {
      if (playeraccount_ != &::google::protobuf::internal::kEmptyString) {
        playeraccount_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_versionresource()) {
      if (versionresource_ != NULL) versionresource_->::cs::VersionResourceType::Clear();
    }
    if (has_plattype()) {
      if (plattype_ != &::google::protobuf::internal::kEmptyString) {
        plattype_->clear();
      }
    }
    if (has_devicedata()) {
      if (devicedata_ != NULL) devicedata_->::cs::DeviceDataType::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSReloginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PlayerAccount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playeraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playeraccount().data(), this->playeraccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Token;
        break;
      }

      // required string Token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_VersionResource;
        break;
      }

      // required .cs.VersionResourceType VersionResource = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VersionResource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_versionresource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_PlatType;
        break;
      }

      // optional string PlatType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlatType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plattype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->plattype().data(), this->plattype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_DeviceData;
        break;
      }

      // optional .cs.DeviceDataType DeviceData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeviceData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_devicedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSReloginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string PlayerAccount = 1;
  if (has_playeraccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playeraccount().data(), this->playeraccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playeraccount(), output);
  }

  // required string Token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }

  // required .cs.VersionResourceType VersionResource = 3;
  if (has_versionresource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->versionresource(), output);
  }

  // optional string PlatType = 4;
  if (has_plattype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plattype().data(), this->plattype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->plattype(), output);
  }

  // optional .cs.DeviceDataType DeviceData = 5;
  if (has_devicedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->devicedata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSReloginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string PlayerAccount = 1;
  if (has_playeraccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playeraccount().data(), this->playeraccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playeraccount(), target);
  }

  // required string Token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // required .cs.VersionResourceType VersionResource = 3;
  if (has_versionresource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->versionresource(), target);
  }

  // optional string PlatType = 4;
  if (has_plattype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plattype().data(), this->plattype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->plattype(), target);
  }

  // optional .cs.DeviceDataType DeviceData = 5;
  if (has_devicedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->devicedata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSReloginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PlayerAccount = 1;
    if (has_playeraccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playeraccount());
    }

    // required string Token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required .cs.VersionResourceType VersionResource = 3;
    if (has_versionresource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->versionresource());
    }

    // optional string PlatType = 4;
    if (has_plattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plattype());
    }

    // optional .cs.DeviceDataType DeviceData = 5;
    if (has_devicedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->devicedata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSReloginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSReloginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSReloginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSReloginReq::MergeFrom(const CSReloginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playeraccount()) {
      set_playeraccount(from.playeraccount());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_versionresource()) {
      mutable_versionresource()->::cs::VersionResourceType::MergeFrom(from.versionresource());
    }
    if (from.has_plattype()) {
      set_plattype(from.plattype());
    }
    if (from.has_devicedata()) {
      mutable_devicedata()->::cs::DeviceDataType::MergeFrom(from.devicedata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSReloginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSReloginReq::CopyFrom(const CSReloginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReloginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_versionresource()) {
    if (!this->versionresource().IsInitialized()) return false;
  }
  return true;
}

void CSReloginReq::Swap(CSReloginReq* other) {
  if (other != this) {
    std::swap(playeraccount_, other->playeraccount_);
    std::swap(token_, other->token_);
    std::swap(versionresource_, other->versionresource_);
    std::swap(plattype_, other->plattype_);
    std::swap(devicedata_, other->devicedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSReloginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSReloginReq_descriptor_;
  metadata.reflection = CSReloginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSReloginRes::kServerTimeFieldNumber;
const int CSReloginRes::kForceUpdateFieldNumber;
const int CSReloginRes::kDownLoadUrlFieldNumber;
const int CSReloginRes::kPlayerIdFieldNumber;
const int CSReloginRes::kNameFieldNumber;
const int CSReloginRes::kRoleStateFieldNumber;
const int CSReloginRes::kHashFieldNumber;
const int CSReloginRes::kSecretKeyFieldNumber;
const int CSReloginRes::kIsBeAttackingFieldNumber;
const int CSReloginRes::kBeAttackingLeftTimeFieldNumber;
#endif  // !_MSC_VER

CSReloginRes::CSReloginRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSReloginRes::InitAsDefaultInstance() {
}

CSReloginRes::CSReloginRes(const CSReloginRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSReloginRes::SharedCtor() {
  _cached_size_ = 0;
  servertime_ = 0;
  forceupdate_ = false;
  downloadurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolestate_ = 0;
  hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  secretkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isbeattacking_ = false;
  beattackinglefttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSReloginRes::~CSReloginRes() {
  SharedDtor();
}

void CSReloginRes::SharedDtor() {
  if (downloadurl_ != &::google::protobuf::internal::kEmptyString) {
    delete downloadurl_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    delete hash_;
  }
  if (secretkey_ != &::google::protobuf::internal::kEmptyString) {
    delete secretkey_;
  }
  if (this != default_instance_) {
  }
}

void CSReloginRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSReloginRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSReloginRes_descriptor_;
}

const CSReloginRes& CSReloginRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5flogin_2eproto();
  return *default_instance_;
}

CSReloginRes* CSReloginRes::default_instance_ = NULL;

CSReloginRes* CSReloginRes::New() const {
  return new CSReloginRes;
}

void CSReloginRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    servertime_ = 0;
    forceupdate_ = false;
    if (has_downloadurl()) {
      if (downloadurl_ != &::google::protobuf::internal::kEmptyString) {
        downloadurl_->clear();
      }
    }
    playerid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    rolestate_ = 0;
    if (has_hash()) {
      if (hash_ != &::google::protobuf::internal::kEmptyString) {
        hash_->clear();
      }
    }
    if (has_secretkey()) {
      if (secretkey_ != &::google::protobuf::internal::kEmptyString) {
        secretkey_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isbeattacking_ = false;
    beattackinglefttime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSReloginRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ServerTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ForceUpdate;
        break;
      }

      // optional bool ForceUpdate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ForceUpdate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forceupdate_)));
          set_has_forceupdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DownLoadUrl;
        break;
      }

      // optional string DownLoadUrl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DownLoadUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_downloadurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->downloadurl().data(), this->downloadurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_PlayerId;
        break;
      }

      // optional int32 PlayerId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Name;
        break;
      }

      // optional string Name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_RoleState;
        break;
      }

      // optional int32 RoleState = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolestate_)));
          set_has_rolestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Hash;
        break;
      }

      // optional string Hash = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_SecretKey;
        break;
      }

      // optional bytes SecretKey = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SecretKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secretkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_IsBeAttacking;
        break;
      }

      // optional bool IsBeAttacking = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsBeAttacking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbeattacking_)));
          set_has_isbeattacking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_BeAttackingLeftTime;
        break;
      }

      // optional uint32 BeAttackingLeftTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BeAttackingLeftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beattackinglefttime_)));
          set_has_beattackinglefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSReloginRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ServerTime = 1;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->servertime(), output);
  }

  // optional bool ForceUpdate = 2;
  if (has_forceupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->forceupdate(), output);
  }

  // optional string DownLoadUrl = 3;
  if (has_downloadurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->downloadurl().data(), this->downloadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->downloadurl(), output);
  }

  // optional int32 PlayerId = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->playerid(), output);
  }

  // optional string Name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // optional int32 RoleState = 6;
  if (has_rolestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rolestate(), output);
  }

  // optional string Hash = 7;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->hash(), output);
  }

  // optional bytes SecretKey = 8;
  if (has_secretkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->secretkey(), output);
  }

  // optional bool IsBeAttacking = 9;
  if (has_isbeattacking()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isbeattacking(), output);
  }

  // optional uint32 BeAttackingLeftTime = 10;
  if (has_beattackinglefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->beattackinglefttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSReloginRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ServerTime = 1;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->servertime(), target);
  }

  // optional bool ForceUpdate = 2;
  if (has_forceupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->forceupdate(), target);
  }

  // optional string DownLoadUrl = 3;
  if (has_downloadurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->downloadurl().data(), this->downloadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->downloadurl(), target);
  }

  // optional int32 PlayerId = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->playerid(), target);
  }

  // optional string Name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional int32 RoleState = 6;
  if (has_rolestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rolestate(), target);
  }

  // optional string Hash = 7;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->hash(), target);
  }

  // optional bytes SecretKey = 8;
  if (has_secretkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->secretkey(), target);
  }

  // optional bool IsBeAttacking = 9;
  if (has_isbeattacking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isbeattacking(), target);
  }

  // optional uint32 BeAttackingLeftTime = 10;
  if (has_beattackinglefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->beattackinglefttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSReloginRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ServerTime = 1;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servertime());
    }

    // optional bool ForceUpdate = 2;
    if (has_forceupdate()) {
      total_size += 1 + 1;
    }

    // optional string DownLoadUrl = 3;
    if (has_downloadurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->downloadurl());
    }

    // optional int32 PlayerId = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // optional string Name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 RoleState = 6;
    if (has_rolestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolestate());
    }

    // optional string Hash = 7;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hash());
    }

    // optional bytes SecretKey = 8;
    if (has_secretkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secretkey());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool IsBeAttacking = 9;
    if (has_isbeattacking()) {
      total_size += 1 + 1;
    }

    // optional uint32 BeAttackingLeftTime = 10;
    if (has_beattackinglefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beattackinglefttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSReloginRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSReloginRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSReloginRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSReloginRes::MergeFrom(const CSReloginRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
    if (from.has_forceupdate()) {
      set_forceupdate(from.forceupdate());
    }
    if (from.has_downloadurl()) {
      set_downloadurl(from.downloadurl());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_rolestate()) {
      set_rolestate(from.rolestate());
    }
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_secretkey()) {
      set_secretkey(from.secretkey());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isbeattacking()) {
      set_isbeattacking(from.isbeattacking());
    }
    if (from.has_beattackinglefttime()) {
      set_beattackinglefttime(from.beattackinglefttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSReloginRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSReloginRes::CopyFrom(const CSReloginRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReloginRes::IsInitialized() const {

  return true;
}

void CSReloginRes::Swap(CSReloginRes* other) {
  if (other != this) {
    std::swap(servertime_, other->servertime_);
    std::swap(forceupdate_, other->forceupdate_);
    std::swap(downloadurl_, other->downloadurl_);
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(rolestate_, other->rolestate_);
    std::swap(hash_, other->hash_);
    std::swap(secretkey_, other->secretkey_);
    std::swap(isbeattacking_, other->isbeattacking_);
    std::swap(beattackinglefttime_, other->beattackinglefttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSReloginRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSReloginRes_descriptor_;
  metadata.reflection = CSReloginRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSFinalizeaccountReq::kFinalColorFieldNumber;
const int CSFinalizeaccountReq::kFinalNameFieldNumber;
#endif  // !_MSC_VER

CSFinalizeaccountReq::CSFinalizeaccountReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSFinalizeaccountReq::InitAsDefaultInstance() {
}

CSFinalizeaccountReq::CSFinalizeaccountReq(const CSFinalizeaccountReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSFinalizeaccountReq::SharedCtor() {
  _cached_size_ = 0;
  finalcolor_ = 0;
  finalname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFinalizeaccountReq::~CSFinalizeaccountReq() {
  SharedDtor();
}

void CSFinalizeaccountReq::SharedDtor() {
  if (finalname_ != &::google::protobuf::internal::kEmptyString) {
    delete finalname_;
  }
  if (this != default_instance_) {
  }
}

void CSFinalizeaccountReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSFinalizeaccountReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSFinalizeaccountReq_descriptor_;
}

const CSFinalizeaccountReq& CSFinalizeaccountReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5flogin_2eproto();
  return *default_instance_;
}

CSFinalizeaccountReq* CSFinalizeaccountReq::default_instance_ = NULL;

CSFinalizeaccountReq* CSFinalizeaccountReq::New() const {
  return new CSFinalizeaccountReq;
}

void CSFinalizeaccountReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    finalcolor_ = 0;
    if (has_finalname()) {
      if (finalname_ != &::google::protobuf::internal::kEmptyString) {
        finalname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSFinalizeaccountReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 FinalColor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finalcolor_)));
          set_has_finalcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FinalName;
        break;
      }

      // required string FinalName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FinalName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_finalname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->finalname().data(), this->finalname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSFinalizeaccountReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 FinalColor = 1;
  if (has_finalcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->finalcolor(), output);
  }

  // required string FinalName = 2;
  if (has_finalname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->finalname().data(), this->finalname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->finalname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSFinalizeaccountReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 FinalColor = 1;
  if (has_finalcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->finalcolor(), target);
  }

  // required string FinalName = 2;
  if (has_finalname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->finalname().data(), this->finalname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->finalname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSFinalizeaccountReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 FinalColor = 1;
    if (has_finalcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finalcolor());
    }

    // required string FinalName = 2;
    if (has_finalname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->finalname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFinalizeaccountReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSFinalizeaccountReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSFinalizeaccountReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSFinalizeaccountReq::MergeFrom(const CSFinalizeaccountReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_finalcolor()) {
      set_finalcolor(from.finalcolor());
    }
    if (from.has_finalname()) {
      set_finalname(from.finalname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSFinalizeaccountReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSFinalizeaccountReq::CopyFrom(const CSFinalizeaccountReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFinalizeaccountReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSFinalizeaccountReq::Swap(CSFinalizeaccountReq* other) {
  if (other != this) {
    std::swap(finalcolor_, other->finalcolor_);
    std::swap(finalname_, other->finalname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSFinalizeaccountReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSFinalizeaccountReq_descriptor_;
  metadata.reflection = CSFinalizeaccountReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSFinalizeaccountRes::kNameFieldNumber;
const int CSFinalizeaccountRes::kStatusFieldNumber;
const int CSFinalizeaccountRes::kReasonFieldNumber;
#endif  // !_MSC_VER

CSFinalizeaccountRes::CSFinalizeaccountRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSFinalizeaccountRes::InitAsDefaultInstance() {
}

CSFinalizeaccountRes::CSFinalizeaccountRes(const CSFinalizeaccountRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSFinalizeaccountRes::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFinalizeaccountRes::~CSFinalizeaccountRes() {
  SharedDtor();
}

void CSFinalizeaccountRes::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void CSFinalizeaccountRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSFinalizeaccountRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSFinalizeaccountRes_descriptor_;
}

const CSFinalizeaccountRes& CSFinalizeaccountRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5flogin_2eproto();
  return *default_instance_;
}

CSFinalizeaccountRes* CSFinalizeaccountRes::default_instance_ = NULL;

CSFinalizeaccountRes* CSFinalizeaccountRes::New() const {
  return new CSFinalizeaccountRes;
}

void CSFinalizeaccountRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    status_ = 0;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSFinalizeaccountRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }

      // optional int32 Status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Reason;
        break;
      }

      // optional string Reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSFinalizeaccountRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 Status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // optional string Reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSFinalizeaccountRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 Status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // optional string Reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSFinalizeaccountRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional string Reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFinalizeaccountRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSFinalizeaccountRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSFinalizeaccountRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSFinalizeaccountRes::MergeFrom(const CSFinalizeaccountRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSFinalizeaccountRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSFinalizeaccountRes::CopyFrom(const CSFinalizeaccountRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFinalizeaccountRes::IsInitialized() const {

  return true;
}

void CSFinalizeaccountRes::Swap(CSFinalizeaccountRes* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(status_, other->status_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSFinalizeaccountRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSFinalizeaccountRes_descriptor_;
  metadata.reflection = CSFinalizeaccountRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSGetRandomNameReq::CSGetRandomNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetRandomNameReq::InitAsDefaultInstance() {
}

CSGetRandomNameReq::CSGetRandomNameReq(const CSGetRandomNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetRandomNameReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetRandomNameReq::~CSGetRandomNameReq() {
  SharedDtor();
}

void CSGetRandomNameReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetRandomNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetRandomNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetRandomNameReq_descriptor_;
}

const CSGetRandomNameReq& CSGetRandomNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5flogin_2eproto();
  return *default_instance_;
}

CSGetRandomNameReq* CSGetRandomNameReq::default_instance_ = NULL;

CSGetRandomNameReq* CSGetRandomNameReq::New() const {
  return new CSGetRandomNameReq;
}

void CSGetRandomNameReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetRandomNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSGetRandomNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetRandomNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetRandomNameReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetRandomNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetRandomNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetRandomNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetRandomNameReq::MergeFrom(const CSGetRandomNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetRandomNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetRandomNameReq::CopyFrom(const CSGetRandomNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetRandomNameReq::IsInitialized() const {

  return true;
}

void CSGetRandomNameReq::Swap(CSGetRandomNameReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetRandomNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetRandomNameReq_descriptor_;
  metadata.reflection = CSGetRandomNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetRandomNameRes::kNameFieldNumber;
#endif  // !_MSC_VER

CSGetRandomNameRes::CSGetRandomNameRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetRandomNameRes::InitAsDefaultInstance() {
}

CSGetRandomNameRes::CSGetRandomNameRes(const CSGetRandomNameRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetRandomNameRes::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetRandomNameRes::~CSGetRandomNameRes() {
  SharedDtor();
}

void CSGetRandomNameRes::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSGetRandomNameRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetRandomNameRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetRandomNameRes_descriptor_;
}

const CSGetRandomNameRes& CSGetRandomNameRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5flogin_2eproto();
  return *default_instance_;
}

CSGetRandomNameRes* CSGetRandomNameRes::default_instance_ = NULL;

CSGetRandomNameRes* CSGetRandomNameRes::New() const {
  return new CSGetRandomNameRes;
}

void CSGetRandomNameRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetRandomNameRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGetRandomNameRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetRandomNameRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetRandomNameRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetRandomNameRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetRandomNameRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetRandomNameRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetRandomNameRes::MergeFrom(const CSGetRandomNameRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetRandomNameRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetRandomNameRes::CopyFrom(const CSGetRandomNameRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetRandomNameRes::IsInitialized() const {

  return true;
}

void CSGetRandomNameRes::Swap(CSGetRandomNameRes* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetRandomNameRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetRandomNameRes_descriptor_;
  metadata.reflection = CSGetRandomNameRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSChangeNameReq::kNewNameFieldNumber;
#endif  // !_MSC_VER

CSChangeNameReq::CSChangeNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSChangeNameReq::InitAsDefaultInstance() {
}

CSChangeNameReq::CSChangeNameReq(const CSChangeNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSChangeNameReq::SharedCtor() {
  _cached_size_ = 0;
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSChangeNameReq::~CSChangeNameReq() {
  SharedDtor();
}

void CSChangeNameReq::SharedDtor() {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    delete newname_;
  }
  if (this != default_instance_) {
  }
}

void CSChangeNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSChangeNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSChangeNameReq_descriptor_;
}

const CSChangeNameReq& CSChangeNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5flogin_2eproto();
  return *default_instance_;
}

CSChangeNameReq* CSChangeNameReq::default_instance_ = NULL;

CSChangeNameReq* CSChangeNameReq::New() const {
  return new CSChangeNameReq;
}

void CSChangeNameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::kEmptyString) {
        newname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSChangeNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string NewName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSChangeNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string NewName = 1;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->newname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSChangeNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string NewName = 1;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->newname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSChangeNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string NewName = 1;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSChangeNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSChangeNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSChangeNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSChangeNameReq::MergeFrom(const CSChangeNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newname()) {
      set_newname(from.newname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSChangeNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSChangeNameReq::CopyFrom(const CSChangeNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChangeNameReq::IsInitialized() const {

  return true;
}

void CSChangeNameReq::Swap(CSChangeNameReq* other) {
  if (other != this) {
    std::swap(newname_, other->newname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSChangeNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSChangeNameReq_descriptor_;
  metadata.reflection = CSChangeNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSChangeNameRes::CSChangeNameRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSChangeNameRes::InitAsDefaultInstance() {
}

CSChangeNameRes::CSChangeNameRes(const CSChangeNameRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSChangeNameRes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSChangeNameRes::~CSChangeNameRes() {
  SharedDtor();
}

void CSChangeNameRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSChangeNameRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSChangeNameRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSChangeNameRes_descriptor_;
}

const CSChangeNameRes& CSChangeNameRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5flogin_2eproto();
  return *default_instance_;
}

CSChangeNameRes* CSChangeNameRes::default_instance_ = NULL;

CSChangeNameRes* CSChangeNameRes::New() const {
  return new CSChangeNameRes;
}

void CSChangeNameRes::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSChangeNameRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSChangeNameRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSChangeNameRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSChangeNameRes::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSChangeNameRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSChangeNameRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSChangeNameRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSChangeNameRes::MergeFrom(const CSChangeNameRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSChangeNameRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSChangeNameRes::CopyFrom(const CSChangeNameRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChangeNameRes::IsInitialized() const {

  return true;
}

void CSChangeNameRes::Swap(CSChangeNameRes* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSChangeNameRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSChangeNameRes_descriptor_;
  metadata.reflection = CSChangeNameRes_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cs

// @@protoc_insertion_point(global_scope)
