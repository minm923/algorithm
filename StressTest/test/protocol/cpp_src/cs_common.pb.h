// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_common.proto

#ifndef PROTOBUF_cs_5fcommon_2eproto__INCLUDED
#define PROTOBUF_cs_5fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cs_5fcommon_2eproto();
void protobuf_AssignDesc_cs_5fcommon_2eproto();
void protobuf_ShutdownFile_cs_5fcommon_2eproto();

class CSVector3;
class BaseInfoType;
class VersionResourceType;
class KeyValue;
class Item;
class ItemList;
class QuestInfo;
class AchievementData;
class TechInfo;
class SoldersInfo;
class SkillsInfo;
class PVPTeamInfo;
class RoomEndInfoType;
class CSNotifyClientReply;
class PlayerVipList;
class VipChgInfo;
class PlayerUnit;
class PlayerCard;
class PVPBattleReportPlayers;

// ===================================================================

class CSVector3 : public ::google::protobuf::Message {
 public:
  CSVector3();
  virtual ~CSVector3();

  CSVector3(const CSVector3& from);

  inline CSVector3& operator=(const CSVector3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSVector3& default_instance();

  void Swap(CSVector3* other);

  // implements Message ----------------------------------------------

  CSVector3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSVector3& from);
  void MergeFrom(const CSVector3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:cs.CSVector3)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  float z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fcommon_2eproto();
  friend void protobuf_AssignDesc_cs_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_cs_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CSVector3* default_instance_;
};
// -------------------------------------------------------------------

class BaseInfoType : public ::google::protobuf::Message {
 public:
  BaseInfoType();
  virtual ~BaseInfoType();

  BaseInfoType(const BaseInfoType& from);

  inline BaseInfoType& operator=(const BaseInfoType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseInfoType& default_instance();

  void Swap(BaseInfoType* other);

  // implements Message ----------------------------------------------

  BaseInfoType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaseInfoType& from);
  void MergeFrom(const BaseInfoType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 PlayerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // optional string Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 PlayerElo = 3;
  inline bool has_playerelo() const;
  inline void clear_playerelo();
  static const int kPlayerEloFieldNumber = 3;
  inline ::google::protobuf::int32 playerelo() const;
  inline void set_playerelo(::google::protobuf::int32 value);

  // optional int32 PlayerColor = 4;
  inline bool has_playercolor() const;
  inline void clear_playercolor();
  static const int kPlayerColorFieldNumber = 4;
  inline ::google::protobuf::int32 playercolor() const;
  inline void set_playercolor(::google::protobuf::int32 value);

  // optional int32 PlayerMoney = 5;
  inline bool has_playermoney() const;
  inline void clear_playermoney();
  static const int kPlayerMoneyFieldNumber = 5;
  inline ::google::protobuf::int32 playermoney() const;
  inline void set_playermoney(::google::protobuf::int32 value);

  // optional int32 PlayerStone = 6;
  inline bool has_playerstone() const;
  inline void clear_playerstone();
  static const int kPlayerStoneFieldNumber = 6;
  inline ::google::protobuf::int32 playerstone() const;
  inline void set_playerstone(::google::protobuf::int32 value);

  // optional int32 PlayerSteel = 7;
  inline bool has_playersteel() const;
  inline void clear_playersteel();
  static const int kPlayerSteelFieldNumber = 7;
  inline ::google::protobuf::int32 playersteel() const;
  inline void set_playersteel(::google::protobuf::int32 value);

  // optional int32 PlayerHardCurrency = 8;
  inline bool has_playerhardcurrency() const;
  inline void clear_playerhardcurrency();
  static const int kPlayerHardCurrencyFieldNumber = 8;
  inline ::google::protobuf::int32 playerhardcurrency() const;
  inline void set_playerhardcurrency(::google::protobuf::int32 value);

  // optional int32 PlayerXp = 9;
  inline bool has_playerxp() const;
  inline void clear_playerxp();
  static const int kPlayerXpFieldNumber = 9;
  inline ::google::protobuf::int32 playerxp() const;
  inline void set_playerxp(::google::protobuf::int32 value);

  // optional int32 PlayerLevel = 10;
  inline bool has_playerlevel() const;
  inline void clear_playerlevel();
  static const int kPlayerLevelFieldNumber = 10;
  inline ::google::protobuf::int32 playerlevel() const;
  inline void set_playerlevel(::google::protobuf::int32 value);

  // optional int32 UnlockedTerritoryMaxID = 11;
  inline bool has_unlockedterritorymaxid() const;
  inline void clear_unlockedterritorymaxid();
  static const int kUnlockedTerritoryMaxIDFieldNumber = 11;
  inline ::google::protobuf::int32 unlockedterritorymaxid() const;
  inline void set_unlockedterritorymaxid(::google::protobuf::int32 value);

  // optional int32 RankSection = 12;
  inline bool has_ranksection() const;
  inline void clear_ranksection();
  static const int kRankSectionFieldNumber = 12;
  inline ::google::protobuf::int32 ranksection() const;
  inline void set_ranksection(::google::protobuf::int32 value);

  // optional int32 RankSubsection = 13;
  inline bool has_ranksubsection() const;
  inline void clear_ranksubsection();
  static const int kRankSubsectionFieldNumber = 13;
  inline ::google::protobuf::int32 ranksubsection() const;
  inline void set_ranksubsection(::google::protobuf::int32 value);

  // optional int32 AllianceId = 14;
  inline bool has_allianceid() const;
  inline void clear_allianceid();
  static const int kAllianceIdFieldNumber = 14;
  inline ::google::protobuf::int32 allianceid() const;
  inline void set_allianceid(::google::protobuf::int32 value);

  // optional int32 AllianceSignet = 15;
  inline bool has_alliancesignet() const;
  inline void clear_alliancesignet();
  static const int kAllianceSignetFieldNumber = 15;
  inline ::google::protobuf::int32 alliancesignet() const;
  inline void set_alliancesignet(::google::protobuf::int32 value);

  // optional int32 AllianceMemType = 16;
  inline bool has_alliancememtype() const;
  inline void clear_alliancememtype();
  static const int kAllianceMemTypeFieldNumber = 16;
  inline ::google::protobuf::int32 alliancememtype() const;
  inline void set_alliancememtype(::google::protobuf::int32 value);

  // optional float PlayerPower = 17;
  inline bool has_playerpower() const;
  inline void clear_playerpower();
  static const int kPlayerPowerFieldNumber = 17;
  inline float playerpower() const;
  inline void set_playerpower(float value);

  // optional int32 VipID = 18;
  inline bool has_vipid() const;
  inline void clear_vipid();
  static const int kVipIDFieldNumber = 18;
  inline ::google::protobuf::int32 vipid() const;
  inline void set_vipid(::google::protobuf::int32 value);

  // optional int32 VipTime = 19;
  inline bool has_viptime() const;
  inline void clear_viptime();
  static const int kVipTimeFieldNumber = 19;
  inline ::google::protobuf::int32 viptime() const;
  inline void set_viptime(::google::protobuf::int32 value);

  // optional int32 PlayerHo = 20;
  inline bool has_playerho() const;
  inline void clear_playerho();
  static const int kPlayerHoFieldNumber = 20;
  inline ::google::protobuf::int32 playerho() const;
  inline void set_playerho(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cs.BaseInfoType)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_playerelo();
  inline void clear_has_playerelo();
  inline void set_has_playercolor();
  inline void clear_has_playercolor();
  inline void set_has_playermoney();
  inline void clear_has_playermoney();
  inline void set_has_playerstone();
  inline void clear_has_playerstone();
  inline void set_has_playersteel();
  inline void clear_has_playersteel();
  inline void set_has_playerhardcurrency();
  inline void clear_has_playerhardcurrency();
  inline void set_has_playerxp();
  inline void clear_has_playerxp();
  inline void set_has_playerlevel();
  inline void clear_has_playerlevel();
  inline void set_has_unlockedterritorymaxid();
  inline void clear_has_unlockedterritorymaxid();
  inline void set_has_ranksection();
  inline void clear_has_ranksection();
  inline void set_has_ranksubsection();
  inline void clear_has_ranksubsection();
  inline void set_has_allianceid();
  inline void clear_has_allianceid();
  inline void set_has_alliancesignet();
  inline void clear_has_alliancesignet();
  inline void set_has_alliancememtype();
  inline void clear_has_alliancememtype();
  inline void set_has_playerpower();
  inline void clear_has_playerpower();
  inline void set_has_vipid();
  inline void clear_has_vipid();
  inline void set_has_viptime();
  inline void clear_has_viptime();
  inline void set_has_playerho();
  inline void clear_has_playerho();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 playerelo_;
  ::google::protobuf::int32 playercolor_;
  ::google::protobuf::int32 playermoney_;
  ::google::protobuf::int32 playerstone_;
  ::google::protobuf::int32 playersteel_;
  ::google::protobuf::int32 playerhardcurrency_;
  ::google::protobuf::int32 playerxp_;
  ::google::protobuf::int32 playerlevel_;
  ::google::protobuf::int32 unlockedterritorymaxid_;
  ::google::protobuf::int32 ranksection_;
  ::google::protobuf::int32 ranksubsection_;
  ::google::protobuf::int32 allianceid_;
  ::google::protobuf::int32 alliancesignet_;
  ::google::protobuf::int32 alliancememtype_;
  float playerpower_;
  ::google::protobuf::int32 vipid_;
  ::google::protobuf::int32 viptime_;
  ::google::protobuf::int32 playerho_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fcommon_2eproto();
  friend void protobuf_AssignDesc_cs_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_cs_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static BaseInfoType* default_instance_;
};
// -------------------------------------------------------------------

class VersionResourceType : public ::google::protobuf::Message {
 public:
  VersionResourceType();
  virtual ~VersionResourceType();

  VersionResourceType(const VersionResourceType& from);

  inline VersionResourceType& operator=(const VersionResourceType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VersionResourceType& default_instance();

  void Swap(VersionResourceType* other);

  // implements Message ----------------------------------------------

  VersionResourceType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VersionResourceType& from);
  void MergeFrom(const VersionResourceType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string GameVersion = 1;
  inline bool has_gameversion() const;
  inline void clear_gameversion();
  static const int kGameVersionFieldNumber = 1;
  inline const ::std::string& gameversion() const;
  inline void set_gameversion(const ::std::string& value);
  inline void set_gameversion(const char* value);
  inline void set_gameversion(const char* value, size_t size);
  inline ::std::string* mutable_gameversion();
  inline ::std::string* release_gameversion();
  inline void set_allocated_gameversion(::std::string* gameversion);

  // required string OsType = 2;
  inline bool has_ostype() const;
  inline void clear_ostype();
  static const int kOsTypeFieldNumber = 2;
  inline const ::std::string& ostype() const;
  inline void set_ostype(const ::std::string& value);
  inline void set_ostype(const char* value);
  inline void set_ostype(const char* value, size_t size);
  inline ::std::string* mutable_ostype();
  inline ::std::string* release_ostype();
  inline void set_allocated_ostype(::std::string* ostype);

  // required string ChanMerchant = 3;
  inline bool has_chanmerchant() const;
  inline void clear_chanmerchant();
  static const int kChanMerchantFieldNumber = 3;
  inline const ::std::string& chanmerchant() const;
  inline void set_chanmerchant(const ::std::string& value);
  inline void set_chanmerchant(const char* value);
  inline void set_chanmerchant(const char* value, size_t size);
  inline ::std::string* mutable_chanmerchant();
  inline ::std::string* release_chanmerchant();
  inline void set_allocated_chanmerchant(::std::string* chanmerchant);

  // optional string ResourceVersion = 4;
  inline bool has_resourceversion() const;
  inline void clear_resourceversion();
  static const int kResourceVersionFieldNumber = 4;
  inline const ::std::string& resourceversion() const;
  inline void set_resourceversion(const ::std::string& value);
  inline void set_resourceversion(const char* value);
  inline void set_resourceversion(const char* value, size_t size);
  inline ::std::string* mutable_resourceversion();
  inline ::std::string* release_resourceversion();
  inline void set_allocated_resourceversion(::std::string* resourceversion);

  // @@protoc_insertion_point(class_scope:cs.VersionResourceType)
 private:
  inline void set_has_gameversion();
  inline void clear_has_gameversion();
  inline void set_has_ostype();
  inline void clear_has_ostype();
  inline void set_has_chanmerchant();
  inline void clear_has_chanmerchant();
  inline void set_has_resourceversion();
  inline void clear_has_resourceversion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* gameversion_;
  ::std::string* ostype_;
  ::std::string* chanmerchant_;
  ::std::string* resourceversion_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fcommon_2eproto();
  friend void protobuf_AssignDesc_cs_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_cs_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static VersionResourceType* default_instance_;
};
// -------------------------------------------------------------------

class KeyValue : public ::google::protobuf::Message {
 public:
  KeyValue();
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValue& default_instance();

  void Swap(KeyValue* other);

  // implements Message ----------------------------------------------

  KeyValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:cs.KeyValue)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fcommon_2eproto();
  friend void protobuf_AssignDesc_cs_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_cs_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static KeyValue* default_instance_;
};
// -------------------------------------------------------------------

class Item : public ::google::protobuf::Message {
 public:
  Item();
  virtual ~Item();

  Item(const Item& from);

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Item& default_instance();

  void Swap(Item* other);

  // implements Message ----------------------------------------------

  Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 SubType = 2;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubTypeFieldNumber = 2;
  inline ::google::protobuf::int32 subtype() const;
  inline void set_subtype(::google::protobuf::int32 value);

  // required int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cs.Item)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 subtype_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fcommon_2eproto();
  friend void protobuf_AssignDesc_cs_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_cs_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Item* default_instance_;
};
// -------------------------------------------------------------------

class ItemList : public ::google::protobuf::Message {
 public:
  ItemList();
  virtual ~ItemList();

  ItemList(const ItemList& from);

  inline ItemList& operator=(const ItemList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemList& default_instance();

  void Swap(ItemList* other);

  // implements Message ----------------------------------------------

  ItemList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemList& from);
  void MergeFrom(const ItemList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cs.Item item = 1;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::cs::Item& item(int index) const;
  inline ::cs::Item* mutable_item(int index);
  inline ::cs::Item* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::cs::Item >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::cs::Item >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:cs.ItemList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::cs::Item > item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fcommon_2eproto();
  friend void protobuf_AssignDesc_cs_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_cs_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static ItemList* default_instance_;
};
// -------------------------------------------------------------------

class QuestInfo : public ::google::protobuf::Message {
 public:
  QuestInfo();
  virtual ~QuestInfo();

  QuestInfo(const QuestInfo& from);

  inline QuestInfo& operator=(const QuestInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestInfo& default_instance();

  void Swap(QuestInfo* other);

  // implements Message ----------------------------------------------

  QuestInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestInfo& from);
  void MergeFrom(const QuestInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string QuestId = 1;
  inline bool has_questid() const;
  inline void clear_questid();
  static const int kQuestIdFieldNumber = 1;
  inline const ::std::string& questid() const;
  inline void set_questid(const ::std::string& value);
  inline void set_questid(const char* value);
  inline void set_questid(const char* value, size_t size);
  inline ::std::string* mutable_questid();
  inline ::std::string* release_questid();
  inline void set_allocated_questid(::std::string* questid);

  // required int32 State = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // required int32 Value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // required int32 OffsetColor = 4;
  inline bool has_offsetcolor() const;
  inline void clear_offsetcolor();
  static const int kOffsetColorFieldNumber = 4;
  inline ::google::protobuf::int32 offsetcolor() const;
  inline void set_offsetcolor(::google::protobuf::int32 value);

  // required int32 TaskLv = 5;
  inline bool has_tasklv() const;
  inline void clear_tasklv();
  static const int kTaskLvFieldNumber = 5;
  inline ::google::protobuf::int32 tasklv() const;
  inline void set_tasklv(::google::protobuf::int32 value);

  // required int32 IsVip = 6;
  inline bool has_isvip() const;
  inline void clear_isvip();
  static const int kIsVipFieldNumber = 6;
  inline ::google::protobuf::int32 isvip() const;
  inline void set_isvip(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cs.QuestInfo)
 private:
  inline void set_has_questid();
  inline void clear_has_questid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_offsetcolor();
  inline void clear_has_offsetcolor();
  inline void set_has_tasklv();
  inline void clear_has_tasklv();
  inline void set_has_isvip();
  inline void clear_has_isvip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* questid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 offsetcolor_;
  ::google::protobuf::int32 tasklv_;
  ::google::protobuf::int32 isvip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fcommon_2eproto();
  friend void protobuf_AssignDesc_cs_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_cs_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static QuestInfo* default_instance_;
};
// -------------------------------------------------------------------

class AchievementData : public ::google::protobuf::Message {
 public:
  AchievementData();
  virtual ~AchievementData();

  AchievementData(const AchievementData& from);

  inline AchievementData& operator=(const AchievementData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AchievementData& default_instance();

  void Swap(AchievementData* other);

  // implements Message ----------------------------------------------

  AchievementData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AchievementData& from);
  void MergeFrom(const AchievementData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 Index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required int32 Status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // required int32 Store = 4;
  inline bool has_store() const;
  inline void clear_store();
  static const int kStoreFieldNumber = 4;
  inline ::google::protobuf::int32 store() const;
  inline void set_store(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cs.AchievementData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_store();
  inline void clear_has_store();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 store_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fcommon_2eproto();
  friend void protobuf_AssignDesc_cs_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_cs_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static AchievementData* default_instance_;
};
// -------------------------------------------------------------------

class TechInfo : public ::google::protobuf::Message {
 public:
  TechInfo();
  virtual ~TechInfo();

  TechInfo(const TechInfo& from);

  inline TechInfo& operator=(const TechInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TechInfo& default_instance();

  void Swap(TechInfo* other);

  // implements Message ----------------------------------------------

  TechInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TechInfo& from);
  void MergeFrom(const TechInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 TechKey = 1;
  inline bool has_techkey() const;
  inline void clear_techkey();
  static const int kTechKeyFieldNumber = 1;
  inline ::google::protobuf::int32 techkey() const;
  inline void set_techkey(::google::protobuf::int32 value);

  // required int32 TechLevel = 2;
  inline bool has_techlevel() const;
  inline void clear_techlevel();
  static const int kTechLevelFieldNumber = 2;
  inline ::google::protobuf::int32 techlevel() const;
  inline void set_techlevel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cs.TechInfo)
 private:
  inline void set_has_techkey();
  inline void clear_has_techkey();
  inline void set_has_techlevel();
  inline void clear_has_techlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 techkey_;
  ::google::protobuf::int32 techlevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fcommon_2eproto();
  friend void protobuf_AssignDesc_cs_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_cs_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static TechInfo* default_instance_;
};
// -------------------------------------------------------------------

class SoldersInfo : public ::google::protobuf::Message {
 public:
  SoldersInfo();
  virtual ~SoldersInfo();

  SoldersInfo(const SoldersInfo& from);

  inline SoldersInfo& operator=(const SoldersInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoldersInfo& default_instance();

  void Swap(SoldersInfo* other);

  // implements Message ----------------------------------------------

  SoldersInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoldersInfo& from);
  void MergeFrom(const SoldersInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 SolderId = 1;
  inline bool has_solderid() const;
  inline void clear_solderid();
  static const int kSolderIdFieldNumber = 1;
  inline ::google::protobuf::int32 solderid() const;
  inline void set_solderid(::google::protobuf::int32 value);

  // required int32 SolderLevel = 2;
  inline bool has_solderlevel() const;
  inline void clear_solderlevel();
  static const int kSolderLevelFieldNumber = 2;
  inline ::google::protobuf::int32 solderlevel() const;
  inline void set_solderlevel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cs.SoldersInfo)
 private:
  inline void set_has_solderid();
  inline void clear_has_solderid();
  inline void set_has_solderlevel();
  inline void clear_has_solderlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 solderid_;
  ::google::protobuf::int32 solderlevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fcommon_2eproto();
  friend void protobuf_AssignDesc_cs_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_cs_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static SoldersInfo* default_instance_;
};
// -------------------------------------------------------------------

class SkillsInfo : public ::google::protobuf::Message {
 public:
  SkillsInfo();
  virtual ~SkillsInfo();

  SkillsInfo(const SkillsInfo& from);

  inline SkillsInfo& operator=(const SkillsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillsInfo& default_instance();

  void Swap(SkillsInfo* other);

  // implements Message ----------------------------------------------

  SkillsInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillsInfo& from);
  void MergeFrom(const SkillsInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 SkillId = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cs.SkillsInfo)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 skillid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fcommon_2eproto();
  friend void protobuf_AssignDesc_cs_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_cs_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static SkillsInfo* default_instance_;
};
// -------------------------------------------------------------------

class PVPTeamInfo : public ::google::protobuf::Message {
 public:
  PVPTeamInfo();
  virtual ~PVPTeamInfo();

  PVPTeamInfo(const PVPTeamInfo& from);

  inline PVPTeamInfo& operator=(const PVPTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVPTeamInfo& default_instance();

  void Swap(PVPTeamInfo* other);

  // implements Message ----------------------------------------------

  PVPTeamInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVPTeamInfo& from);
  void MergeFrom(const PVPTeamInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PlayerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // required int32 TeamID = 2;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 2;
  inline ::google::protobuf::int32 teamid() const;
  inline void set_teamid(::google::protobuf::int32 value);

  // required int32 RobotType = 3;
  inline bool has_robottype() const;
  inline void clear_robottype();
  static const int kRobotTypeFieldNumber = 3;
  inline ::google::protobuf::int32 robottype() const;
  inline void set_robottype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cs.PVPTeamInfo)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_robottype();
  inline void clear_has_robottype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 teamid_;
  ::google::protobuf::int32 robottype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fcommon_2eproto();
  friend void protobuf_AssignDesc_cs_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_cs_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static PVPTeamInfo* default_instance_;
};
// -------------------------------------------------------------------

class RoomEndInfoType : public ::google::protobuf::Message {
 public:
  RoomEndInfoType();
  virtual ~RoomEndInfoType();

  RoomEndInfoType(const RoomEndInfoType& from);

  inline RoomEndInfoType& operator=(const RoomEndInfoType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomEndInfoType& default_instance();

  void Swap(RoomEndInfoType* other);

  // implements Message ----------------------------------------------

  RoomEndInfoType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomEndInfoType& from);
  void MergeFrom(const RoomEndInfoType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 PlayerID = 1;
  inline int playerid_size() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int32 playerid(int index) const;
  inline void set_playerid(int index, ::google::protobuf::int32 value);
  inline void add_playerid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      playerid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_playerid();

  // repeated int32 PlayerStat = 2;
  inline int playerstat_size() const;
  inline void clear_playerstat();
  static const int kPlayerStatFieldNumber = 2;
  inline ::google::protobuf::int32 playerstat(int index) const;
  inline void set_playerstat(int index, ::google::protobuf::int32 value);
  inline void add_playerstat(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      playerstat() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_playerstat();

  // repeated int32 Power = 3;
  inline int power_size() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 3;
  inline ::google::protobuf::int32 power(int index) const;
  inline void set_power(int index, ::google::protobuf::int32 value);
  inline void add_power(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      power() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_power();

  // @@protoc_insertion_point(class_scope:cs.RoomEndInfoType)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > playerid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > playerstat_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > power_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fcommon_2eproto();
  friend void protobuf_AssignDesc_cs_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_cs_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static RoomEndInfoType* default_instance_;
};
// -------------------------------------------------------------------

class CSNotifyClientReply : public ::google::protobuf::Message {
 public:
  CSNotifyClientReply();
  virtual ~CSNotifyClientReply();

  CSNotifyClientReply(const CSNotifyClientReply& from);

  inline CSNotifyClientReply& operator=(const CSNotifyClientReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSNotifyClientReply& default_instance();

  void Swap(CSNotifyClientReply* other);

  // implements Message ----------------------------------------------

  CSNotifyClientReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSNotifyClientReply& from);
  void MergeFrom(const CSNotifyClientReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cs.CSNotifyClientReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_cs_5fcommon_2eproto();
  friend void protobuf_AssignDesc_cs_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_cs_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CSNotifyClientReply* default_instance_;
};
// -------------------------------------------------------------------

class PlayerVipList : public ::google::protobuf::Message {
 public:
  PlayerVipList();
  virtual ~PlayerVipList();

  PlayerVipList(const PlayerVipList& from);

  inline PlayerVipList& operator=(const PlayerVipList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerVipList& default_instance();

  void Swap(PlayerVipList* other);

  // implements Message ----------------------------------------------

  PlayerVipList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerVipList& from);
  void MergeFrom(const PlayerVipList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 SuperVipTime = 1;
  inline bool has_superviptime() const;
  inline void clear_superviptime();
  static const int kSuperVipTimeFieldNumber = 1;
  inline ::google::protobuf::int32 superviptime() const;
  inline void set_superviptime(::google::protobuf::int32 value);

  // optional int32 VipTime = 2;
  inline bool has_viptime() const;
  inline void clear_viptime();
  static const int kVipTimeFieldNumber = 2;
  inline ::google::protobuf::int32 viptime() const;
  inline void set_viptime(::google::protobuf::int32 value);

  // repeated .cs.VipChgInfo VipChg = 3;
  inline int vipchg_size() const;
  inline void clear_vipchg();
  static const int kVipChgFieldNumber = 3;
  inline const ::cs::VipChgInfo& vipchg(int index) const;
  inline ::cs::VipChgInfo* mutable_vipchg(int index);
  inline ::cs::VipChgInfo* add_vipchg();
  inline const ::google::protobuf::RepeatedPtrField< ::cs::VipChgInfo >&
      vipchg() const;
  inline ::google::protobuf::RepeatedPtrField< ::cs::VipChgInfo >*
      mutable_vipchg();

  // @@protoc_insertion_point(class_scope:cs.PlayerVipList)
 private:
  inline void set_has_superviptime();
  inline void clear_has_superviptime();
  inline void set_has_viptime();
  inline void clear_has_viptime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 superviptime_;
  ::google::protobuf::int32 viptime_;
  ::google::protobuf::RepeatedPtrField< ::cs::VipChgInfo > vipchg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fcommon_2eproto();
  friend void protobuf_AssignDesc_cs_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_cs_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static PlayerVipList* default_instance_;
};
// -------------------------------------------------------------------

class VipChgInfo : public ::google::protobuf::Message {
 public:
  VipChgInfo();
  virtual ~VipChgInfo();

  VipChgInfo(const VipChgInfo& from);

  inline VipChgInfo& operator=(const VipChgInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VipChgInfo& default_instance();

  void Swap(VipChgInfo* other);

  // implements Message ----------------------------------------------

  VipChgInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VipChgInfo& from);
  void MergeFrom(const VipChgInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 VipType = 1;
  inline bool has_viptype() const;
  inline void clear_viptype();
  static const int kVipTypeFieldNumber = 1;
  inline ::google::protobuf::int32 viptype() const;
  inline void set_viptype(::google::protobuf::int32 value);

  // optional int32 ChgTime = 2;
  inline bool has_chgtime() const;
  inline void clear_chgtime();
  static const int kChgTimeFieldNumber = 2;
  inline ::google::protobuf::int32 chgtime() const;
  inline void set_chgtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cs.VipChgInfo)
 private:
  inline void set_has_viptype();
  inline void clear_has_viptype();
  inline void set_has_chgtime();
  inline void clear_has_chgtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 viptype_;
  ::google::protobuf::int32 chgtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fcommon_2eproto();
  friend void protobuf_AssignDesc_cs_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_cs_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static VipChgInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlayerUnit : public ::google::protobuf::Message {
 public:
  PlayerUnit();
  virtual ~PlayerUnit();

  PlayerUnit(const PlayerUnit& from);

  inline PlayerUnit& operator=(const PlayerUnit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerUnit& default_instance();

  void Swap(PlayerUnit* other);

  // implements Message ----------------------------------------------

  PlayerUnit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerUnit& from);
  void MergeFrom(const PlayerUnit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 Level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cs.PlayerUnit)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fcommon_2eproto();
  friend void protobuf_AssignDesc_cs_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_cs_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static PlayerUnit* default_instance_;
};
// -------------------------------------------------------------------

class PlayerCard : public ::google::protobuf::Message {
 public:
  PlayerCard();
  virtual ~PlayerCard();

  PlayerCard(const PlayerCard& from);

  inline PlayerCard& operator=(const PlayerCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerCard& default_instance();

  void Swap(PlayerCard* other);

  // implements Message ----------------------------------------------

  PlayerCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerCard& from);
  void MergeFrom(const PlayerCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 Number = 2;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 2;
  inline ::google::protobuf::int32 number() const;
  inline void set_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cs.PlayerCard)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_number();
  inline void clear_has_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fcommon_2eproto();
  friend void protobuf_AssignDesc_cs_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_cs_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static PlayerCard* default_instance_;
};
// -------------------------------------------------------------------

class PVPBattleReportPlayers : public ::google::protobuf::Message {
 public:
  PVPBattleReportPlayers();
  virtual ~PVPBattleReportPlayers();

  PVPBattleReportPlayers(const PVPBattleReportPlayers& from);

  inline PVPBattleReportPlayers& operator=(const PVPBattleReportPlayers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVPBattleReportPlayers& default_instance();

  void Swap(PVPBattleReportPlayers* other);

  // implements Message ----------------------------------------------

  PVPBattleReportPlayers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVPBattleReportPlayers& from);
  void MergeFrom(const PVPBattleReportPlayers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RoomID = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 1;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cs.PVPBattleReportPlayers)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fcommon_2eproto();
  friend void protobuf_AssignDesc_cs_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_cs_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static PVPBattleReportPlayers* default_instance_;
};
// ===================================================================


// ===================================================================

// CSVector3

// required float x = 1;
inline bool CSVector3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSVector3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSVector3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSVector3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float CSVector3::x() const {
  return x_;
}
inline void CSVector3::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool CSVector3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSVector3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSVector3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSVector3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float CSVector3::y() const {
  return y_;
}
inline void CSVector3::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 3;
inline bool CSVector3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSVector3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSVector3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSVector3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float CSVector3::z() const {
  return z_;
}
inline void CSVector3::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// BaseInfoType

// optional int32 PlayerID = 1;
inline bool BaseInfoType::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseInfoType::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseInfoType::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseInfoType::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 BaseInfoType::playerid() const {
  return playerid_;
}
inline void BaseInfoType::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional string Name = 2;
inline bool BaseInfoType::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BaseInfoType::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BaseInfoType::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BaseInfoType::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BaseInfoType::name() const {
  return *name_;
}
inline void BaseInfoType::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BaseInfoType::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BaseInfoType::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BaseInfoType::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* BaseInfoType::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BaseInfoType::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 PlayerElo = 3;
inline bool BaseInfoType::has_playerelo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BaseInfoType::set_has_playerelo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BaseInfoType::clear_has_playerelo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BaseInfoType::clear_playerelo() {
  playerelo_ = 0;
  clear_has_playerelo();
}
inline ::google::protobuf::int32 BaseInfoType::playerelo() const {
  return playerelo_;
}
inline void BaseInfoType::set_playerelo(::google::protobuf::int32 value) {
  set_has_playerelo();
  playerelo_ = value;
}

// optional int32 PlayerColor = 4;
inline bool BaseInfoType::has_playercolor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BaseInfoType::set_has_playercolor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BaseInfoType::clear_has_playercolor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BaseInfoType::clear_playercolor() {
  playercolor_ = 0;
  clear_has_playercolor();
}
inline ::google::protobuf::int32 BaseInfoType::playercolor() const {
  return playercolor_;
}
inline void BaseInfoType::set_playercolor(::google::protobuf::int32 value) {
  set_has_playercolor();
  playercolor_ = value;
}

// optional int32 PlayerMoney = 5;
inline bool BaseInfoType::has_playermoney() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BaseInfoType::set_has_playermoney() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BaseInfoType::clear_has_playermoney() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BaseInfoType::clear_playermoney() {
  playermoney_ = 0;
  clear_has_playermoney();
}
inline ::google::protobuf::int32 BaseInfoType::playermoney() const {
  return playermoney_;
}
inline void BaseInfoType::set_playermoney(::google::protobuf::int32 value) {
  set_has_playermoney();
  playermoney_ = value;
}

// optional int32 PlayerStone = 6;
inline bool BaseInfoType::has_playerstone() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BaseInfoType::set_has_playerstone() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BaseInfoType::clear_has_playerstone() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BaseInfoType::clear_playerstone() {
  playerstone_ = 0;
  clear_has_playerstone();
}
inline ::google::protobuf::int32 BaseInfoType::playerstone() const {
  return playerstone_;
}
inline void BaseInfoType::set_playerstone(::google::protobuf::int32 value) {
  set_has_playerstone();
  playerstone_ = value;
}

// optional int32 PlayerSteel = 7;
inline bool BaseInfoType::has_playersteel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BaseInfoType::set_has_playersteel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BaseInfoType::clear_has_playersteel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BaseInfoType::clear_playersteel() {
  playersteel_ = 0;
  clear_has_playersteel();
}
inline ::google::protobuf::int32 BaseInfoType::playersteel() const {
  return playersteel_;
}
inline void BaseInfoType::set_playersteel(::google::protobuf::int32 value) {
  set_has_playersteel();
  playersteel_ = value;
}

// optional int32 PlayerHardCurrency = 8;
inline bool BaseInfoType::has_playerhardcurrency() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BaseInfoType::set_has_playerhardcurrency() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BaseInfoType::clear_has_playerhardcurrency() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BaseInfoType::clear_playerhardcurrency() {
  playerhardcurrency_ = 0;
  clear_has_playerhardcurrency();
}
inline ::google::protobuf::int32 BaseInfoType::playerhardcurrency() const {
  return playerhardcurrency_;
}
inline void BaseInfoType::set_playerhardcurrency(::google::protobuf::int32 value) {
  set_has_playerhardcurrency();
  playerhardcurrency_ = value;
}

// optional int32 PlayerXp = 9;
inline bool BaseInfoType::has_playerxp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BaseInfoType::set_has_playerxp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BaseInfoType::clear_has_playerxp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BaseInfoType::clear_playerxp() {
  playerxp_ = 0;
  clear_has_playerxp();
}
inline ::google::protobuf::int32 BaseInfoType::playerxp() const {
  return playerxp_;
}
inline void BaseInfoType::set_playerxp(::google::protobuf::int32 value) {
  set_has_playerxp();
  playerxp_ = value;
}

// optional int32 PlayerLevel = 10;
inline bool BaseInfoType::has_playerlevel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BaseInfoType::set_has_playerlevel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BaseInfoType::clear_has_playerlevel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BaseInfoType::clear_playerlevel() {
  playerlevel_ = 0;
  clear_has_playerlevel();
}
inline ::google::protobuf::int32 BaseInfoType::playerlevel() const {
  return playerlevel_;
}
inline void BaseInfoType::set_playerlevel(::google::protobuf::int32 value) {
  set_has_playerlevel();
  playerlevel_ = value;
}

// optional int32 UnlockedTerritoryMaxID = 11;
inline bool BaseInfoType::has_unlockedterritorymaxid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BaseInfoType::set_has_unlockedterritorymaxid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BaseInfoType::clear_has_unlockedterritorymaxid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BaseInfoType::clear_unlockedterritorymaxid() {
  unlockedterritorymaxid_ = 0;
  clear_has_unlockedterritorymaxid();
}
inline ::google::protobuf::int32 BaseInfoType::unlockedterritorymaxid() const {
  return unlockedterritorymaxid_;
}
inline void BaseInfoType::set_unlockedterritorymaxid(::google::protobuf::int32 value) {
  set_has_unlockedterritorymaxid();
  unlockedterritorymaxid_ = value;
}

// optional int32 RankSection = 12;
inline bool BaseInfoType::has_ranksection() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BaseInfoType::set_has_ranksection() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BaseInfoType::clear_has_ranksection() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BaseInfoType::clear_ranksection() {
  ranksection_ = 0;
  clear_has_ranksection();
}
inline ::google::protobuf::int32 BaseInfoType::ranksection() const {
  return ranksection_;
}
inline void BaseInfoType::set_ranksection(::google::protobuf::int32 value) {
  set_has_ranksection();
  ranksection_ = value;
}

// optional int32 RankSubsection = 13;
inline bool BaseInfoType::has_ranksubsection() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BaseInfoType::set_has_ranksubsection() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BaseInfoType::clear_has_ranksubsection() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BaseInfoType::clear_ranksubsection() {
  ranksubsection_ = 0;
  clear_has_ranksubsection();
}
inline ::google::protobuf::int32 BaseInfoType::ranksubsection() const {
  return ranksubsection_;
}
inline void BaseInfoType::set_ranksubsection(::google::protobuf::int32 value) {
  set_has_ranksubsection();
  ranksubsection_ = value;
}

// optional int32 AllianceId = 14;
inline bool BaseInfoType::has_allianceid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BaseInfoType::set_has_allianceid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BaseInfoType::clear_has_allianceid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BaseInfoType::clear_allianceid() {
  allianceid_ = 0;
  clear_has_allianceid();
}
inline ::google::protobuf::int32 BaseInfoType::allianceid() const {
  return allianceid_;
}
inline void BaseInfoType::set_allianceid(::google::protobuf::int32 value) {
  set_has_allianceid();
  allianceid_ = value;
}

// optional int32 AllianceSignet = 15;
inline bool BaseInfoType::has_alliancesignet() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BaseInfoType::set_has_alliancesignet() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BaseInfoType::clear_has_alliancesignet() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BaseInfoType::clear_alliancesignet() {
  alliancesignet_ = 0;
  clear_has_alliancesignet();
}
inline ::google::protobuf::int32 BaseInfoType::alliancesignet() const {
  return alliancesignet_;
}
inline void BaseInfoType::set_alliancesignet(::google::protobuf::int32 value) {
  set_has_alliancesignet();
  alliancesignet_ = value;
}

// optional int32 AllianceMemType = 16;
inline bool BaseInfoType::has_alliancememtype() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BaseInfoType::set_has_alliancememtype() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BaseInfoType::clear_has_alliancememtype() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BaseInfoType::clear_alliancememtype() {
  alliancememtype_ = 0;
  clear_has_alliancememtype();
}
inline ::google::protobuf::int32 BaseInfoType::alliancememtype() const {
  return alliancememtype_;
}
inline void BaseInfoType::set_alliancememtype(::google::protobuf::int32 value) {
  set_has_alliancememtype();
  alliancememtype_ = value;
}

// optional float PlayerPower = 17;
inline bool BaseInfoType::has_playerpower() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BaseInfoType::set_has_playerpower() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BaseInfoType::clear_has_playerpower() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BaseInfoType::clear_playerpower() {
  playerpower_ = 0;
  clear_has_playerpower();
}
inline float BaseInfoType::playerpower() const {
  return playerpower_;
}
inline void BaseInfoType::set_playerpower(float value) {
  set_has_playerpower();
  playerpower_ = value;
}

// optional int32 VipID = 18;
inline bool BaseInfoType::has_vipid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BaseInfoType::set_has_vipid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BaseInfoType::clear_has_vipid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BaseInfoType::clear_vipid() {
  vipid_ = 0;
  clear_has_vipid();
}
inline ::google::protobuf::int32 BaseInfoType::vipid() const {
  return vipid_;
}
inline void BaseInfoType::set_vipid(::google::protobuf::int32 value) {
  set_has_vipid();
  vipid_ = value;
}

// optional int32 VipTime = 19;
inline bool BaseInfoType::has_viptime() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BaseInfoType::set_has_viptime() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BaseInfoType::clear_has_viptime() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BaseInfoType::clear_viptime() {
  viptime_ = 0;
  clear_has_viptime();
}
inline ::google::protobuf::int32 BaseInfoType::viptime() const {
  return viptime_;
}
inline void BaseInfoType::set_viptime(::google::protobuf::int32 value) {
  set_has_viptime();
  viptime_ = value;
}

// optional int32 PlayerHo = 20;
inline bool BaseInfoType::has_playerho() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BaseInfoType::set_has_playerho() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BaseInfoType::clear_has_playerho() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BaseInfoType::clear_playerho() {
  playerho_ = 0;
  clear_has_playerho();
}
inline ::google::protobuf::int32 BaseInfoType::playerho() const {
  return playerho_;
}
inline void BaseInfoType::set_playerho(::google::protobuf::int32 value) {
  set_has_playerho();
  playerho_ = value;
}

// -------------------------------------------------------------------

// VersionResourceType

// required string GameVersion = 1;
inline bool VersionResourceType::has_gameversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VersionResourceType::set_has_gameversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VersionResourceType::clear_has_gameversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VersionResourceType::clear_gameversion() {
  if (gameversion_ != &::google::protobuf::internal::kEmptyString) {
    gameversion_->clear();
  }
  clear_has_gameversion();
}
inline const ::std::string& VersionResourceType::gameversion() const {
  return *gameversion_;
}
inline void VersionResourceType::set_gameversion(const ::std::string& value) {
  set_has_gameversion();
  if (gameversion_ == &::google::protobuf::internal::kEmptyString) {
    gameversion_ = new ::std::string;
  }
  gameversion_->assign(value);
}
inline void VersionResourceType::set_gameversion(const char* value) {
  set_has_gameversion();
  if (gameversion_ == &::google::protobuf::internal::kEmptyString) {
    gameversion_ = new ::std::string;
  }
  gameversion_->assign(value);
}
inline void VersionResourceType::set_gameversion(const char* value, size_t size) {
  set_has_gameversion();
  if (gameversion_ == &::google::protobuf::internal::kEmptyString) {
    gameversion_ = new ::std::string;
  }
  gameversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VersionResourceType::mutable_gameversion() {
  set_has_gameversion();
  if (gameversion_ == &::google::protobuf::internal::kEmptyString) {
    gameversion_ = new ::std::string;
  }
  return gameversion_;
}
inline ::std::string* VersionResourceType::release_gameversion() {
  clear_has_gameversion();
  if (gameversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gameversion_;
    gameversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VersionResourceType::set_allocated_gameversion(::std::string* gameversion) {
  if (gameversion_ != &::google::protobuf::internal::kEmptyString) {
    delete gameversion_;
  }
  if (gameversion) {
    set_has_gameversion();
    gameversion_ = gameversion;
  } else {
    clear_has_gameversion();
    gameversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string OsType = 2;
inline bool VersionResourceType::has_ostype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VersionResourceType::set_has_ostype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VersionResourceType::clear_has_ostype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VersionResourceType::clear_ostype() {
  if (ostype_ != &::google::protobuf::internal::kEmptyString) {
    ostype_->clear();
  }
  clear_has_ostype();
}
inline const ::std::string& VersionResourceType::ostype() const {
  return *ostype_;
}
inline void VersionResourceType::set_ostype(const ::std::string& value) {
  set_has_ostype();
  if (ostype_ == &::google::protobuf::internal::kEmptyString) {
    ostype_ = new ::std::string;
  }
  ostype_->assign(value);
}
inline void VersionResourceType::set_ostype(const char* value) {
  set_has_ostype();
  if (ostype_ == &::google::protobuf::internal::kEmptyString) {
    ostype_ = new ::std::string;
  }
  ostype_->assign(value);
}
inline void VersionResourceType::set_ostype(const char* value, size_t size) {
  set_has_ostype();
  if (ostype_ == &::google::protobuf::internal::kEmptyString) {
    ostype_ = new ::std::string;
  }
  ostype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VersionResourceType::mutable_ostype() {
  set_has_ostype();
  if (ostype_ == &::google::protobuf::internal::kEmptyString) {
    ostype_ = new ::std::string;
  }
  return ostype_;
}
inline ::std::string* VersionResourceType::release_ostype() {
  clear_has_ostype();
  if (ostype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ostype_;
    ostype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VersionResourceType::set_allocated_ostype(::std::string* ostype) {
  if (ostype_ != &::google::protobuf::internal::kEmptyString) {
    delete ostype_;
  }
  if (ostype) {
    set_has_ostype();
    ostype_ = ostype;
  } else {
    clear_has_ostype();
    ostype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ChanMerchant = 3;
inline bool VersionResourceType::has_chanmerchant() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VersionResourceType::set_has_chanmerchant() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VersionResourceType::clear_has_chanmerchant() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VersionResourceType::clear_chanmerchant() {
  if (chanmerchant_ != &::google::protobuf::internal::kEmptyString) {
    chanmerchant_->clear();
  }
  clear_has_chanmerchant();
}
inline const ::std::string& VersionResourceType::chanmerchant() const {
  return *chanmerchant_;
}
inline void VersionResourceType::set_chanmerchant(const ::std::string& value) {
  set_has_chanmerchant();
  if (chanmerchant_ == &::google::protobuf::internal::kEmptyString) {
    chanmerchant_ = new ::std::string;
  }
  chanmerchant_->assign(value);
}
inline void VersionResourceType::set_chanmerchant(const char* value) {
  set_has_chanmerchant();
  if (chanmerchant_ == &::google::protobuf::internal::kEmptyString) {
    chanmerchant_ = new ::std::string;
  }
  chanmerchant_->assign(value);
}
inline void VersionResourceType::set_chanmerchant(const char* value, size_t size) {
  set_has_chanmerchant();
  if (chanmerchant_ == &::google::protobuf::internal::kEmptyString) {
    chanmerchant_ = new ::std::string;
  }
  chanmerchant_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VersionResourceType::mutable_chanmerchant() {
  set_has_chanmerchant();
  if (chanmerchant_ == &::google::protobuf::internal::kEmptyString) {
    chanmerchant_ = new ::std::string;
  }
  return chanmerchant_;
}
inline ::std::string* VersionResourceType::release_chanmerchant() {
  clear_has_chanmerchant();
  if (chanmerchant_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chanmerchant_;
    chanmerchant_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VersionResourceType::set_allocated_chanmerchant(::std::string* chanmerchant) {
  if (chanmerchant_ != &::google::protobuf::internal::kEmptyString) {
    delete chanmerchant_;
  }
  if (chanmerchant) {
    set_has_chanmerchant();
    chanmerchant_ = chanmerchant;
  } else {
    clear_has_chanmerchant();
    chanmerchant_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ResourceVersion = 4;
inline bool VersionResourceType::has_resourceversion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VersionResourceType::set_has_resourceversion() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VersionResourceType::clear_has_resourceversion() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VersionResourceType::clear_resourceversion() {
  if (resourceversion_ != &::google::protobuf::internal::kEmptyString) {
    resourceversion_->clear();
  }
  clear_has_resourceversion();
}
inline const ::std::string& VersionResourceType::resourceversion() const {
  return *resourceversion_;
}
inline void VersionResourceType::set_resourceversion(const ::std::string& value) {
  set_has_resourceversion();
  if (resourceversion_ == &::google::protobuf::internal::kEmptyString) {
    resourceversion_ = new ::std::string;
  }
  resourceversion_->assign(value);
}
inline void VersionResourceType::set_resourceversion(const char* value) {
  set_has_resourceversion();
  if (resourceversion_ == &::google::protobuf::internal::kEmptyString) {
    resourceversion_ = new ::std::string;
  }
  resourceversion_->assign(value);
}
inline void VersionResourceType::set_resourceversion(const char* value, size_t size) {
  set_has_resourceversion();
  if (resourceversion_ == &::google::protobuf::internal::kEmptyString) {
    resourceversion_ = new ::std::string;
  }
  resourceversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VersionResourceType::mutable_resourceversion() {
  set_has_resourceversion();
  if (resourceversion_ == &::google::protobuf::internal::kEmptyString) {
    resourceversion_ = new ::std::string;
  }
  return resourceversion_;
}
inline ::std::string* VersionResourceType::release_resourceversion() {
  clear_has_resourceversion();
  if (resourceversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resourceversion_;
    resourceversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VersionResourceType::set_allocated_resourceversion(::std::string* resourceversion) {
  if (resourceversion_ != &::google::protobuf::internal::kEmptyString) {
    delete resourceversion_;
  }
  if (resourceversion) {
    set_has_resourceversion();
    resourceversion_ = resourceversion;
  } else {
    clear_has_resourceversion();
    resourceversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// KeyValue

// required string key = 1;
inline bool KeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyValue::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& KeyValue::key() const {
  return *key_;
}
inline void KeyValue::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void KeyValue::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void KeyValue::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyValue::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* KeyValue::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeyValue::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string value = 2;
inline bool KeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeyValue::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& KeyValue::value() const {
  return *value_;
}
inline void KeyValue::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void KeyValue::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void KeyValue::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyValue::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* KeyValue::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeyValue::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Item

// required int32 Type = 1;
inline bool Item::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Item::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Item::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Item::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Item::type() const {
  return type_;
}
inline void Item::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 SubType = 2;
inline bool Item::has_subtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Item::set_has_subtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Item::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Item::clear_subtype() {
  subtype_ = 0;
  clear_has_subtype();
}
inline ::google::protobuf::int32 Item::subtype() const {
  return subtype_;
}
inline void Item::set_subtype(::google::protobuf::int32 value) {
  set_has_subtype();
  subtype_ = value;
}

// required int32 num = 3;
inline bool Item::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Item::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Item::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Item::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 Item::num() const {
  return num_;
}
inline void Item::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// ItemList

// repeated .cs.Item item = 1;
inline int ItemList::item_size() const {
  return item_.size();
}
inline void ItemList::clear_item() {
  item_.Clear();
}
inline const ::cs::Item& ItemList::item(int index) const {
  return item_.Get(index);
}
inline ::cs::Item* ItemList::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::cs::Item* ItemList::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cs::Item >&
ItemList::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::cs::Item >*
ItemList::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// QuestInfo

// required string QuestId = 1;
inline bool QuestInfo::has_questid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestInfo::set_has_questid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestInfo::clear_has_questid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestInfo::clear_questid() {
  if (questid_ != &::google::protobuf::internal::kEmptyString) {
    questid_->clear();
  }
  clear_has_questid();
}
inline const ::std::string& QuestInfo::questid() const {
  return *questid_;
}
inline void QuestInfo::set_questid(const ::std::string& value) {
  set_has_questid();
  if (questid_ == &::google::protobuf::internal::kEmptyString) {
    questid_ = new ::std::string;
  }
  questid_->assign(value);
}
inline void QuestInfo::set_questid(const char* value) {
  set_has_questid();
  if (questid_ == &::google::protobuf::internal::kEmptyString) {
    questid_ = new ::std::string;
  }
  questid_->assign(value);
}
inline void QuestInfo::set_questid(const char* value, size_t size) {
  set_has_questid();
  if (questid_ == &::google::protobuf::internal::kEmptyString) {
    questid_ = new ::std::string;
  }
  questid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QuestInfo::mutable_questid() {
  set_has_questid();
  if (questid_ == &::google::protobuf::internal::kEmptyString) {
    questid_ = new ::std::string;
  }
  return questid_;
}
inline ::std::string* QuestInfo::release_questid() {
  clear_has_questid();
  if (questid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = questid_;
    questid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QuestInfo::set_allocated_questid(::std::string* questid) {
  if (questid_ != &::google::protobuf::internal::kEmptyString) {
    delete questid_;
  }
  if (questid) {
    set_has_questid();
    questid_ = questid;
  } else {
    clear_has_questid();
    questid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 State = 2;
inline bool QuestInfo::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestInfo::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 QuestInfo::state() const {
  return state_;
}
inline void QuestInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// required int32 Value = 3;
inline bool QuestInfo::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuestInfo::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuestInfo::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuestInfo::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 QuestInfo::value() const {
  return value_;
}
inline void QuestInfo::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// required int32 OffsetColor = 4;
inline bool QuestInfo::has_offsetcolor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuestInfo::set_has_offsetcolor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuestInfo::clear_has_offsetcolor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuestInfo::clear_offsetcolor() {
  offsetcolor_ = 0;
  clear_has_offsetcolor();
}
inline ::google::protobuf::int32 QuestInfo::offsetcolor() const {
  return offsetcolor_;
}
inline void QuestInfo::set_offsetcolor(::google::protobuf::int32 value) {
  set_has_offsetcolor();
  offsetcolor_ = value;
}

// required int32 TaskLv = 5;
inline bool QuestInfo::has_tasklv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QuestInfo::set_has_tasklv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QuestInfo::clear_has_tasklv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QuestInfo::clear_tasklv() {
  tasklv_ = 0;
  clear_has_tasklv();
}
inline ::google::protobuf::int32 QuestInfo::tasklv() const {
  return tasklv_;
}
inline void QuestInfo::set_tasklv(::google::protobuf::int32 value) {
  set_has_tasklv();
  tasklv_ = value;
}

// required int32 IsVip = 6;
inline bool QuestInfo::has_isvip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QuestInfo::set_has_isvip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QuestInfo::clear_has_isvip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QuestInfo::clear_isvip() {
  isvip_ = 0;
  clear_has_isvip();
}
inline ::google::protobuf::int32 QuestInfo::isvip() const {
  return isvip_;
}
inline void QuestInfo::set_isvip(::google::protobuf::int32 value) {
  set_has_isvip();
  isvip_ = value;
}

// -------------------------------------------------------------------

// AchievementData

// required string Id = 1;
inline bool AchievementData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AchievementData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AchievementData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AchievementData::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& AchievementData::id() const {
  return *id_;
}
inline void AchievementData::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void AchievementData::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void AchievementData::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AchievementData::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* AchievementData::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AchievementData::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 Index = 2;
inline bool AchievementData::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AchievementData::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AchievementData::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AchievementData::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 AchievementData::index() const {
  return index_;
}
inline void AchievementData::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// required int32 Status = 3;
inline bool AchievementData::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AchievementData::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AchievementData::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AchievementData::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 AchievementData::status() const {
  return status_;
}
inline void AchievementData::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// required int32 Store = 4;
inline bool AchievementData::has_store() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AchievementData::set_has_store() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AchievementData::clear_has_store() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AchievementData::clear_store() {
  store_ = 0;
  clear_has_store();
}
inline ::google::protobuf::int32 AchievementData::store() const {
  return store_;
}
inline void AchievementData::set_store(::google::protobuf::int32 value) {
  set_has_store();
  store_ = value;
}

// -------------------------------------------------------------------

// TechInfo

// required int32 TechKey = 1;
inline bool TechInfo::has_techkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TechInfo::set_has_techkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TechInfo::clear_has_techkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TechInfo::clear_techkey() {
  techkey_ = 0;
  clear_has_techkey();
}
inline ::google::protobuf::int32 TechInfo::techkey() const {
  return techkey_;
}
inline void TechInfo::set_techkey(::google::protobuf::int32 value) {
  set_has_techkey();
  techkey_ = value;
}

// required int32 TechLevel = 2;
inline bool TechInfo::has_techlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TechInfo::set_has_techlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TechInfo::clear_has_techlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TechInfo::clear_techlevel() {
  techlevel_ = 0;
  clear_has_techlevel();
}
inline ::google::protobuf::int32 TechInfo::techlevel() const {
  return techlevel_;
}
inline void TechInfo::set_techlevel(::google::protobuf::int32 value) {
  set_has_techlevel();
  techlevel_ = value;
}

// -------------------------------------------------------------------

// SoldersInfo

// required int32 SolderId = 1;
inline bool SoldersInfo::has_solderid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoldersInfo::set_has_solderid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoldersInfo::clear_has_solderid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoldersInfo::clear_solderid() {
  solderid_ = 0;
  clear_has_solderid();
}
inline ::google::protobuf::int32 SoldersInfo::solderid() const {
  return solderid_;
}
inline void SoldersInfo::set_solderid(::google::protobuf::int32 value) {
  set_has_solderid();
  solderid_ = value;
}

// required int32 SolderLevel = 2;
inline bool SoldersInfo::has_solderlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SoldersInfo::set_has_solderlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SoldersInfo::clear_has_solderlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SoldersInfo::clear_solderlevel() {
  solderlevel_ = 0;
  clear_has_solderlevel();
}
inline ::google::protobuf::int32 SoldersInfo::solderlevel() const {
  return solderlevel_;
}
inline void SoldersInfo::set_solderlevel(::google::protobuf::int32 value) {
  set_has_solderlevel();
  solderlevel_ = value;
}

// -------------------------------------------------------------------

// SkillsInfo

// required int32 SkillId = 1;
inline bool SkillsInfo::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillsInfo::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillsInfo::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillsInfo::clear_skillid() {
  skillid_ = 0;
  clear_has_skillid();
}
inline ::google::protobuf::int32 SkillsInfo::skillid() const {
  return skillid_;
}
inline void SkillsInfo::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
}

// -------------------------------------------------------------------

// PVPTeamInfo

// required int32 PlayerID = 1;
inline bool PVPTeamInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVPTeamInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVPTeamInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVPTeamInfo::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 PVPTeamInfo::playerid() const {
  return playerid_;
}
inline void PVPTeamInfo::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required int32 TeamID = 2;
inline bool PVPTeamInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PVPTeamInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PVPTeamInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PVPTeamInfo::clear_teamid() {
  teamid_ = 0;
  clear_has_teamid();
}
inline ::google::protobuf::int32 PVPTeamInfo::teamid() const {
  return teamid_;
}
inline void PVPTeamInfo::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
}

// required int32 RobotType = 3;
inline bool PVPTeamInfo::has_robottype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PVPTeamInfo::set_has_robottype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PVPTeamInfo::clear_has_robottype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PVPTeamInfo::clear_robottype() {
  robottype_ = 0;
  clear_has_robottype();
}
inline ::google::protobuf::int32 PVPTeamInfo::robottype() const {
  return robottype_;
}
inline void PVPTeamInfo::set_robottype(::google::protobuf::int32 value) {
  set_has_robottype();
  robottype_ = value;
}

// -------------------------------------------------------------------

// RoomEndInfoType

// repeated int32 PlayerID = 1;
inline int RoomEndInfoType::playerid_size() const {
  return playerid_.size();
}
inline void RoomEndInfoType::clear_playerid() {
  playerid_.Clear();
}
inline ::google::protobuf::int32 RoomEndInfoType::playerid(int index) const {
  return playerid_.Get(index);
}
inline void RoomEndInfoType::set_playerid(int index, ::google::protobuf::int32 value) {
  playerid_.Set(index, value);
}
inline void RoomEndInfoType::add_playerid(::google::protobuf::int32 value) {
  playerid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RoomEndInfoType::playerid() const {
  return playerid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RoomEndInfoType::mutable_playerid() {
  return &playerid_;
}

// repeated int32 PlayerStat = 2;
inline int RoomEndInfoType::playerstat_size() const {
  return playerstat_.size();
}
inline void RoomEndInfoType::clear_playerstat() {
  playerstat_.Clear();
}
inline ::google::protobuf::int32 RoomEndInfoType::playerstat(int index) const {
  return playerstat_.Get(index);
}
inline void RoomEndInfoType::set_playerstat(int index, ::google::protobuf::int32 value) {
  playerstat_.Set(index, value);
}
inline void RoomEndInfoType::add_playerstat(::google::protobuf::int32 value) {
  playerstat_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RoomEndInfoType::playerstat() const {
  return playerstat_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RoomEndInfoType::mutable_playerstat() {
  return &playerstat_;
}

// repeated int32 Power = 3;
inline int RoomEndInfoType::power_size() const {
  return power_.size();
}
inline void RoomEndInfoType::clear_power() {
  power_.Clear();
}
inline ::google::protobuf::int32 RoomEndInfoType::power(int index) const {
  return power_.Get(index);
}
inline void RoomEndInfoType::set_power(int index, ::google::protobuf::int32 value) {
  power_.Set(index, value);
}
inline void RoomEndInfoType::add_power(::google::protobuf::int32 value) {
  power_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RoomEndInfoType::power() const {
  return power_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RoomEndInfoType::mutable_power() {
  return &power_;
}

// -------------------------------------------------------------------

// CSNotifyClientReply

// -------------------------------------------------------------------

// PlayerVipList

// optional int32 SuperVipTime = 1;
inline bool PlayerVipList::has_superviptime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerVipList::set_has_superviptime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerVipList::clear_has_superviptime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerVipList::clear_superviptime() {
  superviptime_ = 0;
  clear_has_superviptime();
}
inline ::google::protobuf::int32 PlayerVipList::superviptime() const {
  return superviptime_;
}
inline void PlayerVipList::set_superviptime(::google::protobuf::int32 value) {
  set_has_superviptime();
  superviptime_ = value;
}

// optional int32 VipTime = 2;
inline bool PlayerVipList::has_viptime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerVipList::set_has_viptime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerVipList::clear_has_viptime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerVipList::clear_viptime() {
  viptime_ = 0;
  clear_has_viptime();
}
inline ::google::protobuf::int32 PlayerVipList::viptime() const {
  return viptime_;
}
inline void PlayerVipList::set_viptime(::google::protobuf::int32 value) {
  set_has_viptime();
  viptime_ = value;
}

// repeated .cs.VipChgInfo VipChg = 3;
inline int PlayerVipList::vipchg_size() const {
  return vipchg_.size();
}
inline void PlayerVipList::clear_vipchg() {
  vipchg_.Clear();
}
inline const ::cs::VipChgInfo& PlayerVipList::vipchg(int index) const {
  return vipchg_.Get(index);
}
inline ::cs::VipChgInfo* PlayerVipList::mutable_vipchg(int index) {
  return vipchg_.Mutable(index);
}
inline ::cs::VipChgInfo* PlayerVipList::add_vipchg() {
  return vipchg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cs::VipChgInfo >&
PlayerVipList::vipchg() const {
  return vipchg_;
}
inline ::google::protobuf::RepeatedPtrField< ::cs::VipChgInfo >*
PlayerVipList::mutable_vipchg() {
  return &vipchg_;
}

// -------------------------------------------------------------------

// VipChgInfo

// optional int32 VipType = 1;
inline bool VipChgInfo::has_viptype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VipChgInfo::set_has_viptype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VipChgInfo::clear_has_viptype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VipChgInfo::clear_viptype() {
  viptype_ = 0;
  clear_has_viptype();
}
inline ::google::protobuf::int32 VipChgInfo::viptype() const {
  return viptype_;
}
inline void VipChgInfo::set_viptype(::google::protobuf::int32 value) {
  set_has_viptype();
  viptype_ = value;
}

// optional int32 ChgTime = 2;
inline bool VipChgInfo::has_chgtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VipChgInfo::set_has_chgtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VipChgInfo::clear_has_chgtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VipChgInfo::clear_chgtime() {
  chgtime_ = 0;
  clear_has_chgtime();
}
inline ::google::protobuf::int32 VipChgInfo::chgtime() const {
  return chgtime_;
}
inline void VipChgInfo::set_chgtime(::google::protobuf::int32 value) {
  set_has_chgtime();
  chgtime_ = value;
}

// -------------------------------------------------------------------

// PlayerUnit

// optional int32 Type = 1;
inline bool PlayerUnit::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerUnit::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerUnit::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerUnit::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 PlayerUnit::type() const {
  return type_;
}
inline void PlayerUnit::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 Level = 2;
inline bool PlayerUnit::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerUnit::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerUnit::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerUnit::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PlayerUnit::level() const {
  return level_;
}
inline void PlayerUnit::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// PlayerCard

// optional int32 Id = 1;
inline bool PlayerCard::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerCard::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerCard::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerCard::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PlayerCard::id() const {
  return id_;
}
inline void PlayerCard::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 Number = 2;
inline bool PlayerCard::has_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerCard::set_has_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerCard::clear_has_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerCard::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline ::google::protobuf::int32 PlayerCard::number() const {
  return number_;
}
inline void PlayerCard::set_number(::google::protobuf::int32 value) {
  set_has_number();
  number_ = value;
}

// -------------------------------------------------------------------

// PVPBattleReportPlayers

// optional uint64 RoomID = 1;
inline bool PVPBattleReportPlayers::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVPBattleReportPlayers::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVPBattleReportPlayers::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVPBattleReportPlayers::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 PVPBattleReportPlayers::roomid() const {
  return roomid_;
}
inline void PVPBattleReportPlayers::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cs_5fcommon_2eproto__INCLUDED
