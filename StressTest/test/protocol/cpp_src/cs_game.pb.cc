// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_game.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs_game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cs {

namespace {

const ::google::protobuf::Descriptor* CSGetGameSvrMinLoadReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetGameSvrMinLoadReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetGameSvrMinLoadRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetGameSvrMinLoadRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetGameSvrMinLoadRes_GameSvrHost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetGameSvrMinLoadRes_GameSvrHost_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSHeartbeatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSHeartbeatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSHeartbeatRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSHeartbeatRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSUpdateSecretKeyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSUpdateSecretKeyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSUpdateSecretKeyRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSUpdateSecretKeyRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSKickOffNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSKickOffNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPingRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPingRes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_5fgame_2eproto() {
  protobuf_AddDesc_cs_5fgame_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs_game.proto");
  GOOGLE_CHECK(file != NULL);
  CSGetGameSvrMinLoadReq_descriptor_ = file->message_type(0);
  static const int CSGetGameSvrMinLoadReq_offsets_[1] = {
  };
  CSGetGameSvrMinLoadReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetGameSvrMinLoadReq_descriptor_,
      CSGetGameSvrMinLoadReq::default_instance_,
      CSGetGameSvrMinLoadReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetGameSvrMinLoadReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetGameSvrMinLoadReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetGameSvrMinLoadReq));
  CSGetGameSvrMinLoadRes_descriptor_ = file->message_type(1);
  static const int CSGetGameSvrMinLoadRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetGameSvrMinLoadRes, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetGameSvrMinLoadRes, hosts_),
  };
  CSGetGameSvrMinLoadRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetGameSvrMinLoadRes_descriptor_,
      CSGetGameSvrMinLoadRes::default_instance_,
      CSGetGameSvrMinLoadRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetGameSvrMinLoadRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetGameSvrMinLoadRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetGameSvrMinLoadRes));
  CSGetGameSvrMinLoadRes_GameSvrHost_descriptor_ = CSGetGameSvrMinLoadRes_descriptor_->nested_type(0);
  static const int CSGetGameSvrMinLoadRes_GameSvrHost_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetGameSvrMinLoadRes_GameSvrHost, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetGameSvrMinLoadRes_GameSvrHost, port_),
  };
  CSGetGameSvrMinLoadRes_GameSvrHost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetGameSvrMinLoadRes_GameSvrHost_descriptor_,
      CSGetGameSvrMinLoadRes_GameSvrHost::default_instance_,
      CSGetGameSvrMinLoadRes_GameSvrHost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetGameSvrMinLoadRes_GameSvrHost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetGameSvrMinLoadRes_GameSvrHost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetGameSvrMinLoadRes_GameSvrHost));
  CSHeartbeatReq_descriptor_ = file->message_type(2);
  static const int CSHeartbeatReq_offsets_[1] = {
  };
  CSHeartbeatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSHeartbeatReq_descriptor_,
      CSHeartbeatReq::default_instance_,
      CSHeartbeatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSHeartbeatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSHeartbeatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSHeartbeatReq));
  CSHeartbeatRes_descriptor_ = file->message_type(3);
  static const int CSHeartbeatRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSHeartbeatRes, ticksec_),
  };
  CSHeartbeatRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSHeartbeatRes_descriptor_,
      CSHeartbeatRes::default_instance_,
      CSHeartbeatRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSHeartbeatRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSHeartbeatRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSHeartbeatRes));
  CSUpdateSecretKeyReq_descriptor_ = file->message_type(4);
  static const int CSUpdateSecretKeyReq_offsets_[1] = {
  };
  CSUpdateSecretKeyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSUpdateSecretKeyReq_descriptor_,
      CSUpdateSecretKeyReq::default_instance_,
      CSUpdateSecretKeyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSUpdateSecretKeyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSUpdateSecretKeyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSUpdateSecretKeyReq));
  CSUpdateSecretKeyRes_descriptor_ = file->message_type(5);
  static const int CSUpdateSecretKeyRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSUpdateSecretKeyRes, secretkey_),
  };
  CSUpdateSecretKeyRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSUpdateSecretKeyRes_descriptor_,
      CSUpdateSecretKeyRes::default_instance_,
      CSUpdateSecretKeyRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSUpdateSecretKeyRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSUpdateSecretKeyRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSUpdateSecretKeyRes));
  CSKickOffNotify_descriptor_ = file->message_type(6);
  static const int CSKickOffNotify_offsets_[1] = {
  };
  CSKickOffNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSKickOffNotify_descriptor_,
      CSKickOffNotify::default_instance_,
      CSKickOffNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSKickOffNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSKickOffNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSKickOffNotify));
  CSPingReq_descriptor_ = file->message_type(7);
  static const int CSPingReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPingReq, clienttm_),
  };
  CSPingReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPingReq_descriptor_,
      CSPingReq::default_instance_,
      CSPingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPingReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPingReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPingReq));
  CSPingRes_descriptor_ = file->message_type(8);
  static const int CSPingRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPingRes, clienttm_),
  };
  CSPingRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPingRes_descriptor_,
      CSPingRes::default_instance_,
      CSPingRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPingRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPingRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPingRes));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_5fgame_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetGameSvrMinLoadReq_descriptor_, &CSGetGameSvrMinLoadReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetGameSvrMinLoadRes_descriptor_, &CSGetGameSvrMinLoadRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetGameSvrMinLoadRes_GameSvrHost_descriptor_, &CSGetGameSvrMinLoadRes_GameSvrHost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSHeartbeatReq_descriptor_, &CSHeartbeatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSHeartbeatRes_descriptor_, &CSHeartbeatRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSUpdateSecretKeyReq_descriptor_, &CSUpdateSecretKeyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSUpdateSecretKeyRes_descriptor_, &CSUpdateSecretKeyRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSKickOffNotify_descriptor_, &CSKickOffNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPingReq_descriptor_, &CSPingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPingRes_descriptor_, &CSPingRes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cs_5fgame_2eproto() {
  delete CSGetGameSvrMinLoadReq::default_instance_;
  delete CSGetGameSvrMinLoadReq_reflection_;
  delete CSGetGameSvrMinLoadRes::default_instance_;
  delete CSGetGameSvrMinLoadRes_reflection_;
  delete CSGetGameSvrMinLoadRes_GameSvrHost::default_instance_;
  delete CSGetGameSvrMinLoadRes_GameSvrHost_reflection_;
  delete CSHeartbeatReq::default_instance_;
  delete CSHeartbeatReq_reflection_;
  delete CSHeartbeatRes::default_instance_;
  delete CSHeartbeatRes_reflection_;
  delete CSUpdateSecretKeyReq::default_instance_;
  delete CSUpdateSecretKeyReq_reflection_;
  delete CSUpdateSecretKeyRes::default_instance_;
  delete CSUpdateSecretKeyRes_reflection_;
  delete CSKickOffNotify::default_instance_;
  delete CSKickOffNotify_reflection_;
  delete CSPingReq::default_instance_;
  delete CSPingReq_reflection_;
  delete CSPingRes::default_instance_;
  delete CSPingRes_reflection_;
}

void protobuf_AddDesc_cs_5fgame_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rcs_game.proto\022\002cs\"\030\n\026CSGetGameSvrMinLo"
    "adReq\"\211\001\n\026CSGetGameSvrMinLoadRes\022\017\n\007RetC"
    "ode\030\001 \002(\005\0225\n\005Hosts\030\002 \003(\0132&.cs.CSGetGameS"
    "vrMinLoadRes.GameSvrHost\032\'\n\013GameSvrHost\022"
    "\n\n\002Ip\030\001 \002(\t\022\014\n\004Port\030\002 \002(\005\"\020\n\016CSHeartbeat"
    "Req\"!\n\016CSHeartbeatRes\022\017\n\007TickSec\030\001 \002(\r\"\026"
    "\n\024CSUpdateSecretKeyReq\")\n\024CSUpdateSecret"
    "KeyRes\022\021\n\tSecretKey\030\001 \002(\014\"\021\n\017CSKickOffNo"
    "tify\"\035\n\tCSPingReq\022\020\n\010ClientTm\030\001 \002(\r\"\035\n\tC"
    "SPingRes\022\020\n\010ClientTm\030\001 \002(\r", 386);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs_game.proto", &protobuf_RegisterTypes);
  CSGetGameSvrMinLoadReq::default_instance_ = new CSGetGameSvrMinLoadReq();
  CSGetGameSvrMinLoadRes::default_instance_ = new CSGetGameSvrMinLoadRes();
  CSGetGameSvrMinLoadRes_GameSvrHost::default_instance_ = new CSGetGameSvrMinLoadRes_GameSvrHost();
  CSHeartbeatReq::default_instance_ = new CSHeartbeatReq();
  CSHeartbeatRes::default_instance_ = new CSHeartbeatRes();
  CSUpdateSecretKeyReq::default_instance_ = new CSUpdateSecretKeyReq();
  CSUpdateSecretKeyRes::default_instance_ = new CSUpdateSecretKeyRes();
  CSKickOffNotify::default_instance_ = new CSKickOffNotify();
  CSPingReq::default_instance_ = new CSPingReq();
  CSPingRes::default_instance_ = new CSPingRes();
  CSGetGameSvrMinLoadReq::default_instance_->InitAsDefaultInstance();
  CSGetGameSvrMinLoadRes::default_instance_->InitAsDefaultInstance();
  CSGetGameSvrMinLoadRes_GameSvrHost::default_instance_->InitAsDefaultInstance();
  CSHeartbeatReq::default_instance_->InitAsDefaultInstance();
  CSHeartbeatRes::default_instance_->InitAsDefaultInstance();
  CSUpdateSecretKeyReq::default_instance_->InitAsDefaultInstance();
  CSUpdateSecretKeyRes::default_instance_->InitAsDefaultInstance();
  CSKickOffNotify::default_instance_->InitAsDefaultInstance();
  CSPingReq::default_instance_->InitAsDefaultInstance();
  CSPingRes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_5fgame_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_5fgame_2eproto {
  StaticDescriptorInitializer_cs_5fgame_2eproto() {
    protobuf_AddDesc_cs_5fgame_2eproto();
  }
} static_descriptor_initializer_cs_5fgame_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSGetGameSvrMinLoadReq::CSGetGameSvrMinLoadReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetGameSvrMinLoadReq::InitAsDefaultInstance() {
}

CSGetGameSvrMinLoadReq::CSGetGameSvrMinLoadReq(const CSGetGameSvrMinLoadReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetGameSvrMinLoadReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetGameSvrMinLoadReq::~CSGetGameSvrMinLoadReq() {
  SharedDtor();
}

void CSGetGameSvrMinLoadReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetGameSvrMinLoadReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetGameSvrMinLoadReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetGameSvrMinLoadReq_descriptor_;
}

const CSGetGameSvrMinLoadReq& CSGetGameSvrMinLoadReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fgame_2eproto();
  return *default_instance_;
}

CSGetGameSvrMinLoadReq* CSGetGameSvrMinLoadReq::default_instance_ = NULL;

CSGetGameSvrMinLoadReq* CSGetGameSvrMinLoadReq::New() const {
  return new CSGetGameSvrMinLoadReq;
}

void CSGetGameSvrMinLoadReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetGameSvrMinLoadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSGetGameSvrMinLoadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetGameSvrMinLoadReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetGameSvrMinLoadReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetGameSvrMinLoadReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetGameSvrMinLoadReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetGameSvrMinLoadReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetGameSvrMinLoadReq::MergeFrom(const CSGetGameSvrMinLoadReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetGameSvrMinLoadReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetGameSvrMinLoadReq::CopyFrom(const CSGetGameSvrMinLoadReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetGameSvrMinLoadReq::IsInitialized() const {

  return true;
}

void CSGetGameSvrMinLoadReq::Swap(CSGetGameSvrMinLoadReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetGameSvrMinLoadReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetGameSvrMinLoadReq_descriptor_;
  metadata.reflection = CSGetGameSvrMinLoadReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetGameSvrMinLoadRes_GameSvrHost::kIpFieldNumber;
const int CSGetGameSvrMinLoadRes_GameSvrHost::kPortFieldNumber;
#endif  // !_MSC_VER

CSGetGameSvrMinLoadRes_GameSvrHost::CSGetGameSvrMinLoadRes_GameSvrHost()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetGameSvrMinLoadRes_GameSvrHost::InitAsDefaultInstance() {
}

CSGetGameSvrMinLoadRes_GameSvrHost::CSGetGameSvrMinLoadRes_GameSvrHost(const CSGetGameSvrMinLoadRes_GameSvrHost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetGameSvrMinLoadRes_GameSvrHost::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetGameSvrMinLoadRes_GameSvrHost::~CSGetGameSvrMinLoadRes_GameSvrHost() {
  SharedDtor();
}

void CSGetGameSvrMinLoadRes_GameSvrHost::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void CSGetGameSvrMinLoadRes_GameSvrHost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetGameSvrMinLoadRes_GameSvrHost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetGameSvrMinLoadRes_GameSvrHost_descriptor_;
}

const CSGetGameSvrMinLoadRes_GameSvrHost& CSGetGameSvrMinLoadRes_GameSvrHost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fgame_2eproto();
  return *default_instance_;
}

CSGetGameSvrMinLoadRes_GameSvrHost* CSGetGameSvrMinLoadRes_GameSvrHost::default_instance_ = NULL;

CSGetGameSvrMinLoadRes_GameSvrHost* CSGetGameSvrMinLoadRes_GameSvrHost::New() const {
  return new CSGetGameSvrMinLoadRes_GameSvrHost;
}

void CSGetGameSvrMinLoadRes_GameSvrHost::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetGameSvrMinLoadRes_GameSvrHost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Port;
        break;
      }

      // required int32 Port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGetGameSvrMinLoadRes_GameSvrHost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // required int32 Port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetGameSvrMinLoadRes_GameSvrHost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required int32 Port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetGameSvrMinLoadRes_GameSvrHost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required int32 Port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetGameSvrMinLoadRes_GameSvrHost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetGameSvrMinLoadRes_GameSvrHost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetGameSvrMinLoadRes_GameSvrHost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetGameSvrMinLoadRes_GameSvrHost::MergeFrom(const CSGetGameSvrMinLoadRes_GameSvrHost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetGameSvrMinLoadRes_GameSvrHost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetGameSvrMinLoadRes_GameSvrHost::CopyFrom(const CSGetGameSvrMinLoadRes_GameSvrHost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetGameSvrMinLoadRes_GameSvrHost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSGetGameSvrMinLoadRes_GameSvrHost::Swap(CSGetGameSvrMinLoadRes_GameSvrHost* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetGameSvrMinLoadRes_GameSvrHost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetGameSvrMinLoadRes_GameSvrHost_descriptor_;
  metadata.reflection = CSGetGameSvrMinLoadRes_GameSvrHost_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSGetGameSvrMinLoadRes::kRetCodeFieldNumber;
const int CSGetGameSvrMinLoadRes::kHostsFieldNumber;
#endif  // !_MSC_VER

CSGetGameSvrMinLoadRes::CSGetGameSvrMinLoadRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetGameSvrMinLoadRes::InitAsDefaultInstance() {
}

CSGetGameSvrMinLoadRes::CSGetGameSvrMinLoadRes(const CSGetGameSvrMinLoadRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetGameSvrMinLoadRes::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetGameSvrMinLoadRes::~CSGetGameSvrMinLoadRes() {
  SharedDtor();
}

void CSGetGameSvrMinLoadRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetGameSvrMinLoadRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetGameSvrMinLoadRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetGameSvrMinLoadRes_descriptor_;
}

const CSGetGameSvrMinLoadRes& CSGetGameSvrMinLoadRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fgame_2eproto();
  return *default_instance_;
}

CSGetGameSvrMinLoadRes* CSGetGameSvrMinLoadRes::default_instance_ = NULL;

CSGetGameSvrMinLoadRes* CSGetGameSvrMinLoadRes::New() const {
  return new CSGetGameSvrMinLoadRes;
}

void CSGetGameSvrMinLoadRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  hosts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetGameSvrMinLoadRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 RetCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Hosts;
        break;
      }

      // repeated .cs.CSGetGameSvrMinLoadRes.GameSvrHost Hosts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Hosts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hosts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Hosts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGetGameSvrMinLoadRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 RetCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // repeated .cs.CSGetGameSvrMinLoadRes.GameSvrHost Hosts = 2;
  for (int i = 0; i < this->hosts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hosts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetGameSvrMinLoadRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 RetCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // repeated .cs.CSGetGameSvrMinLoadRes.GameSvrHost Hosts = 2;
  for (int i = 0; i < this->hosts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hosts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetGameSvrMinLoadRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 RetCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  // repeated .cs.CSGetGameSvrMinLoadRes.GameSvrHost Hosts = 2;
  total_size += 1 * this->hosts_size();
  for (int i = 0; i < this->hosts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hosts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetGameSvrMinLoadRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetGameSvrMinLoadRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetGameSvrMinLoadRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetGameSvrMinLoadRes::MergeFrom(const CSGetGameSvrMinLoadRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  hosts_.MergeFrom(from.hosts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetGameSvrMinLoadRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetGameSvrMinLoadRes::CopyFrom(const CSGetGameSvrMinLoadRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetGameSvrMinLoadRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < hosts_size(); i++) {
    if (!this->hosts(i).IsInitialized()) return false;
  }
  return true;
}

void CSGetGameSvrMinLoadRes::Swap(CSGetGameSvrMinLoadRes* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    hosts_.Swap(&other->hosts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetGameSvrMinLoadRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetGameSvrMinLoadRes_descriptor_;
  metadata.reflection = CSGetGameSvrMinLoadRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSHeartbeatReq::CSHeartbeatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSHeartbeatReq::InitAsDefaultInstance() {
}

CSHeartbeatReq::CSHeartbeatReq(const CSHeartbeatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSHeartbeatReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSHeartbeatReq::~CSHeartbeatReq() {
  SharedDtor();
}

void CSHeartbeatReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSHeartbeatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSHeartbeatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSHeartbeatReq_descriptor_;
}

const CSHeartbeatReq& CSHeartbeatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fgame_2eproto();
  return *default_instance_;
}

CSHeartbeatReq* CSHeartbeatReq::default_instance_ = NULL;

CSHeartbeatReq* CSHeartbeatReq::New() const {
  return new CSHeartbeatReq;
}

void CSHeartbeatReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSHeartbeatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSHeartbeatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSHeartbeatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSHeartbeatReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSHeartbeatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSHeartbeatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSHeartbeatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSHeartbeatReq::MergeFrom(const CSHeartbeatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSHeartbeatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSHeartbeatReq::CopyFrom(const CSHeartbeatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSHeartbeatReq::IsInitialized() const {

  return true;
}

void CSHeartbeatReq::Swap(CSHeartbeatReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSHeartbeatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSHeartbeatReq_descriptor_;
  metadata.reflection = CSHeartbeatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSHeartbeatRes::kTickSecFieldNumber;
#endif  // !_MSC_VER

CSHeartbeatRes::CSHeartbeatRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSHeartbeatRes::InitAsDefaultInstance() {
}

CSHeartbeatRes::CSHeartbeatRes(const CSHeartbeatRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSHeartbeatRes::SharedCtor() {
  _cached_size_ = 0;
  ticksec_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSHeartbeatRes::~CSHeartbeatRes() {
  SharedDtor();
}

void CSHeartbeatRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSHeartbeatRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSHeartbeatRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSHeartbeatRes_descriptor_;
}

const CSHeartbeatRes& CSHeartbeatRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fgame_2eproto();
  return *default_instance_;
}

CSHeartbeatRes* CSHeartbeatRes::default_instance_ = NULL;

CSHeartbeatRes* CSHeartbeatRes::New() const {
  return new CSHeartbeatRes;
}

void CSHeartbeatRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ticksec_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSHeartbeatRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 TickSec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticksec_)));
          set_has_ticksec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSHeartbeatRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 TickSec = 1;
  if (has_ticksec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ticksec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSHeartbeatRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 TickSec = 1;
  if (has_ticksec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ticksec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSHeartbeatRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 TickSec = 1;
    if (has_ticksec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticksec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSHeartbeatRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSHeartbeatRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSHeartbeatRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSHeartbeatRes::MergeFrom(const CSHeartbeatRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ticksec()) {
      set_ticksec(from.ticksec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSHeartbeatRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSHeartbeatRes::CopyFrom(const CSHeartbeatRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSHeartbeatRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSHeartbeatRes::Swap(CSHeartbeatRes* other) {
  if (other != this) {
    std::swap(ticksec_, other->ticksec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSHeartbeatRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSHeartbeatRes_descriptor_;
  metadata.reflection = CSHeartbeatRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSUpdateSecretKeyReq::CSUpdateSecretKeyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSUpdateSecretKeyReq::InitAsDefaultInstance() {
}

CSUpdateSecretKeyReq::CSUpdateSecretKeyReq(const CSUpdateSecretKeyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSUpdateSecretKeyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSUpdateSecretKeyReq::~CSUpdateSecretKeyReq() {
  SharedDtor();
}

void CSUpdateSecretKeyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSUpdateSecretKeyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSUpdateSecretKeyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSUpdateSecretKeyReq_descriptor_;
}

const CSUpdateSecretKeyReq& CSUpdateSecretKeyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fgame_2eproto();
  return *default_instance_;
}

CSUpdateSecretKeyReq* CSUpdateSecretKeyReq::default_instance_ = NULL;

CSUpdateSecretKeyReq* CSUpdateSecretKeyReq::New() const {
  return new CSUpdateSecretKeyReq;
}

void CSUpdateSecretKeyReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSUpdateSecretKeyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSUpdateSecretKeyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSUpdateSecretKeyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSUpdateSecretKeyReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSUpdateSecretKeyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSUpdateSecretKeyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSUpdateSecretKeyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSUpdateSecretKeyReq::MergeFrom(const CSUpdateSecretKeyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSUpdateSecretKeyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUpdateSecretKeyReq::CopyFrom(const CSUpdateSecretKeyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUpdateSecretKeyReq::IsInitialized() const {

  return true;
}

void CSUpdateSecretKeyReq::Swap(CSUpdateSecretKeyReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSUpdateSecretKeyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSUpdateSecretKeyReq_descriptor_;
  metadata.reflection = CSUpdateSecretKeyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSUpdateSecretKeyRes::kSecretKeyFieldNumber;
#endif  // !_MSC_VER

CSUpdateSecretKeyRes::CSUpdateSecretKeyRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSUpdateSecretKeyRes::InitAsDefaultInstance() {
}

CSUpdateSecretKeyRes::CSUpdateSecretKeyRes(const CSUpdateSecretKeyRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSUpdateSecretKeyRes::SharedCtor() {
  _cached_size_ = 0;
  secretkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSUpdateSecretKeyRes::~CSUpdateSecretKeyRes() {
  SharedDtor();
}

void CSUpdateSecretKeyRes::SharedDtor() {
  if (secretkey_ != &::google::protobuf::internal::kEmptyString) {
    delete secretkey_;
  }
  if (this != default_instance_) {
  }
}

void CSUpdateSecretKeyRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSUpdateSecretKeyRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSUpdateSecretKeyRes_descriptor_;
}

const CSUpdateSecretKeyRes& CSUpdateSecretKeyRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fgame_2eproto();
  return *default_instance_;
}

CSUpdateSecretKeyRes* CSUpdateSecretKeyRes::default_instance_ = NULL;

CSUpdateSecretKeyRes* CSUpdateSecretKeyRes::New() const {
  return new CSUpdateSecretKeyRes;
}

void CSUpdateSecretKeyRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_secretkey()) {
      if (secretkey_ != &::google::protobuf::internal::kEmptyString) {
        secretkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSUpdateSecretKeyRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes SecretKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secretkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSUpdateSecretKeyRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes SecretKey = 1;
  if (has_secretkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->secretkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSUpdateSecretKeyRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes SecretKey = 1;
  if (has_secretkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->secretkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSUpdateSecretKeyRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes SecretKey = 1;
    if (has_secretkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secretkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSUpdateSecretKeyRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSUpdateSecretKeyRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSUpdateSecretKeyRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSUpdateSecretKeyRes::MergeFrom(const CSUpdateSecretKeyRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secretkey()) {
      set_secretkey(from.secretkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSUpdateSecretKeyRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUpdateSecretKeyRes::CopyFrom(const CSUpdateSecretKeyRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUpdateSecretKeyRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSUpdateSecretKeyRes::Swap(CSUpdateSecretKeyRes* other) {
  if (other != this) {
    std::swap(secretkey_, other->secretkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSUpdateSecretKeyRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSUpdateSecretKeyRes_descriptor_;
  metadata.reflection = CSUpdateSecretKeyRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSKickOffNotify::CSKickOffNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSKickOffNotify::InitAsDefaultInstance() {
}

CSKickOffNotify::CSKickOffNotify(const CSKickOffNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSKickOffNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSKickOffNotify::~CSKickOffNotify() {
  SharedDtor();
}

void CSKickOffNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSKickOffNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSKickOffNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSKickOffNotify_descriptor_;
}

const CSKickOffNotify& CSKickOffNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fgame_2eproto();
  return *default_instance_;
}

CSKickOffNotify* CSKickOffNotify::default_instance_ = NULL;

CSKickOffNotify* CSKickOffNotify::New() const {
  return new CSKickOffNotify;
}

void CSKickOffNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSKickOffNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSKickOffNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSKickOffNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSKickOffNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSKickOffNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSKickOffNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSKickOffNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSKickOffNotify::MergeFrom(const CSKickOffNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSKickOffNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSKickOffNotify::CopyFrom(const CSKickOffNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSKickOffNotify::IsInitialized() const {

  return true;
}

void CSKickOffNotify::Swap(CSKickOffNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSKickOffNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSKickOffNotify_descriptor_;
  metadata.reflection = CSKickOffNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPingReq::kClientTmFieldNumber;
#endif  // !_MSC_VER

CSPingReq::CSPingReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPingReq::InitAsDefaultInstance() {
}

CSPingReq::CSPingReq(const CSPingReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPingReq::SharedCtor() {
  _cached_size_ = 0;
  clienttm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPingReq::~CSPingReq() {
  SharedDtor();
}

void CSPingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPingReq_descriptor_;
}

const CSPingReq& CSPingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fgame_2eproto();
  return *default_instance_;
}

CSPingReq* CSPingReq::default_instance_ = NULL;

CSPingReq* CSPingReq::New() const {
  return new CSPingReq;
}

void CSPingReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clienttm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ClientTm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clienttm_)));
          set_has_clienttm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ClientTm = 1;
  if (has_clienttm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clienttm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ClientTm = 1;
  if (has_clienttm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clienttm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPingReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ClientTm = 1;
    if (has_clienttm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clienttm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPingReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPingReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPingReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPingReq::MergeFrom(const CSPingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clienttm()) {
      set_clienttm(from.clienttm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPingReq::CopyFrom(const CSPingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPingReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSPingReq::Swap(CSPingReq* other) {
  if (other != this) {
    std::swap(clienttm_, other->clienttm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPingReq_descriptor_;
  metadata.reflection = CSPingReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPingRes::kClientTmFieldNumber;
#endif  // !_MSC_VER

CSPingRes::CSPingRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPingRes::InitAsDefaultInstance() {
}

CSPingRes::CSPingRes(const CSPingRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPingRes::SharedCtor() {
  _cached_size_ = 0;
  clienttm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPingRes::~CSPingRes() {
  SharedDtor();
}

void CSPingRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPingRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPingRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPingRes_descriptor_;
}

const CSPingRes& CSPingRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fgame_2eproto();
  return *default_instance_;
}

CSPingRes* CSPingRes::default_instance_ = NULL;

CSPingRes* CSPingRes::New() const {
  return new CSPingRes;
}

void CSPingRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clienttm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPingRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ClientTm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clienttm_)));
          set_has_clienttm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPingRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ClientTm = 1;
  if (has_clienttm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clienttm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPingRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ClientTm = 1;
  if (has_clienttm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clienttm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPingRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ClientTm = 1;
    if (has_clienttm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clienttm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPingRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPingRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPingRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPingRes::MergeFrom(const CSPingRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clienttm()) {
      set_clienttm(from.clienttm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPingRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPingRes::CopyFrom(const CSPingRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPingRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSPingRes::Swap(CSPingRes* other) {
  if (other != this) {
    std::swap(clienttm_, other->clienttm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPingRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPingRes_descriptor_;
  metadata.reflection = CSPingRes_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cs

// @@protoc_insertion_point(global_scope)
