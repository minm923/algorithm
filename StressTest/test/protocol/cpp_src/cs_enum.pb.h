// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_enum.proto

#ifndef PROTOBUF_cs_5fenum_2eproto__INCLUDED
#define PROTOBUF_cs_5fenum_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace cs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cs_5fenum_2eproto();
void protobuf_AssignDesc_cs_5fenum_2eproto();
void protobuf_ShutdownFile_cs_5fenum_2eproto();


enum EnmCmdID {
  CS_LSFRAME_PUSH = 0,
  CS_PHP_REQ = 1,
  CS_PHP_RES = 2,
  CS_GET_GAME_SVR_MIN_LOAD_REQ = 3,
  CS_GET_GAME_SVR_MIN_LOAD_RES = 4,
  CS_HEARTBEAT_REQ = 5,
  CS_HEARTBEAT_RES = 6,
  CS_UPDATE_SECRET_KEY_REQ = 7,
  CS_UPDATE_SECRET_KEY_RES = 8,
  CS_KICK_OFF_NOTIFY = 9,
  CS_PING_REQ = 11,
  CS_PING_RES = 12,
  CS_STAT_LOG_REQ = 13,
  CS_STAT_LOG_RES = 14,
  CS_PVP_STAT_REQ = 15,
  CS_PVP_STAT_RES = 16,
  CS_TEST_HELLO_REQ = 10005,
  CS_TEST_HELLO_RES = 10006,
  CS_LOGIN_REQ = 10101,
  CS_LOGIN_RES = 10102,
  CS_FINALIZE_ACCOUNT_REQ = 10103,
  CS_FINALIZE_ACCOUNT_RES = 10104,
  CS_RELOGIN_REQ = 10105,
  CS_RELOGIN_RES = 10106,
  CS_REEDEM_CODE_REQ = 10107,
  CS_REEDEM_CODE_RES = 10108,
  CS_BOOT_REQ = 10109,
  CS_BOOT_RES = 10110,
  CS_GET_RANDOM_NAME_REQ = 10111,
  CS_GET_RANDOM_NAME_RES = 10112,
  CS_CHANGE_NAME_REQ = 10113,
  CS_CHANGE_NAME_RES = 10114,
  CS_GET_BASEINFO_REQ = 10201,
  CS_GET_BASEINFO_RES = 10202,
  CS_SETDATA_REQ = 10203,
  CS_SETDATA_RES = 10204,
  CS_GETDATA_REQ = 10205,
  CS_GETDATA_RES = 10206,
  CS_CHANGE_PLAYER_HEAD_REQ = 10207,
  CS_CHANGE_PLAYER_HEAD_RES = 10208,
  CS_GET_UNLOCK_CARD_REQ = 10209,
  CS_GET_UNLOCK_CARD_RES = 10210,
  CS_GET_PLAYER_BASE_DATA_REQ = 10211,
  CS_GET_PLAYER_BASE_DATA_RES = 10212,
  CS_PULL_MY_RANK_LIST_REQ = 10301,
  CS_PULL_MY_RANK_LIST_RES = 10302,
  CS_PULL_TOP_RANK_LIST_REQ = 10303,
  CS_PULL_TOP_RANK_LIST_RES = 10304,
  CS_PVE_POINTS_LIST_REQ = 10305,
  CS_PVE_POINTS_LIST_RES = 10306,
  CS_PVP_POINTS_LIST_REQ = 10307,
  CS_PVP_POINTS_LIST_RES = 10308,
  CS_3V3_POINTS_LIST_REQ = 10309,
  CS_3V3_POINTS_LIST_RES = 10310,
  CS_WIN_STREAK_PVP_LIST_REQ = 10311,
  CS_WIN_STREAK_PVP_LIST_RES = 10312,
  CS_WIN_STREAK_3V3_LIST_REQ = 10313,
  CS_WIN_STREAK_3V3_LIST_RES = 10314,
  CS_GET_BUILDINGS_INFO_REQ = 10401,
  CS_GET_BUILDINGS_INFO_RES = 10402,
  CS_COLLECT_REQ = 10403,
  CS_COLLECT_RES = 10404,
  CS_GET_BUILDING_STATUS_REQ = 10405,
  CS_GET_BUILDING_STATUS_RES = 10406,
  CS_BUILDING_UPGRADE_REQ = 10407,
  CS_BUILDING_UPGRADE_RES = 10408,
  CS_BUILDING_BOOST_REQ = 10409,
  CS_BUILDING_BOOST_RES = 10410,
  CS_BUILDING_UPGRADE_DMD_REQ = 10411,
  CS_BUILDING_UPGRADE_DMD_RES = 10412,
  CS_LEGION_WAR_INFO_REQ = 10451,
  CS_LEGION_WAR_INFO_RES = 10452,
  CS_LEGION_WAR_DETAIL_INFO_REQ = 10453,
  CS_LEGION_WAR_DETAIL_INFO_RES = 10454,
  CS_LEGION_WAR_END_REQ = 10455,
  CS_LEGION_WAR_END_RES = 10456,
  CS_GET_BATTLE_UNIT_INFO_REQ = 10509,
  CS_GET_BATTLE_UNIT_INFO_RES = 10510,
  CS_UNLOCK_BATTLE_UNIT_REQ = 10511,
  CS_UNLOCK_BATTLE_UNIT_RES = 10512,
  CS_UPGRADE_BATTLE_UNIT_REQ = 10513,
  CS_UPGRADE_BATTLE_UNIT_RES = 10514,
  CS_GET_CREATION_AREA_INFO_REQ = 10515,
  CS_GET_CREATION_AREA_INFO_RES = 10516,
  CS_GET_DEFENCE_INFO_REQ = 10517,
  CS_GET_DEFENCE_INFO_RES = 10518,
  CS_UNLOCK_AREA_DIFFCULTY_REQ = 10519,
  CS_UNLOCK_AREA_DIFFCULTY_RES = 10520,
  CS_UNLOCK_AREA_AI_REQ = 10521,
  CS_UNLOCK_AREA_AI_RES = 10522,
  CS_CHANGE_AREA_REQ = 10523,
  CS_CHANGE_AREA_RES = 10524,
  CS_GET_SINGLE_AREA_INFO_REQ = 10525,
  CS_GET_SINGLE_AREA_INFO_RES = 10526,
  CS_GET_DEFENCE_UNIT_INFO_REQ = 10527,
  CS_GET_DEFENCE_UNIT_INFO_RES = 10528,
  CS_UNLOCK_ALL_DIFFCULTY_REQ = 10529,
  CS_UNLOCK_ALL_DIFFCULTY_RES = 10530,
  CS_GET_DEFENCE_LAYOUT_REQ = 10601,
  CS_GET_DEFENCE_LAYOUT_RES = 10602,
  CS_SET_DEFENCE_LAYOUT_REQ = 10603,
  CS_SET_DEFENCE_LAYOUT_RES = 10604,
  CS_START_ATTACK_REQ = 10605,
  CS_START_ATTACK_RES = 10606,
  CS_BATTLE_AWARD_REQ = 10607,
  CS_BATTLE_AWARD_RES = 10608,
  CS_PLAYER_DEFENCE_LAYOUT_REQ = 10609,
  CS_PLAYER_DEFENCE_LAYOUT_RES = 10610,
  CS_BATTLE_REPORT_REQ = 10611,
  CS_BATTLE_REPORT_RES = 10612,
  CS_PREVIEW_PLAYER_REQ = 10615,
  CS_PREVIEW_PLAYER_RES = 10616,
  CS_BATTLE_REVENGE_REQ = 10617,
  CS_BATTLE_REVENGE_RES = 10618,
  CS_PULL_BATTLE_PREVIEW_INFO_REQ = 10619,
  CS_PULL_BATTLE_PREVIEW_INFO_RES = 10620,
  CS_START_LAND_REQ = 10621,
  CS_START_LAND_RES = 10622,
  CS_BATTLE_CHECK_DOWNLOAD_REQ = 10623,
  CS_BATTLE_CHECK_DOWNLOAD_RES = 10624,
  CS_INFO_UPDATE_REQ = 10625,
  CS_INFO_UPDATE_RES = 10626,
  CS_SAVE_BATTLE_CARD_REQ = 10627,
  CS_SAVE_BATTLE_CARD_RES = 10628,
  CS_ATTACK_NOTIFY_REQ = 11629,
  CS_ATTACK_NOTIFY_RES = 11630,
  CS_GET_AREA_UNLOCK_ROBOT_REQ = 11631,
  CS_GET_AREA_UNLOCK_ROBOT_RES = 11632,
  CS_PUSH_ACHIEVEMENT_REQ = 10701,
  CS_PUSH_ACHIEVEMENT_RES = 10702,
  CS_COMPLETET_ACHIEVEMENT_REQ = 10703,
  CS_COMPLETET_ACHIEVEMENT_RES = 10704,
  CS_GET_QUESTLIST_REQ = 10705,
  CS_GET_QUESTLIST_RES = 10706,
  CS_PUSH_QUESTDATA_REQ = 10707,
  CS_PUSH_QUESTDATA_RES = 10708,
  CS_GET_QUESTREWARD_REQ = 10709,
  CS_GET_QUESTREWARD_RES = 10710,
  CS_GET_ACHIEVEMENT_LIST_REQ = 10711,
  CS_GET_ACHIEVEMENT_LIST_RES = 10712,
  CS_GET_ACTIVEREWARD_REQ = 10713,
  CS_GET_ACTIVEREWARD_RES = 10714,
  CS_GET_PVP_SKILL_INFO_REQ = 10801,
  CS_GET_PVP_SKILL_INFO_RES = 10802,
  CS_UPGRADE_PVP_SKILL_REQ = 10803,
  CS_UPGRADE_PVP_SKILL_RES = 10804,
  CS_ALLIANCE_APPLY_PUSH = 10901,
  CS_ALLIANCE_HANDLE_PUSH = 10902,
  CS_ALLIANCE_KICK_PUSH = 10923,
  CS_ALLIANCE_UPDATE_PUSH = 10924,
  CS_ALLIANCE_MEMBERS_UPDATE_PUSH = 10929,
  CS_ALLIANCE_LOG_PUSH = 10930,
  CS_SHARE_ROOM_TO_ALLIANCE_PUSH = 10931,
  CS_SHARE_ROOM_TO_ALLIANCE_STATUS_PUSH = 10932,
  CS_ALLIANCE_CREATE_REQ = 10903,
  CS_ALLIANCE_CREATE_RES = 10904,
  CS_ALLIANCE_SEARCH_BY_NAME_REQ = 10905,
  CS_ALLIANCE_SEARCH_BY_NAME_RES = 10906,
  CS_ALLIANCE_JOIN_REQ = 10907,
  CS_ALLIANCE_JOIN_RES = 10908,
  CS_ALLIANCE_QUIT_REQ = 10909,
  CS_ALLIANCE_QUIT_RES = 10910,
  CS_ALLIANCE_KICK_REQ = 10911,
  CS_ALLIANCE_KICK_RES = 10912,
  CS_ALLIANCE_CHG_MEMBER_REQ = 10913,
  CS_ALLIANCE_CHG_MEMBER_RES = 10914,
  CS_ALLIANCE_RECOMMEND_REQ = 10915,
  CS_ALLIANCE_RECOMMEND_RES = 10916,
  CS_ALLIANCE_INFO_REQ = 10917,
  CS_ALLIANCE_INFO_RES = 10918,
  CS_ALLIANCE_HANDLE_APPLY_REQ = 10919,
  CS_ALLIANCE_HANDLE_APPLY_RES = 10920,
  CS_ALLIANCE_CHG_INFO_REQ = 10921,
  CS_ALLIANCE_CHG_INFO_RES = 10922,
  CS_ALLIANCE_NAME_REPEATED_REQ = 10925,
  CS_ALLIANCE_NAME_REPEATED_RES = 10926,
  CS_ALLIANCE_LOG_REQ = 10927,
  CS_ALLIANCE_LOG_RES = 10928,
  CS_GET_ALLIANCE_ROOM_SHARE_REQ = 10933,
  CS_GET_ALLIANCE_ROOM_SHARE_RES = 10934,
  CS_SHOP_BUY_REQ = 11101,
  CS_SHOP_BUY_RES = 11102,
  CS_GET_BUY_DENFENCE_REQ = 11103,
  CS_GET_BUY_DENFENCE_RES = 11104,
  CS_SHOPPVP_BUY_REQ = 11107,
  CS_SHOPPVP_BUY_RES = 11108,
  CS_SHOPPING_REQ = 11109,
  CS_SHOPPING_RES = 11110,
  CS_SHOP_GET_PANELS_REQ = 11111,
  CS_SHOP_GET_PANELS_RES = 11112,
  CS_SHOP_REFRESH_CARDS_REQ = 11113,
  CS_SHOP_REFRESH_CARDS_RES = 11114,
  CS_SET_DEFENCE_INFO_REQ = 11201,
  CS_SET_DEFENCE_INFO_RES = 11202,
  CS_GUIDANCEMATCHTARGET_REQ = 11301,
  CS_GUIDANCEMATCHTARGET_RES = 11302,
  CS_MATCHTARGET_REQ = 11303,
  CS_MATCHTARGET_RES = 11304,
  CS_SET_GUIDANCEID_REQ = 11305,
  CS_SET_GUIDANCEID_RES = 11306,
  CS_GET_GUIDANCEID_REQ = 11307,
  CS_GET_GUIDANCEID_RES = 11308,
  CS_MATCH_PVP_REQ = 11401,
  CS_MATCH_PVP_RES = 11402,
  CS_START_PVP_FIGHT_REQ = 11403,
  CS_START_PVP_FIGHT_RES = 11404,
  CS_READY_PVP_REQ = 11405,
  CS_READY_PVP_RES = 11406,
  CS_QUERY_PVP_STATUS_REQ = 11407,
  CS_QUERY_PVP_STATUS_RES = 11408,
  CS_CMD_PVP_REQ = 11409,
  CS_CMD_PVP_RES = 11410,
  CS_PVP_END_REQ = 11411,
  CS_PVP_END_RES = 11412,
  CS_GET_FRAME_REQ = 11413,
  CS_GET_FRAME_RES = 11414,
  CS_CANCEL_MATCH_REQ = 11415,
  CS_CANCEL_MATCH_RES = 11416,
  CS_MATCH_PVP_PUSH = 11420,
  CS_READY_PVP_PUSH = 11421,
  CS_NOTIFY_CLIENT_REPLY = 11422,
  CS_PVP_GET_PLAYER_DATA_REQ = 11425,
  CS_PVP_GET_PLAYER_DATA_RES = 11426,
  CS_PULL_PVP_POINTS_LIST_REQ = 11427,
  CS_PULL_PVP_POINTS_LIST_RES = 11428,
  CS_PULL_WIN_PERCENT_LIST_REQ = 11429,
  CS_PULL_WIN_PERCENT_LIST_RES = 11430,
  CS_PULL_WIN_STREAK_LIST_REQ = 11431,
  CS_PULL_WIN_STREAK_LIST_RES = 11432,
  CS_GET_TO_PLAYER_LOAD_PROC_REQ = 11433,
  CS_GET_TO_PLAYER_LOAD_PROC_RES = 11434,
  CS_GET_PVP_BATTLE_INFO_REQ = 11435,
  CS_GET_PVP_BATTLE_INFO_RES = 11436,
  CS_GET_PVP_DOWN_ADDR_REQ = 11437,
  CS_GET_PVP_DOWN_ADDR_RES = 11438,
  CS_PVP_BATTLE_REPORT_LIST_REQ = 11439,
  CS_PVP_BATTLE_REPORT_LIST_RES = 11440,
  CS_PVP_BATTLE_REPORT_DETAIL_REQ = 11441,
  CS_PVP_BATTLE_REPORT_DETAIL_RES = 11442,
  CS_SET_SHARE_BATTLE_REPORT_REQ = 11443,
  CS_SET_SHARE_BATTLE_REPORT_RES = 11444,
  CS_GET_SHARE_BATTLE_REPORT_REQ = 11445,
  CS_GET_SHARE_BATTLE_REPORT_RES = 11446,
  CS_GET_ALLIANCE_SHARE_BATTLE_REPORT_REQ = 11447,
  CS_GET_ALLIANCE_SHARE_BATTLE_REPORT_RES = 11448,
  CS_SHARE_ROOM_TO_ALLIANCE_REQ = 11449,
  CS_SHARE_ROOM_TO_ALLIANCE_RES = 11450,
  CS_REPORT_FRAME_HASH_REQ = 11489,
  CS_REPORT_FRAME_HASH_RES = 11490,
  CS_REPORT_PVP_INFO_REQ = 11491,
  CS_REPORT_PVP_INFO_RES = 11492,
  CS_GVG_END_REQ = 11493,
  CS_GVG_END_RES = 11494,
  CS_PVP_OPEN_REQ = 11495,
  CS_PVP_OPEN_RES = 11496,
  CS_PVP_REJECT_LAST_REQ = 11497,
  CS_PVP_REJECT_LAST_RES = 11498,
  CS_GET_PVP_COND_REQ = 11499,
  CS_GET_PVP_COND_RES = 11500,
  CS_GET_POWER_INFO_REQ = 11501,
  CS_GET_POWER_INFO_RES = 11502,
  CS_BUY_POWER_REQ = 11503,
  CS_BUY_POWER_RES = 11504,
  CS_CHAT_STATUS_PUSH = 11601,
  CS_MSG_PUSH = 11602,
  CS_CHAT_REQ = 11603,
  CS_CHAT_RES = 11604,
  CS_PULL_CHAT_REQ = 11605,
  CS_PULL_CHAT_RES = 11606,
  CS_CHAT_NOTIFY = 11607,
  GET_ROBOT_INFO_REQ = 11701,
  GET_ROBOT_INFO_RES = 11702,
  SET_ROBOT_INFO_REQ = 11703,
  SET_ROBOT_INFO_RES = 11704,
  GEN_ROBOT_REQ = 11705,
  GEN_ROBOT_RES = 11706,
  GM_DEBUG_REQ = 11707,
  GM_DEBUG_RES = 11708,
  CS_GET_INHABITANT_EVENT_LIST_REQ = 11801,
  CS_GET_INHABITANT_EVENT_LIST_RES = 11802,
  CS_ACTIVE_EVENT_REQ = 11803,
  CS_ACTIVE_EVENT_RES = 11804,
  CS_INHABITANT_MISSION_AWARD_REQ = 11805,
  CS_INHABITANT_MISSION_AWARD_RES = 11806,
  CS_CHANGE_TO_MISSION_REQ = 11807,
  CS_CHANGE_TO_MISSION_RES = 11808,
  CS_GET_QAINFO_REQ = 11899,
  CS_GET_QAINFO_RES = 11900,
  CS_GET_VIP_INFO_REQ = 11901,
  CS_GET_VIP_INFO_RES = 11902,
  CS_GET_VIP_AWARD_REQ = 11903,
  CS_GET_VIP_AWARD_RES = 11904,
  CS_BUY_VIP_GIFT_BAG_REQ = 11905,
  CS_BUY_VIP_GIFT_BAG_RES = 11906,
  CS_GET_UDP_INFO_REQ = 12001,
  CS_GET_UDP_INFO_RES = 12002,
  CS_CREATE_KCP_REQ = 12003,
  CS_CREATE_KCP_RES = 12004,
  CS_LOGIN_UDP_REQ = 12005,
  CS_LOGIN_UDP_RES = 12006,
  CS_RELOGIN_UDP_REQ = 12007,
  CS_RELOGIN_UDP_RES = 12008,
  CS_UDP_HEARTBEAT_REQ = 12009,
  CS_UDP_HEARTBEAT_RES = 12010,
  CS_LOGOUT_UDP_REQ = 12011,
  CS_LOGOUT_UDP_RES = 12012,
  CS_BASEINFO_PUSH = 12101,
  CS_STATUS_PUSH = 12102,
  CS_UPDATE_VERSION_PUSH = 12103,
  CS_ALLIANCE_SHARE_PUSH = 12104,
  CS_TEAM_PLAYER_INFO_PUSH = 12105,
  CS_CHANGE_ROOM_POSITION_PUSH = 12106,
  CS_REFUSE_CHANGE_ROOM_POSITION_PUSH = 12107,
  CS_ALLIANCE_MEMBER_INFO_PUSH = 12108,
  CS_GET_QA_INFO_REQ = 12201,
  CS_GET_QA_INFO_RES = 12202,
  CS_GET_ACTIVITY_INFO_REQ = 12203,
  CS_GET_ACTIVITY_INFO_RES = 12204,
  CS_GET_ACTIVITY_AWARD_REQ = 12205,
  CS_GET_ACTIVITY_AWARD_RES = 12206,
  CS_GET_NOTICE_INFO_REQ = 12207,
  CS_GET_NOTICE_INFO_RES = 12208,
  CS_GET_TREASURE_BOX_REQ = 12301,
  CS_GET_TREASURE_BOX_RES = 12302,
  CS_GET_COLLECT_TREASURE_BOX_REQ = 12303,
  CS_GET_COLLECT_TREASURE_BOX_RES = 12304,
  CS_COLLECT_TOWER_BOX_REQ = 12305,
  CS_COLLECT_TOWER_BOX_RES = 12306,
  CS_ALLIANCE_INVITE_PVP_REQ = 12401,
  CS_ALLIANCE_INVITE_PVP_RES = 12402,
  CS_CANCEL_INVITE_REQ = 12403,
  CS_CANCEL_INVITE_RES = 12404,
  CS_JOIN_ALLIANCE_PVP_REQ = 12405,
  CS_JOIN_ALLIANCE_PVP_RES = 12406,
  CS_ALLIANCE_PVP_PUSH = 12407,
  CS_QUERY_ALLIANCE_PVP_STATUS_REQ = 12408,
  CS_QUERY_ALLIANCE_PVP_STATUS_RES = 12409,
  CS_CHANGE_ALLIANCE_GVG_POSITION_REQ = 12410,
  CS_CHANGE_ALLIANCE_GVG_POSITION_RES = 12411,
  CS_START_ALLIANCE_GVG_REQ = 12412,
  CS_START_ALLIANCE_GVG_RES = 12413,
  CS_GET_ALLIANCE_PVP_REQ = 12414,
  CS_GET_ALLIANCE_PVP_RES = 12415,
  CS_TEAM_INVITE_REQ = 12501,
  CS_TEAM_INVITE_RES = 12502,
  CS_TEAM_ACCEPT_REQ = 12503,
  CS_TEAM_ACCEPT_RES = 12504,
  CS_TEAM_QUERY_REQ = 12505,
  CS_TEAM_QUERY_RES = 12506,
  CS_TEAM_CANCEL_MATCH_REQ = 12507,
  CS_TEAM_CANCEL_MATCH_RES = 12508,
  CS_TEAM_QUIT_REQ = 12509,
  CS_TEAM_QUIT_RES = 12510,
  CS_GET_RELATE_PLAYER_STAT_REQ = 12511,
  CS_GET_RELATE_PLAYER_STAT_RES = 12512,
  CS_TEAM_REFUSE_REQ = 12513,
  CS_TEAM_REFUSE_RES = 12514,
  CS_TEAM_INVITE_PUSH = 12520,
  CS_TEAM_REFUSE_PUSH = 12521,
  CS_MACHINE_START_REQ = 12523,
  CS_MACHINE_START_RES = 12524,
  CS_MACHINE_SETTLEMENT_REQ = 12525,
  CS_MACHINE_SETTLEMENT_RES = 12526,
  CS_PVP_BATTLE_REPORT_QUERY_REQ = 12530,
  CS_PVP_BATTLE_REPORT_QUERY_RES = 12531,
  CS_PVP_BATTLE_REPORT_DETERMINE_REQ = 12533,
  CS_PVP_BATTLE_REPORT_DETERMINE_RES = 12534,
  CS_TEAM_CREATE_REQ = 12535,
  CS_TEAM_CREATE_RES = 12536,
  CS_GET_RECENT_PLAYER_STAT_REQ = 12601,
  CS_GET_RECENT_PLAYER_STAT_RES = 12602,
  CS_CHANGE_ROOM_POSITION_REQ = 12603,
  CS_CHANGE_ROOM_POSITION_RES = 12604,
  CS_SET_ROOM_READY_STATUS_REQ = 12605,
  CS_SET_ROOM_READY_STATUS_RES = 12606,
  CS_KICK_ROOM_PLAYER_REQ = 12607,
  CS_KICK_ROOM_PLAYER_RES = 12608,
  CS_CANCEL_ROOM_REQ = 12609,
  CS_CANCEL_ROOM_RES = 12610,
  CS_ADD_ROOM_ROBOT_REQ = 12611,
  CS_ADD_ROOM_ROBOT_RES = 12612,
  CS_ACCEPT_CHANGE_ROOM_POSITION_REQ = 12613,
  CS_ACCEPT_CHANGE_ROOM_POSITION_RES = 12614,
  CS_REFUSE_CHANGE_ROOM_POSITION_REQ = 12615,
  CS_REFUSE_CHANGE_ROOM_POSITION_RES = 12616,
  CS_GET_ALL_MISSION_INFO_REQ = 13001,
  CS_GET_ALL_MISSION_INFO_RES = 13002,
  CS_OPEN_MISSION_BOX_REQ = 13003,
  CS_OPEN_MISSION_BOX_RES = 13004,
  CS_MISSION_START_REQ = 13005,
  CS_MISSION_START_RES = 13006,
  CS_MISSION_REWARD_REQ = 13007,
  CS_MISSION_REWARD_RES = 13008,
  CS_MISSION_CLEARANCE_REQ = 13009,
  CS_MISSION_CLEARANCE_RES = 13010,
  CS_GET_BATTLE_CARD_DATA_REQ = 13011,
  CS_GET_BATTLE_CARD_DATA_RES = 13012,
  CS_GET_BATTLE_INFO_REQ = 13013,
  CS_GET_BATTLE_INFO_RES = 13014,
  CS_MISSION_BATTLE_REWARD_REQ = 13015,
  CS_MISSION_BATTLE_REWARD_RES = 13016,
  CS_DAY_ONLINE_GIFT_DATA_REQ = 13020,
  CS_DAY_ONLINE_GIFT_DATA_RES = 13021,
  CS_DAY_ONLINE_GIFT_RECEIVE_REQ = 13022,
  CS_DAY_ONLINE_GIFT_RECEIVE_RES = 13023,
  CS_REPORT_ACCUSATION_REQ = 13031,
  CS_REPORT_ACCUSATION_RES = 13032,
  CS_PULL_FOLLOW_LIST_REQ = 13033,
  CS_PULL_FOLLOW_LIST_RES = 13034,
  CS_PULL_FANS_LIST_REQ = 13035,
  CS_PULL_FANS_LIST_RES = 13036,
  CS_PULL_BLACK_LIST_REQ = 13037,
  CS_PULL_BLACK_LIST_RES = 13038,
  CS_FIND_PLAYER_REQ = 13039,
  CS_FIND_PLAYER_RES = 13040,
  CS_FIND_LIST_PLAYER_REQ = 13041,
  CS_FIND_LIST_PLAYER_RES = 13042,
  CS_DELETE_LIST_PLAYER_REQ = 13043,
  CS_DELETE_LIST_PLAYER_RES = 13044,
  CS_ADD_PLAYER_BY_TYPE_REQ = 13045,
  CS_ADD_PLAYER_BY_TYPE_RES = 13046,
  CS_NOTICE_NEW_FANS = 13047,
  CS_PULL_FRIEND_BASE_REQ = 13048,
  CS_PULL_FRIEND_BASE_RES = 13049,
  CS_FRIEND_CHAT_REQ = 13050,
  CS_FRIEND_CHAT_RES = 13051,
  CS_FRIEND_CHAT_NOTICE = 13052,
  CS_PULL_FRIEND_CHAT_LIST_REQ = 13053,
  CS_PULL_FRIEND_CHAT_LIST_RES = 13054,
  CS_PULL_FOLLOW_LIST_FOR_OTHER_REQ = 13055,
  CS_PULL_FOLLOW_LIST_FOR_OTHER_RES = 13056,
  CS_NOTICE_BE_ADD_BLACK = 13057,
  CS_GET_MAIL_LIST_REQ = 13101,
  CS_GET_MAIL_LIST_RES = 13102,
  CS_VIEW_MAIL_REQ = 13103,
  CS_VIEW_MAIL_RES = 13104,
  CS_SEND_MAIL_REQ = 13105,
  CS_SEND_MAIL_RES = 13106,
  CS_DEL_MAIL_REQ = 13107,
  CS_DEL_MAIL_RES = 13108,
  CS_GET_MAIL_ATTACH_REQ = 13109,
  CS_GET_MAIL_ATTACH_RES = 13110,
  CS_MAIL_NOTIFY = 13111,
  CS_FULL_SERVICE_MAIL_TEST_REQ = 13112,
  CS_FULL_SERVICE_MAIL_TEST_RES = 13113,
  CS_GET_ALL_RUNE_INFO_REQ = 13201,
  CS_GET_ALL_RUNE_INFO_RES = 13202,
  CS_CHANGE_RUNE_PAGE_INFO_REQ = 13203,
  CS_CHANGE_RUNE_PAGE_INFO_RES = 13204,
  CS_CHANGE_RUNE_PAGE_NAME_REQ = 13205,
  CS_CHANGE_RUNE_PAGE_NAME_RES = 13206,
  CS_UNLOCK_RUNE_PAGE_REQ = 13207,
  CS_UNLOCK_RUNE_PAGE_RES = 13208,
  CS_SEE_PLAYER_BASE_INFO_REQ = 13301,
  CS_SEE_PLAYER_BASE_INFO_RES = 13302,
  CS_PVP_CREDIT_RECORD_REQ = 13310,
  CS_PVP_CREDIT_RECORD_RES = 13311,
  CS_PVP_NOTICE_CREDIT_ALTER = 13312,
  CS_WONPRAISE_REQ = 13321,
  CS_WONPRAISE_RES = 13322,
  CS_WONPRAISE_NOTIFY = 13323,
  CS_GET_TRAINING_INFO_REQ = 13324,
  CS_GET_TRAINING_INFO_RES = 13325,
  CS_TRAINING_START_REQ = 13326,
  CS_TRAINING_START_RES = 13327,
  CS_TRAINING_WIN_REQ = 13328,
  CS_TRAINING_WIN_RES = 13329,
  CS_CHANGE_PVE_HARD_TYPE_REQ = 13341,
  CS_CHANGE_PVE_HARD_TYPE_RES = 13342
};
bool EnmCmdID_IsValid(int value);
const EnmCmdID EnmCmdID_MIN = CS_LSFRAME_PUSH;
const EnmCmdID EnmCmdID_MAX = CS_CHANGE_PVE_HARD_TYPE_RES;
const int EnmCmdID_ARRAYSIZE = EnmCmdID_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmCmdID_descriptor();
inline const ::std::string& EnmCmdID_Name(EnmCmdID value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmCmdID_descriptor(), value);
}
inline bool EnmCmdID_Parse(
    const ::std::string& name, EnmCmdID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmCmdID>(
    EnmCmdID_descriptor(), name, value);
}
enum EnmCompressType {
  ENM_COMPRESS_TYPE_NONE = 0,
  ENM_COMPRESS_TYPE_ZLIB = 1
};
bool EnmCompressType_IsValid(int value);
const EnmCompressType EnmCompressType_MIN = ENM_COMPRESS_TYPE_NONE;
const EnmCompressType EnmCompressType_MAX = ENM_COMPRESS_TYPE_ZLIB;
const int EnmCompressType_ARRAYSIZE = EnmCompressType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmCompressType_descriptor();
inline const ::std::string& EnmCompressType_Name(EnmCompressType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmCompressType_descriptor(), value);
}
inline bool EnmCompressType_Parse(
    const ::std::string& name, EnmCompressType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmCompressType>(
    EnmCompressType_descriptor(), name, value);
}
enum EnmEncryptType {
  ENM_ENCRYPT_TYPE_NONE = 0,
  ENM_ENCRYPT_TYPE_XXTEA = 1
};
bool EnmEncryptType_IsValid(int value);
const EnmEncryptType EnmEncryptType_MIN = ENM_ENCRYPT_TYPE_NONE;
const EnmEncryptType EnmEncryptType_MAX = ENM_ENCRYPT_TYPE_XXTEA;
const int EnmEncryptType_ARRAYSIZE = EnmEncryptType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmEncryptType_descriptor();
inline const ::std::string& EnmEncryptType_Name(EnmEncryptType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmEncryptType_descriptor(), value);
}
inline bool EnmEncryptType_Parse(
    const ::std::string& name, EnmEncryptType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmEncryptType>(
    EnmEncryptType_descriptor(), name, value);
}
enum EnmGameItemType {
  CURRENCY = 1001,
  CORPS = 1002,
  EXP = 1003,
  INHABY = 1004
};
bool EnmGameItemType_IsValid(int value);
const EnmGameItemType EnmGameItemType_MIN = CURRENCY;
const EnmGameItemType EnmGameItemType_MAX = INHABY;
const int EnmGameItemType_ARRAYSIZE = EnmGameItemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmGameItemType_descriptor();
inline const ::std::string& EnmGameItemType_Name(EnmGameItemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmGameItemType_descriptor(), value);
}
inline bool EnmGameItemType_Parse(
    const ::std::string& name, EnmGameItemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmGameItemType>(
    EnmGameItemType_descriptor(), name, value);
}
enum EnmCurrencyType {
  GOLD = 101,
  DIAMOND = 102,
  RMB = 103,
  USD = 104
};
bool EnmCurrencyType_IsValid(int value);
const EnmCurrencyType EnmCurrencyType_MIN = GOLD;
const EnmCurrencyType EnmCurrencyType_MAX = USD;
const int EnmCurrencyType_ARRAYSIZE = EnmCurrencyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmCurrencyType_descriptor();
inline const ::std::string& EnmCurrencyType_Name(EnmCurrencyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmCurrencyType_descriptor(), value);
}
inline bool EnmCurrencyType_Parse(
    const ::std::string& name, EnmCurrencyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmCurrencyType>(
    EnmCurrencyType_descriptor(), name, value);
}
enum EnmExpType {
  EXPE = 99
};
bool EnmExpType_IsValid(int value);
const EnmExpType EnmExpType_MIN = EXPE;
const EnmExpType EnmExpType_MAX = EXPE;
const int EnmExpType_ARRAYSIZE = EnmExpType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmExpType_descriptor();
inline const ::std::string& EnmExpType_Name(EnmExpType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmExpType_descriptor(), value);
}
inline bool EnmExpType_Parse(
    const ::std::string& name, EnmExpType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmExpType>(
    EnmExpType_descriptor(), name, value);
}
enum EnmInhabyType {
  INHABY_1 = 101
};
bool EnmInhabyType_IsValid(int value);
const EnmInhabyType EnmInhabyType_MIN = INHABY_1;
const EnmInhabyType EnmInhabyType_MAX = INHABY_1;
const int EnmInhabyType_ARRAYSIZE = EnmInhabyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmInhabyType_descriptor();
inline const ::std::string& EnmInhabyType_Name(EnmInhabyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmInhabyType_descriptor(), value);
}
inline bool EnmInhabyType_Parse(
    const ::std::string& name, EnmInhabyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmInhabyType>(
    EnmInhabyType_descriptor(), name, value);
}
enum EnmCorpsType {
  NONE = 0,
  SOLDIER = 101,
  BUILDING_ATTACK_SOLDIER = 102,
  BOMB_MAN = 261,
  SIEGE_ENGINE = 263,
  BARRACK = 264,
  PVPTOWER = 267,
  PVPTOWER3 = 271,
  MISSILETOWER = 269,
  PRISMTOWER = 270,
  FLYERBARRACK = 272,
  PVEBASE = 273,
  SANDBAG = 274,
  PVE_SANDBAG = 275,
  BOMB = 305,
  GEYSER = 306,
  DALLE_TRAP = 310,
  TESLA = 313,
  TURRET = 303,
  MIDDLE_TURRET = 320,
  BIG_TURRET = 321,
  TANK = 301,
  MIDDLE_TANK = 322,
  BIG_TANK = 323,
  CANON = 304,
  MIDDLE_CANON = 324,
  BIG_CANON = 325,
  APOCALYPSE = 326,
  BUNKER = 302,
  SNIPER = 307,
  MIDDLE_SNIPER = 352,
  BIG_SNIPER = 353,
  RUCHER = 308,
  MIDDLE_RUCHE = 350,
  BIG_RUCHE = 351,
  TURTLE = 311,
  MIDDLE_TURTLE = 354,
  BIG_TURTLE = 355,
  ROTOTANK = 312,
  MIDDLE_ROTOTANK = 356,
  BIG_ROTOTANK = 357,
  VAN = 314,
  MIDDLE_VAN = 358,
  BIG_VAN = 359,
  HELICOPTER = 316,
  GUARD = 315,
  TRACER = 317,
  BUNKER_SOLDIER = 318,
  HEADQUATER = 401,
  CRYSTAL_Big = 402,
  CRYSTAL_Small = 403,
  BOSS = 601,
  BOSSLootBox = 602,
  MERCENARY_VERSION_MIN = 701,
  MERCENARY_VERSION1_SOLDIER = 712,
  MERCENARY_VERSION1_CIRCELAOE = 713,
  MERCENARY_VERSION1_SECTORAOE = 714,
  MERCENARY_VERSION1_GATLING = 715,
  MERCENARY_VERSION1_SNIPER = 716,
  MERCENARY_VERSION2_LINEAOE = 718,
  MERCENARY_VERSION2_MISSLE = 719,
  MERCENARY_VERSION3_SNEER = 721,
  MERCENARY_VERSION3_FIVEBULLET = 722,
  MERCENARY_VERSION3_MASTER = 723,
  MERCENARY_VERSION4_FLYER_DANTI = 724,
  MERCENARY_VERSION4_DRUM = 725,
  MERCENARY_VERSION4_FLYER_CIRCLEAOE = 726,
  MERCENARY_VERSION4_AGAINSTBUILDING = 727,
  MERCENARY_VERSION4_ENERGYBUFF = 728,
  MERCENARY_VERSION5_ENGINEER = 729,
  MERCENARY_VERSION5_COMMANDER = 730,
  MERCENARY_VERSION5_DOCTOR = 731,
  MERCENARY_VERSION6_LIFESHIELD = 732,
  MERCENARY_VERSION6_FIREMAN = 733,
  MERCENARY_VERSION6_ICEMAN = 734,
  MERCENARY_VERSION6_JIATELIN = 735,
  MERCENARY_VERSION6_TIEJU = 736,
  MERCENARY_VERSION7_SPEARHOLDER = 737,
  MERCENARY_VERSION7_BOMBTHROWER = 738,
  MERCENARY_VERSION7_AXEHOLDER = 739,
  MERCENARY_VERSION7_SHOCKWAVE = 740,
  MERCENARY_VERSION7_DOGTRAINER = 742,
  MERCENARY_VERSION7_ANTIRIOTMAN = 743,
  MERCENARY_VERSIONHERO_SOLDIER = 750,
  MERCENARY_VERSIONHERO_SNIPER = 751,
  MERCENARY_VERSIONHERO_BOMB = 752,
  MERCENARY_VERSIONHERO_FIREMAN = 753,
  MERCENARY_VERSIONHERO_GATLIN = 754,
  MERCENARY_VERSIONHERO_ANTIRIOTMAN = 755,
  MERCENARY_VERSION7_DOG = 741,
  MERCENARY_VERSIONHERO_SUMMON_SKYBOOM = 756,
  MERCENARY_VERSIONHERO_NONAME1 = 757,
  MERCENARY_VERSIONHERO_NONAME2 = 758,
  MERCENARY_VERSIONHERO_NONAME3 = 759,
  MERCENARY_VERSIONHERO_NONAME4 = 760,
  MERCENARY_VERSIONHERO_NONAME5 = 761,
  MERCENARY_VERSIONHERO_NONAME6 = 762,
  MERCENARY_VERSIONHERO_HQS = 763,
  MERCENARY_VERSIONHERO_TOTEST = 798,
  MERCENARY_VERSION_MAX = 799,
  HERO_MIN = 800,
  HERO_MODEL = 801,
  HERO_DOGTRAINER = 802,
  HERO_COMMANDER = 803,
  HERO_TRAPMAN = 804,
  HERO_SHIELDGUNMAN = 805,
  HERO_HORNMAN = 806,
  HERO_REQIQIU = 807,
  HERO_SEXAGENT = 808,
  HERO_NONAME1 = 809,
  HERO_NONAME2 = 810,
  HERO_NONAME3 = 811,
  HERO_NONAME4 = 812,
  HERO_CFDZ = 813,
  HERO_HQDZ = 814,
  HERO_MAX = 899,
  PVE_BOSS_WAR_BASS = 901
};
bool EnmCorpsType_IsValid(int value);
const EnmCorpsType EnmCorpsType_MIN = NONE;
const EnmCorpsType EnmCorpsType_MAX = PVE_BOSS_WAR_BASS;
const int EnmCorpsType_ARRAYSIZE = EnmCorpsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmCorpsType_descriptor();
inline const ::std::string& EnmCorpsType_Name(EnmCorpsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmCorpsType_descriptor(), value);
}
inline bool EnmCorpsType_Parse(
    const ::std::string& name, EnmCorpsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmCorpsType>(
    EnmCorpsType_descriptor(), name, value);
}
enum EnmCorpsGroup {
  ALL = 101,
  SINGLE_DAMAGE = 102,
  AOE_DAMAGE = 103,
  SPECIAL = 104,
  FLYER = 105,
  GROUDER = 106,
  ANTI_FLYER = 107,
  TOWER = 108,
  SUMMON_CORP = 109,
  FODDER = 110,
  TAUNT = 111,
  DEFENSE_CORP = 201,
  TURRET_CORP = 203,
  CANON_CORP = 204,
  TANK_CORP = 205,
  SNIPER_CORP = 206,
  HELICOPTER_CORP = 207,
  TURTLE_CORP = 208,
  ROTOTANK_CORP = 209,
  VAN_CORP = 210,
  APOCALYPSE_CORP = 211,
  RUCHE_CORP = 212,
  ALL_TOWER_CORP = 213,
  ALL_TANK_CORP = 214,
  PVP_TANK_CORP = 215,
  MINE_CORP = 301,
  GEYSER_CORP = 302,
  DALLETRAP_CROP = 303,
  TESLA_CORP = 304,
  BOMB_MAN_CORP = 401,
  BOSS_CORP = 501,
  HUMMAN_CORP = 601,
  MACHINE_CORP = 602,
  ORCISH_CORP = 603,
  WILD_ANIMAL = 604,
  SNIPER_MERCENARY = 701,
  BOMB_MERCENARY = 702,
  CHARGE_MERCENARY = 703,
  AI_SOLDIER = 704,
  SUPPORT_SOLDIER = 705,
  HERO_VERSION_MERCENARY = 706,
  HERO_CORP = 801
};
bool EnmCorpsGroup_IsValid(int value);
const EnmCorpsGroup EnmCorpsGroup_MIN = ALL;
const EnmCorpsGroup EnmCorpsGroup_MAX = HERO_CORP;
const int EnmCorpsGroup_ARRAYSIZE = EnmCorpsGroup_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmCorpsGroup_descriptor();
inline const ::std::string& EnmCorpsGroup_Name(EnmCorpsGroup value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmCorpsGroup_descriptor(), value);
}
inline bool EnmCorpsGroup_Parse(
    const ::std::string& name, EnmCorpsGroup* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmCorpsGroup>(
    EnmCorpsGroup_descriptor(), name, value);
}
enum EnmMapSignalType {
  ATTACK = 1,
  FALLBACK = 2,
  SENDTXT = 3,
  GATHER = 4
};
bool EnmMapSignalType_IsValid(int value);
const EnmMapSignalType EnmMapSignalType_MIN = ATTACK;
const EnmMapSignalType EnmMapSignalType_MAX = GATHER;
const int EnmMapSignalType_ARRAYSIZE = EnmMapSignalType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmMapSignalType_descriptor();
inline const ::std::string& EnmMapSignalType_Name(EnmMapSignalType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmMapSignalType_descriptor(), value);
}
inline bool EnmMapSignalType_Parse(
    const ::std::string& name, EnmMapSignalType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmMapSignalType>(
    EnmMapSignalType_descriptor(), name, value);
}
enum EnmStatusType {
  NewBuildingUnlocked = 1,
  QuestCompletet = 2,
  AchievementCompletet = 3
};
bool EnmStatusType_IsValid(int value);
const EnmStatusType EnmStatusType_MIN = NewBuildingUnlocked;
const EnmStatusType EnmStatusType_MAX = AchievementCompletet;
const int EnmStatusType_ARRAYSIZE = EnmStatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmStatusType_descriptor();
inline const ::std::string& EnmStatusType_Name(EnmStatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmStatusType_descriptor(), value);
}
inline bool EnmStatusType_Parse(
    const ::std::string& name, EnmStatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmStatusType>(
    EnmStatusType_descriptor(), name, value);
}
enum EnmTaskMsgType {
  Task_OccupyStore = 101,
  Task_OccupyBaseCenter = 102,
  Task_DestroyBattleUnit = 201,
  Task_DestroySoldier = 207,
  Task_DestroySoldierNormol = 208,
  Task_DestroySoldierCaptial = 209,
  Task_TriggerMine = 214,
  Task_TriggerGeyser = 215,
  Task_TriggerDalleTrap = 216,
  Task_CallMercenary = 301,
  Task_AttackEnemy = 401,
  Task_GameWin = 402,
  Task_PillageGold = 403,
  Task_CollectGole = 404,
  Task_GainGrade = 405,
  Task_StudyTechEnd = 406,
  Task_UpgradeBuildingEnd = 407,
  Task_CostGold = 501,
  Task_CostDiamond = 502,
  Task_FactoryRapid = 601,
  Task_barracksRapid = 602,
  Task_PillageSteel = 701,
  Task_PillageStone = 702,
  Task_collectionGold = 703,
  Task_collectionSteel = 704,
  Task_collectionStone = 705,
  Task_collectionGoldCount = 706,
  Task_collectionSteelCount = 707,
  Task_collectionStoneCount = 708,
  Task_GainDeadGrade = 709,
  Task_GainTimeGrade = 710,
  Task_GainCaptureGrade = 711,
  Task_GainCommboGrade = 712,
  Task_ViewReplay = 713,
  Task_ViewCreationMap = 714,
  Task_RevengeAttack = 715,
  Task_CostSteel = 716,
  Task_CostStone = 717,
  Task_1V1Attack = 720,
  Task_1V1Win = 721,
  Task_1V1WinContinuous = 722,
  Task_RevengeWin = 723,
  Task_1V1BreakCanno = 724,
  Task_PutDefence = 725,
  Task_3v3Attack = 750,
  Task_3v3AttackWin = 751,
  Task_3v3KillPeople = 752,
  Task_3v3BreakCanno = 753,
  Task_3v3KillPlayer = 754,
  Task_3v3UseBigSkill = 755,
  Task_3v3SummonPeopleCount = 756,
  Task_PVESingleLevelPass = 801,
  Task_PVEAttackDefenseLevelPass = 802
};
bool EnmTaskMsgType_IsValid(int value);
const EnmTaskMsgType EnmTaskMsgType_MIN = Task_OccupyStore;
const EnmTaskMsgType EnmTaskMsgType_MAX = Task_PVEAttackDefenseLevelPass;
const int EnmTaskMsgType_ARRAYSIZE = EnmTaskMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmTaskMsgType_descriptor();
inline const ::std::string& EnmTaskMsgType_Name(EnmTaskMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmTaskMsgType_descriptor(), value);
}
inline bool EnmTaskMsgType_Parse(
    const ::std::string& name, EnmTaskMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmTaskMsgType>(
    EnmTaskMsgType_descriptor(), name, value);
}
enum EnmAllianceMember {
  ENM_ALLIANCE_MEMBER_ORDINARY = 1,
  ENM_ALLIANCE_MEMBER_CHIEF = 2,
  ENM_ALLIANCE_MEMBER_PRESIDENT = 3
};
bool EnmAllianceMember_IsValid(int value);
const EnmAllianceMember EnmAllianceMember_MIN = ENM_ALLIANCE_MEMBER_ORDINARY;
const EnmAllianceMember EnmAllianceMember_MAX = ENM_ALLIANCE_MEMBER_PRESIDENT;
const int EnmAllianceMember_ARRAYSIZE = EnmAllianceMember_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmAllianceMember_descriptor();
inline const ::std::string& EnmAllianceMember_Name(EnmAllianceMember value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmAllianceMember_descriptor(), value);
}
inline bool EnmAllianceMember_Parse(
    const ::std::string& name, EnmAllianceMember* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmAllianceMember>(
    EnmAllianceMember_descriptor(), name, value);
}
enum EnmAllianceJoinCond {
  ENM_ALLIANCE_JOIN_COND_CAN = 1,
  ENM_ALLIANCE_JOIN_COND_APPLY = 2,
  ENM_ALLIANCE_JOIN_COND_FORBID = 3
};
bool EnmAllianceJoinCond_IsValid(int value);
const EnmAllianceJoinCond EnmAllianceJoinCond_MIN = ENM_ALLIANCE_JOIN_COND_CAN;
const EnmAllianceJoinCond EnmAllianceJoinCond_MAX = ENM_ALLIANCE_JOIN_COND_FORBID;
const int EnmAllianceJoinCond_ARRAYSIZE = EnmAllianceJoinCond_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmAllianceJoinCond_descriptor();
inline const ::std::string& EnmAllianceJoinCond_Name(EnmAllianceJoinCond value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmAllianceJoinCond_descriptor(), value);
}
inline bool EnmAllianceJoinCond_Parse(
    const ::std::string& name, EnmAllianceJoinCond* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmAllianceJoinCond>(
    EnmAllianceJoinCond_descriptor(), name, value);
}
enum EnmAllianceJoinReply {
  ENM_ALLIANCE_JOIN_REPLY_SUCCESS = 1,
  ENM_ALLIANCE_JOIN_REPLY_APPLY = 2
};
bool EnmAllianceJoinReply_IsValid(int value);
const EnmAllianceJoinReply EnmAllianceJoinReply_MIN = ENM_ALLIANCE_JOIN_REPLY_SUCCESS;
const EnmAllianceJoinReply EnmAllianceJoinReply_MAX = ENM_ALLIANCE_JOIN_REPLY_APPLY;
const int EnmAllianceJoinReply_ARRAYSIZE = EnmAllianceJoinReply_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmAllianceJoinReply_descriptor();
inline const ::std::string& EnmAllianceJoinReply_Name(EnmAllianceJoinReply value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmAllianceJoinReply_descriptor(), value);
}
inline bool EnmAllianceJoinReply_Parse(
    const ::std::string& name, EnmAllianceJoinReply* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmAllianceJoinReply>(
    EnmAllianceJoinReply_descriptor(), name, value);
}
enum EnmSkillType {
  ULTIMATE = 1,
  SUBSKILL = 2
};
bool EnmSkillType_IsValid(int value);
const EnmSkillType EnmSkillType_MIN = ULTIMATE;
const EnmSkillType EnmSkillType_MAX = SUBSKILL;
const int EnmSkillType_ARRAYSIZE = EnmSkillType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmSkillType_descriptor();
inline const ::std::string& EnmSkillType_Name(EnmSkillType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmSkillType_descriptor(), value);
}
inline bool EnmSkillType_Parse(
    const ::std::string& name, EnmSkillType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmSkillType>(
    EnmSkillType_descriptor(), name, value);
}
enum EnmChatChannel {
  ENM_CHAT_CHANNEL_WORLD = 1,
  ENM_CHAT_CHANNEL_ALLIANCE = 2,
  ENM_CHAT_CHANNEL_PRIVATE = 3,
  ENM_CHAT_CHANNEL_ROOM = 4,
  ENM_CHAT_CHANNEL_BATTLE = 5
};
bool EnmChatChannel_IsValid(int value);
const EnmChatChannel EnmChatChannel_MIN = ENM_CHAT_CHANNEL_WORLD;
const EnmChatChannel EnmChatChannel_MAX = ENM_CHAT_CHANNEL_BATTLE;
const int EnmChatChannel_ARRAYSIZE = EnmChatChannel_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmChatChannel_descriptor();
inline const ::std::string& EnmChatChannel_Name(EnmChatChannel value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmChatChannel_descriptor(), value);
}
inline bool EnmChatChannel_Parse(
    const ::std::string& name, EnmChatChannel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmChatChannel>(
    EnmChatChannel_descriptor(), name, value);
}
enum EnmPVPStatus {
  ENM_PVP_STATUS_INIT = 0,
  ENM_PVP_STATUS_NONE = 1,
  ENM_PVP_STATUS_TEAM = 2,
  ENM_PVP_STATUS_MATCH = 3,
  ENM_PVP_STATUS_WAIT_READY = 4,
  ENM_PVP_STATUS_FIGHT = 5,
  ENM_PVP_STATUS_END = 6
};
bool EnmPVPStatus_IsValid(int value);
const EnmPVPStatus EnmPVPStatus_MIN = ENM_PVP_STATUS_INIT;
const EnmPVPStatus EnmPVPStatus_MAX = ENM_PVP_STATUS_END;
const int EnmPVPStatus_ARRAYSIZE = EnmPVPStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmPVPStatus_descriptor();
inline const ::std::string& EnmPVPStatus_Name(EnmPVPStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmPVPStatus_descriptor(), value);
}
inline bool EnmPVPStatus_Parse(
    const ::std::string& name, EnmPVPStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmPVPStatus>(
    EnmPVPStatus_descriptor(), name, value);
}
enum EnmServerStatus {
  ENM_STATUS_ON_MAINTAIN = 1,
  ENM_STATUS_ON_STOP = 2
};
bool EnmServerStatus_IsValid(int value);
const EnmServerStatus EnmServerStatus_MIN = ENM_STATUS_ON_MAINTAIN;
const EnmServerStatus EnmServerStatus_MAX = ENM_STATUS_ON_STOP;
const int EnmServerStatus_ARRAYSIZE = EnmServerStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmServerStatus_descriptor();
inline const ::std::string& EnmServerStatus_Name(EnmServerStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmServerStatus_descriptor(), value);
}
inline bool EnmServerStatus_Parse(
    const ::std::string& name, EnmServerStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmServerStatus>(
    EnmServerStatus_descriptor(), name, value);
}
enum EnmPVPNum {
  ENM_PVP_NUM_NULL = 0,
  ENM_PVP_NUM_ONE = 1,
  ENM_PVP_NUM_TWO = 2,
  ENM_PVP_NUM_THREE = 3
};
bool EnmPVPNum_IsValid(int value);
const EnmPVPNum EnmPVPNum_MIN = ENM_PVP_NUM_NULL;
const EnmPVPNum EnmPVPNum_MAX = ENM_PVP_NUM_THREE;
const int EnmPVPNum_ARRAYSIZE = EnmPVPNum_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmPVPNum_descriptor();
inline const ::std::string& EnmPVPNum_Name(EnmPVPNum value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmPVPNum_descriptor(), value);
}
inline bool EnmPVPNum_Parse(
    const ::std::string& name, EnmPVPNum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmPVPNum>(
    EnmPVPNum_descriptor(), name, value);
}
enum EnmPVPResult {
  ENM_PVP_RESULT_WIN = 1,
  ENM_PVP_RESULT_LOSE = 2,
  ENM_PVP_RESULT_DRAW = 3
};
bool EnmPVPResult_IsValid(int value);
const EnmPVPResult EnmPVPResult_MIN = ENM_PVP_RESULT_WIN;
const EnmPVPResult EnmPVPResult_MAX = ENM_PVP_RESULT_DRAW;
const int EnmPVPResult_ARRAYSIZE = EnmPVPResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmPVPResult_descriptor();
inline const ::std::string& EnmPVPResult_Name(EnmPVPResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmPVPResult_descriptor(), value);
}
inline bool EnmPVPResult_Parse(
    const ::std::string& name, EnmPVPResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmPVPResult>(
    EnmPVPResult_descriptor(), name, value);
}
enum EnmPVPTeam {
  ENM_PVP_TEAM_NONE = 0,
  ENM_PVP_TEAM_RED = 1,
  ENM_PVP_TEAM_BLUE = 2
};
bool EnmPVPTeam_IsValid(int value);
const EnmPVPTeam EnmPVPTeam_MIN = ENM_PVP_TEAM_NONE;
const EnmPVPTeam EnmPVPTeam_MAX = ENM_PVP_TEAM_BLUE;
const int EnmPVPTeam_ARRAYSIZE = EnmPVPTeam_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmPVPTeam_descriptor();
inline const ::std::string& EnmPVPTeam_Name(EnmPVPTeam value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmPVPTeam_descriptor(), value);
}
inline bool EnmPVPTeam_Parse(
    const ::std::string& name, EnmPVPTeam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmPVPTeam>(
    EnmPVPTeam_descriptor(), name, value);
}
enum NetWorkSP {
  TELECOM = 1,
  MOBILE = 2,
  UNICOM = 3,
  OTHERSP = 20
};
bool NetWorkSP_IsValid(int value);
const NetWorkSP NetWorkSP_MIN = TELECOM;
const NetWorkSP NetWorkSP_MAX = OTHERSP;
const int NetWorkSP_ARRAYSIZE = NetWorkSP_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetWorkSP_descriptor();
inline const ::std::string& NetWorkSP_Name(NetWorkSP value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetWorkSP_descriptor(), value);
}
inline bool NetWorkSP_Parse(
    const ::std::string& name, NetWorkSP* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetWorkSP>(
    NetWorkSP_descriptor(), name, value);
}
enum BattleCardType {
  CARD_NONE = 0,
  CARD_HERO = 1,
  CARD_SOLDIER = 2,
  CARD_SKILL = 3
};
bool BattleCardType_IsValid(int value);
const BattleCardType BattleCardType_MIN = CARD_NONE;
const BattleCardType BattleCardType_MAX = CARD_SKILL;
const int BattleCardType_ARRAYSIZE = BattleCardType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BattleCardType_descriptor();
inline const ::std::string& BattleCardType_Name(BattleCardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BattleCardType_descriptor(), value);
}
inline bool BattleCardType_Parse(
    const ::std::string& name, BattleCardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BattleCardType>(
    BattleCardType_descriptor(), name, value);
}
enum PreWarCardType {
  ENM_PRE_WAR_CARD_NULL = 0,
  ENM_PRE_WAR_CARD_HERO = 1,
  ENM_PRE_WAR_CARD_SOLDIER = 2
};
bool PreWarCardType_IsValid(int value);
const PreWarCardType PreWarCardType_MIN = ENM_PRE_WAR_CARD_NULL;
const PreWarCardType PreWarCardType_MAX = ENM_PRE_WAR_CARD_SOLDIER;
const int PreWarCardType_ARRAYSIZE = PreWarCardType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PreWarCardType_descriptor();
inline const ::std::string& PreWarCardType_Name(PreWarCardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PreWarCardType_descriptor(), value);
}
inline bool PreWarCardType_Parse(
    const ::std::string& name, PreWarCardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PreWarCardType>(
    PreWarCardType_descriptor(), name, value);
}
enum EnmRobotType {
  ENM_ROBOT_TYPE_NONE = 0,
  ENM_ROBOT_TYPE_PLAYER = 1,
  ENM_ROBOT_TYPE_EASY = 10,
  ENM_ROBOT_TYPE_LEVEL = 11,
  ENM_ROBOT_TYPE_TIMEOUT = 12,
  ENM_ROBOT_TYPE_NOVICE = 13,
  ENM_ROBOT_TYPE_INTERMEDIATE = 14,
  ENM_ROBOT_TYPE_SENIOR = 15,
  ENM_ROBOT_TYPE_HOSTED = 16,
  ENM_ROBOT_TYPE_3V3_MATE_NEWBIE = 17,
  ENM_ROBOT_TYPE_3V3_TO_NEWBIE = 18,
  ENM_ROBOT_TYPE_3V3_MATE_WIN = 19,
  ENM_ROBOT_TYPE_3V3_TO_WIN = 20
};
bool EnmRobotType_IsValid(int value);
const EnmRobotType EnmRobotType_MIN = ENM_ROBOT_TYPE_NONE;
const EnmRobotType EnmRobotType_MAX = ENM_ROBOT_TYPE_3V3_TO_WIN;
const int EnmRobotType_ARRAYSIZE = EnmRobotType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmRobotType_descriptor();
inline const ::std::string& EnmRobotType_Name(EnmRobotType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmRobotType_descriptor(), value);
}
inline bool EnmRobotType_Parse(
    const ::std::string& name, EnmRobotType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmRobotType>(
    EnmRobotType_descriptor(), name, value);
}
enum EnmBoxStatus {
  Locking = 1,
  Unlocking = 2
};
bool EnmBoxStatus_IsValid(int value);
const EnmBoxStatus EnmBoxStatus_MIN = Locking;
const EnmBoxStatus EnmBoxStatus_MAX = Unlocking;
const int EnmBoxStatus_ARRAYSIZE = EnmBoxStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmBoxStatus_descriptor();
inline const ::std::string& EnmBoxStatus_Name(EnmBoxStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmBoxStatus_descriptor(), value);
}
inline bool EnmBoxStatus_Parse(
    const ::std::string& name, EnmBoxStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmBoxStatus>(
    EnmBoxStatus_descriptor(), name, value);
}
enum EnmBoxQuality {
  Green = 1,
  Blue = 2,
  Purple = 3,
  Orange = 4
};
bool EnmBoxQuality_IsValid(int value);
const EnmBoxQuality EnmBoxQuality_MIN = Green;
const EnmBoxQuality EnmBoxQuality_MAX = Orange;
const int EnmBoxQuality_ARRAYSIZE = EnmBoxQuality_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmBoxQuality_descriptor();
inline const ::std::string& EnmBoxQuality_Name(EnmBoxQuality value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmBoxQuality_descriptor(), value);
}
inline bool EnmBoxQuality_Parse(
    const ::std::string& name, EnmBoxQuality* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmBoxQuality>(
    EnmBoxQuality_descriptor(), name, value);
}
enum EnmPVPMode {
  ENM_MODE_1V1 = 1,
  ENM_MODE_3V3 = 2,
  ENM_MODE_1V1_TUTO = 3
};
bool EnmPVPMode_IsValid(int value);
const EnmPVPMode EnmPVPMode_MIN = ENM_MODE_1V1;
const EnmPVPMode EnmPVPMode_MAX = ENM_MODE_1V1_TUTO;
const int EnmPVPMode_ARRAYSIZE = EnmPVPMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmPVPMode_descriptor();
inline const ::std::string& EnmPVPMode_Name(EnmPVPMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmPVPMode_descriptor(), value);
}
inline bool EnmPVPMode_Parse(
    const ::std::string& name, EnmPVPMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmPVPMode>(
    EnmPVPMode_descriptor(), name, value);
}
enum EnmPlayerStat {
  ENM_PLAYER_STAT_OFFLINE = 0,
  ENM_PLAYER_STAT_GAME = 1,
  ENM_PLAYER_STAT_TEAM = 2,
  ENM_PLAYER_STAT_ONLINE = 3
};
bool EnmPlayerStat_IsValid(int value);
const EnmPlayerStat EnmPlayerStat_MIN = ENM_PLAYER_STAT_OFFLINE;
const EnmPlayerStat EnmPlayerStat_MAX = ENM_PLAYER_STAT_ONLINE;
const int EnmPlayerStat_ARRAYSIZE = EnmPlayerStat_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmPlayerStat_descriptor();
inline const ::std::string& EnmPlayerStat_Name(EnmPlayerStat value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmPlayerStat_descriptor(), value);
}
inline bool EnmPlayerStat_Parse(
    const ::std::string& name, EnmPlayerStat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmPlayerStat>(
    EnmPlayerStat_descriptor(), name, value);
}
enum EnmPVEHardType {
  ENM_HARD_NONE = 0,
  ENM_HARD_NOVICE = 1,
  ENM_HARD_MIDDLE = 2,
  ENM_HARD_HIGH = 3
};
bool EnmPVEHardType_IsValid(int value);
const EnmPVEHardType EnmPVEHardType_MIN = ENM_HARD_NONE;
const EnmPVEHardType EnmPVEHardType_MAX = ENM_HARD_HIGH;
const int EnmPVEHardType_ARRAYSIZE = EnmPVEHardType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmPVEHardType_descriptor();
inline const ::std::string& EnmPVEHardType_Name(EnmPVEHardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmPVEHardType_descriptor(), value);
}
inline bool EnmPVEHardType_Parse(
    const ::std::string& name, EnmPVEHardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmPVEHardType>(
    EnmPVEHardType_descriptor(), name, value);
}
enum EnmPVPType {
  ENM_PVP_TYPE_GVG = 1,
  ENM_PVP_TYPE_TEAM = 2,
  ENM_PVP_TYPE_ROOM_3V3 = 3,
  ENM_PVP_TYPE_PVE_3V3 = 4,
  ENM_PVP_TYPE_PVP = 5,
  ENM_PVP_TYPE_PVE_1V1 = 6,
  ENM_PVP_TYPE_ROOM_1V1 = 7,
  ENM_PVP_TYPE_PVP_FRIENDLY = 8,
  ENM_PVP_TYPE_GVG_FRIENDLY = 9
};
bool EnmPVPType_IsValid(int value);
const EnmPVPType EnmPVPType_MIN = ENM_PVP_TYPE_GVG;
const EnmPVPType EnmPVPType_MAX = ENM_PVP_TYPE_GVG_FRIENDLY;
const int EnmPVPType_ARRAYSIZE = EnmPVPType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmPVPType_descriptor();
inline const ::std::string& EnmPVPType_Name(EnmPVPType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmPVPType_descriptor(), value);
}
inline bool EnmPVPType_Parse(
    const ::std::string& name, EnmPVPType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmPVPType>(
    EnmPVPType_descriptor(), name, value);
}
enum EnmPvpBattleReportType {
  ENM_BATTLE_NULL = 0,
  ENM_BATTLE_REPORT = 1,
  ENM_WAIT_READY = 2
};
bool EnmPvpBattleReportType_IsValid(int value);
const EnmPvpBattleReportType EnmPvpBattleReportType_MIN = ENM_BATTLE_NULL;
const EnmPvpBattleReportType EnmPvpBattleReportType_MAX = ENM_WAIT_READY;
const int EnmPvpBattleReportType_ARRAYSIZE = EnmPvpBattleReportType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmPvpBattleReportType_descriptor();
inline const ::std::string& EnmPvpBattleReportType_Name(EnmPvpBattleReportType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmPvpBattleReportType_descriptor(), value);
}
inline bool EnmPvpBattleReportType_Parse(
    const ::std::string& name, EnmPvpBattleReportType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmPvpBattleReportType>(
    EnmPvpBattleReportType_descriptor(), name, value);
}
enum EnmAllianceMemType {
  ENM_AMT_INIT = 1,
  ENM_AMT_OFFICE = 2,
  ENM_AMT_PRESIDENT = 3
};
bool EnmAllianceMemType_IsValid(int value);
const EnmAllianceMemType EnmAllianceMemType_MIN = ENM_AMT_INIT;
const EnmAllianceMemType EnmAllianceMemType_MAX = ENM_AMT_PRESIDENT;
const int EnmAllianceMemType_ARRAYSIZE = EnmAllianceMemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmAllianceMemType_descriptor();
inline const ::std::string& EnmAllianceMemType_Name(EnmAllianceMemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmAllianceMemType_descriptor(), value);
}
inline bool EnmAllianceMemType_Parse(
    const ::std::string& name, EnmAllianceMemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmAllianceMemType>(
    EnmAllianceMemType_descriptor(), name, value);
}
enum EnmPrepareWarType {
  ENM_PREPAREWAR_NULL = 0,
  ENM_PREPAREWAR_PVP = 1,
  ENM_PREPAREWAR_PVE = 2,
  ENM_PREPAREWAR_3V3PVP = 3,
  ENM_PREPAREWAR_3V3PVE = 4
};
bool EnmPrepareWarType_IsValid(int value);
const EnmPrepareWarType EnmPrepareWarType_MIN = ENM_PREPAREWAR_NULL;
const EnmPrepareWarType EnmPrepareWarType_MAX = ENM_PREPAREWAR_3V3PVE;
const int EnmPrepareWarType_ARRAYSIZE = EnmPrepareWarType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmPrepareWarType_descriptor();
inline const ::std::string& EnmPrepareWarType_Name(EnmPrepareWarType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmPrepareWarType_descriptor(), value);
}
inline bool EnmPrepareWarType_Parse(
    const ::std::string& name, EnmPrepareWarType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmPrepareWarType>(
    EnmPrepareWarType_descriptor(), name, value);
}
enum EnmPrepareWarStatus {
  ENM_PREPAREWAR_PREWAR = 1,
  ENM_PREPAREWAR_WARING = 2
};
bool EnmPrepareWarStatus_IsValid(int value);
const EnmPrepareWarStatus EnmPrepareWarStatus_MIN = ENM_PREPAREWAR_PREWAR;
const EnmPrepareWarStatus EnmPrepareWarStatus_MAX = ENM_PREPAREWAR_WARING;
const int EnmPrepareWarStatus_ARRAYSIZE = EnmPrepareWarStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmPrepareWarStatus_descriptor();
inline const ::std::string& EnmPrepareWarStatus_Name(EnmPrepareWarStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmPrepareWarStatus_descriptor(), value);
}
inline bool EnmPrepareWarStatus_Parse(
    const ::std::string& name, EnmPrepareWarStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmPrepareWarStatus>(
    EnmPrepareWarStatus_descriptor(), name, value);
}
enum EnmMissionStar {
  ENM_MISSION_STAR_ZERO = 0,
  ENM_MISSION_STAR_ONE = 1,
  ENM_MISSION_STAR_TWO = 2,
  ENM_MISSION_STAR_THREE = 3
};
bool EnmMissionStar_IsValid(int value);
const EnmMissionStar EnmMissionStar_MIN = ENM_MISSION_STAR_ZERO;
const EnmMissionStar EnmMissionStar_MAX = ENM_MISSION_STAR_THREE;
const int EnmMissionStar_ARRAYSIZE = EnmMissionStar_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmMissionStar_descriptor();
inline const ::std::string& EnmMissionStar_Name(EnmMissionStar value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmMissionStar_descriptor(), value);
}
inline bool EnmMissionStar_Parse(
    const ::std::string& name, EnmMissionStar* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmMissionStar>(
    EnmMissionStar_descriptor(), name, value);
}
enum EnmBattleCardNum {
  ENM_BATTLE_CARD_NUM_HERO = 1,
  ENM_BATTLE_CARD_NUM_SKILL = 2,
  ENM_BATTLE_CARD_NUM_SOLDIER = 3,
  ENM_BATTLE_CARD_DECK_BIGNUM = 5
};
bool EnmBattleCardNum_IsValid(int value);
const EnmBattleCardNum EnmBattleCardNum_MIN = ENM_BATTLE_CARD_NUM_HERO;
const EnmBattleCardNum EnmBattleCardNum_MAX = ENM_BATTLE_CARD_DECK_BIGNUM;
const int EnmBattleCardNum_ARRAYSIZE = EnmBattleCardNum_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmBattleCardNum_descriptor();
inline const ::std::string& EnmBattleCardNum_Name(EnmBattleCardNum value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmBattleCardNum_descriptor(), value);
}
inline bool EnmBattleCardNum_Parse(
    const ::std::string& name, EnmBattleCardNum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmBattleCardNum>(
    EnmBattleCardNum_descriptor(), name, value);
}
enum EnmPVPMvpType {
  ENM_PVP_MVP_TYPE_NONE = 0,
  ENM_PVP_MVP_TYPE_WIN = 1,
  ENM_PVP_MVP_TYPE_LOSE = 2
};
bool EnmPVPMvpType_IsValid(int value);
const EnmPVPMvpType EnmPVPMvpType_MIN = ENM_PVP_MVP_TYPE_NONE;
const EnmPVPMvpType EnmPVPMvpType_MAX = ENM_PVP_MVP_TYPE_LOSE;
const int EnmPVPMvpType_ARRAYSIZE = EnmPVPMvpType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmPVPMvpType_descriptor();
inline const ::std::string& EnmPVPMvpType_Name(EnmPVPMvpType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmPVPMvpType_descriptor(), value);
}
inline bool EnmPVPMvpType_Parse(
    const ::std::string& name, EnmPVPMvpType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmPVPMvpType>(
    EnmPVPMvpType_descriptor(), name, value);
}
enum EnmFriendListType {
  ENM_FRIEND_NULL = 0,
  ENM_FRIEND_FOLLOW = 1,
  ENM_FRIEND_FANS = 2,
  ENM_FRIEND_BLACK = 3,
  ENM_FRIEND_CHAT = 4
};
bool EnmFriendListType_IsValid(int value);
const EnmFriendListType EnmFriendListType_MIN = ENM_FRIEND_NULL;
const EnmFriendListType EnmFriendListType_MAX = ENM_FRIEND_CHAT;
const int EnmFriendListType_ARRAYSIZE = EnmFriendListType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmFriendListType_descriptor();
inline const ::std::string& EnmFriendListType_Name(EnmFriendListType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmFriendListType_descriptor(), value);
}
inline bool EnmFriendListType_Parse(
    const ::std::string& name, EnmFriendListType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmFriendListType>(
    EnmFriendListType_descriptor(), name, value);
}
enum EnmMailType {
  ENM_MAIL_TYPE_SYSTEM = 1,
  ENM_MAIL_TYPE_FRIEND = 2
};
bool EnmMailType_IsValid(int value);
const EnmMailType EnmMailType_MIN = ENM_MAIL_TYPE_SYSTEM;
const EnmMailType EnmMailType_MAX = ENM_MAIL_TYPE_FRIEND;
const int EnmMailType_ARRAYSIZE = EnmMailType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmMailType_descriptor();
inline const ::std::string& EnmMailType_Name(EnmMailType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmMailType_descriptor(), value);
}
inline bool EnmMailType_Parse(
    const ::std::string& name, EnmMailType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmMailType>(
    EnmMailType_descriptor(), name, value);
}
enum EnmMailSubType {
  ENM_MAIL_SUBTYPE_NOTICE = 1,
  ENM_MAIL_SUBTYPE_ATTACH = 2
};
bool EnmMailSubType_IsValid(int value);
const EnmMailSubType EnmMailSubType_MIN = ENM_MAIL_SUBTYPE_NOTICE;
const EnmMailSubType EnmMailSubType_MAX = ENM_MAIL_SUBTYPE_ATTACH;
const int EnmMailSubType_ARRAYSIZE = EnmMailSubType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmMailSubType_descriptor();
inline const ::std::string& EnmMailSubType_Name(EnmMailSubType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmMailSubType_descriptor(), value);
}
inline bool EnmMailSubType_Parse(
    const ::std::string& name, EnmMailSubType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmMailSubType>(
    EnmMailSubType_descriptor(), name, value);
}
enum EnmMailStat {
  ENM_MAIL_STAT_UNREAD = 1,
  ENM_MAIL_STAT_READ = 2,
  ENM_MAIL_STAT_UNGET = 3
};
bool EnmMailStat_IsValid(int value);
const EnmMailStat EnmMailStat_MIN = ENM_MAIL_STAT_UNREAD;
const EnmMailStat EnmMailStat_MAX = ENM_MAIL_STAT_UNGET;
const int EnmMailStat_ARRAYSIZE = EnmMailStat_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmMailStat_descriptor();
inline const ::std::string& EnmMailStat_Name(EnmMailStat value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmMailStat_descriptor(), value);
}
inline bool EnmMailStat_Parse(
    const ::std::string& name, EnmMailStat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmMailStat>(
    EnmMailStat_descriptor(), name, value);
}
enum EnmRoomPosition {
  ENM_ROOM_ONE = 0,
  ENM_ROOM_TWO = 1,
  ENM_ROOM_TREE = 2,
  ENM_ROOM_FOUR = 3,
  ENM_ROOM_FIVE = 4,
  ENM_ROOM_SIX = 5
};
bool EnmRoomPosition_IsValid(int value);
const EnmRoomPosition EnmRoomPosition_MIN = ENM_ROOM_ONE;
const EnmRoomPosition EnmRoomPosition_MAX = ENM_ROOM_SIX;
const int EnmRoomPosition_ARRAYSIZE = EnmRoomPosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmRoomPosition_descriptor();
inline const ::std::string& EnmRoomPosition_Name(EnmRoomPosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmRoomPosition_descriptor(), value);
}
inline bool EnmRoomPosition_Parse(
    const ::std::string& name, EnmRoomPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmRoomPosition>(
    EnmRoomPosition_descriptor(), name, value);
}
enum EnmInviteType {
  ENM_INVITE_TYPE_FRIEND = 1,
  ENM_INVITE_TYPE_ALLIANCE = 2,
  ENM_INVITE_TYPE_RECENT = 3
};
bool EnmInviteType_IsValid(int value);
const EnmInviteType EnmInviteType_MIN = ENM_INVITE_TYPE_FRIEND;
const EnmInviteType EnmInviteType_MAX = ENM_INVITE_TYPE_RECENT;
const int EnmInviteType_ARRAYSIZE = EnmInviteType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmInviteType_descriptor();
inline const ::std::string& EnmInviteType_Name(EnmInviteType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmInviteType_descriptor(), value);
}
inline bool EnmInviteType_Parse(
    const ::std::string& name, EnmInviteType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmInviteType>(
    EnmInviteType_descriptor(), name, value);
}
enum EnmCreditAlterType {
  ENM_PVP_REPORT_HANGUP = 1,
  ENM_PVP_REPORT_FEED = 2,
  ENM_PVP_REPORT_NEGATIVE = 3,
  ENM_PVP_REPORT_ABUSE = 4,
  ENM_PVP_REPORT_PERFORMER = 5,
  ENM_PVP_REPORT_ADDON = 6,
  ENM_PVP_SETTLEMENT_DUCT = 10,
  ENM_PVP_SETTLEMENT_ADD = 11,
  ENM_RELEASE_SUSPENSION = 12,
  ENM_PVE_1V1_ADD = 13
};
bool EnmCreditAlterType_IsValid(int value);
const EnmCreditAlterType EnmCreditAlterType_MIN = ENM_PVP_REPORT_HANGUP;
const EnmCreditAlterType EnmCreditAlterType_MAX = ENM_PVE_1V1_ADD;
const int EnmCreditAlterType_ARRAYSIZE = EnmCreditAlterType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmCreditAlterType_descriptor();
inline const ::std::string& EnmCreditAlterType_Name(EnmCreditAlterType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmCreditAlterType_descriptor(), value);
}
inline bool EnmCreditAlterType_Parse(
    const ::std::string& name, EnmCreditAlterType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmCreditAlterType>(
    EnmCreditAlterType_descriptor(), name, value);
}
enum EnmBoxType {
  ENM_BOX_TYPE_FULL = 0,
  ENM_BOX_TYPE_GREEN = 1,
  ENM_BOX_TYPE_BLUE = 2,
  ENM_BOX_TYPE_PURPLE = 3,
  ENM_BOX_TYPE_ORANGE = 4,
  ENM_BOX_TYPE_LIMIT = 5,
  ENM_BOX_TYPE_REPUTATION = 6,
  ENM_BOX_TYPE_NONE = 7,
  ENM_BOX_TYPE_LOSE = 8
};
bool EnmBoxType_IsValid(int value);
const EnmBoxType EnmBoxType_MIN = ENM_BOX_TYPE_FULL;
const EnmBoxType EnmBoxType_MAX = ENM_BOX_TYPE_LOSE;
const int EnmBoxType_ARRAYSIZE = EnmBoxType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmBoxType_descriptor();
inline const ::std::string& EnmBoxType_Name(EnmBoxType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmBoxType_descriptor(), value);
}
inline bool EnmBoxType_Parse(
    const ::std::string& name, EnmBoxType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmBoxType>(
    EnmBoxType_descriptor(), name, value);
}
enum EnmPvpStatType {
  ENM_PVP_STAT_TYPE_RTT = 1,
  ENM_PVP_STAT_TYPE_UPDATE = 2
};
bool EnmPvpStatType_IsValid(int value);
const EnmPvpStatType EnmPvpStatType_MIN = ENM_PVP_STAT_TYPE_RTT;
const EnmPvpStatType EnmPvpStatType_MAX = ENM_PVP_STAT_TYPE_UPDATE;
const int EnmPvpStatType_ARRAYSIZE = EnmPvpStatType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmPvpStatType_descriptor();
inline const ::std::string& EnmPvpStatType_Name(EnmPvpStatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmPvpStatType_descriptor(), value);
}
inline bool EnmPvpStatType_Parse(
    const ::std::string& name, EnmPvpStatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmPvpStatType>(
    EnmPvpStatType_descriptor(), name, value);
}
enum EnmSyncRedisData {
  ENM_NOT_SYNC_REDIS_DATA = 0,
  ENM_SYNC_REDIS_DATA = 1
};
bool EnmSyncRedisData_IsValid(int value);
const EnmSyncRedisData EnmSyncRedisData_MIN = ENM_NOT_SYNC_REDIS_DATA;
const EnmSyncRedisData EnmSyncRedisData_MAX = ENM_SYNC_REDIS_DATA;
const int EnmSyncRedisData_ARRAYSIZE = EnmSyncRedisData_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnmSyncRedisData_descriptor();
inline const ::std::string& EnmSyncRedisData_Name(EnmSyncRedisData value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnmSyncRedisData_descriptor(), value);
}
inline bool EnmSyncRedisData_Parse(
    const ::std::string& name, EnmSyncRedisData* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnmSyncRedisData>(
    EnmSyncRedisData_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace cs

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmCmdID>() {
  return ::cs::EnmCmdID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmCompressType>() {
  return ::cs::EnmCompressType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmEncryptType>() {
  return ::cs::EnmEncryptType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmGameItemType>() {
  return ::cs::EnmGameItemType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmCurrencyType>() {
  return ::cs::EnmCurrencyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmExpType>() {
  return ::cs::EnmExpType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmInhabyType>() {
  return ::cs::EnmInhabyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmCorpsType>() {
  return ::cs::EnmCorpsType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmCorpsGroup>() {
  return ::cs::EnmCorpsGroup_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmMapSignalType>() {
  return ::cs::EnmMapSignalType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmStatusType>() {
  return ::cs::EnmStatusType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmTaskMsgType>() {
  return ::cs::EnmTaskMsgType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmAllianceMember>() {
  return ::cs::EnmAllianceMember_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmAllianceJoinCond>() {
  return ::cs::EnmAllianceJoinCond_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmAllianceJoinReply>() {
  return ::cs::EnmAllianceJoinReply_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmSkillType>() {
  return ::cs::EnmSkillType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmChatChannel>() {
  return ::cs::EnmChatChannel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmPVPStatus>() {
  return ::cs::EnmPVPStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmServerStatus>() {
  return ::cs::EnmServerStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmPVPNum>() {
  return ::cs::EnmPVPNum_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmPVPResult>() {
  return ::cs::EnmPVPResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmPVPTeam>() {
  return ::cs::EnmPVPTeam_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::NetWorkSP>() {
  return ::cs::NetWorkSP_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::BattleCardType>() {
  return ::cs::BattleCardType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::PreWarCardType>() {
  return ::cs::PreWarCardType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmRobotType>() {
  return ::cs::EnmRobotType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmBoxStatus>() {
  return ::cs::EnmBoxStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmBoxQuality>() {
  return ::cs::EnmBoxQuality_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmPVPMode>() {
  return ::cs::EnmPVPMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmPlayerStat>() {
  return ::cs::EnmPlayerStat_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmPVEHardType>() {
  return ::cs::EnmPVEHardType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmPVPType>() {
  return ::cs::EnmPVPType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmPvpBattleReportType>() {
  return ::cs::EnmPvpBattleReportType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmAllianceMemType>() {
  return ::cs::EnmAllianceMemType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmPrepareWarType>() {
  return ::cs::EnmPrepareWarType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmPrepareWarStatus>() {
  return ::cs::EnmPrepareWarStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmMissionStar>() {
  return ::cs::EnmMissionStar_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmBattleCardNum>() {
  return ::cs::EnmBattleCardNum_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmPVPMvpType>() {
  return ::cs::EnmPVPMvpType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmFriendListType>() {
  return ::cs::EnmFriendListType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmMailType>() {
  return ::cs::EnmMailType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmMailSubType>() {
  return ::cs::EnmMailSubType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmMailStat>() {
  return ::cs::EnmMailStat_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmRoomPosition>() {
  return ::cs::EnmRoomPosition_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmInviteType>() {
  return ::cs::EnmInviteType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmCreditAlterType>() {
  return ::cs::EnmCreditAlterType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmBoxType>() {
  return ::cs::EnmBoxType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmPvpStatType>() {
  return ::cs::EnmPvpStatType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::EnmSyncRedisData>() {
  return ::cs::EnmSyncRedisData_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cs_5fenum_2eproto__INCLUDED
